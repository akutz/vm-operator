{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VM Operator","text":"<p>Self-service manage your virtual infrastructure...</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>A virtual machine may be deployed on vSphere Supervisor by applying the following YAML with <code>kubectl</code>:</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name:      my-vm\n  namespace: my-namespace\nspec:\n  className:    small\n  imageName:    ubuntu-2210\n  storageClass: iscsi\n</code></pre>"},{"location":"#user-guide","title":"User Guide","text":"<p>The user guide provides information on:</p> <ul> <li>Bootstrap Providers -- how to bootstrap the VM's guest</li> <li>Supported Platforms -- where/how VM Operator can be deployed</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This section lists the platforms on which VM Operator is supported:</p> <ul> <li>Supervisor</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>Having issues? No worries, let's figure it out together. Please don't hesitate to use GitHub issues.</p>"},{"location":"about/contributing/","title":"Contributing to VM Operator","text":"<p>An introduction to contributing to the VM Operator project</p> <p>The VM Operator project welcomes, and depends, on contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are:</p> <ul> <li>Code patches via pull requests</li> <li>Documentation improvements</li> <li>Bug reports and patch reviews</li> </ul>"},{"location":"about/contributing/#reporting-an-issue","title":"Reporting an Issue","text":"<p>Please include as much detail as you can. This includes:</p> <ul> <li>The VM Operator version</li> <li>The name and verison of the platform on which VM Operator is installed</li> <li>A set of logs with debug-logging enabled that show the problem</li> </ul>"},{"location":"about/contributing/#testing-the-development-version","title":"Testing the Development Version","text":"<p>If you want to just install and try out the latest development version of VM Operator, you may:</p> <ol> <li> <p>Build the container image:</p> <p><code>shell make docker-build</code></p> </li> <li> <p>Save the image to a tar file:</p> <p><code>shell docker save &lt;IMAGE&gt; &gt;&lt;IMAGE&gt;.tar</code></p> </li> <li> <p>Upload the tar file to each Supervisor control plane node:</p> <p><code>// TODO(akutz)</code></p> </li> <li> <p>Load the image into the ContainerD namespace <code>k8s.io</code> on each Supervisor control plane node:</p> <p><code>// TODO(akutz)</code></p> </li> <li> <p>Update the VM Operator <code>Deployment</code> to reference the custom image:</p> <p><code>// TODO(akutz)</code></p> </li> </ol>"},{"location":"about/contributing/#running-the-tests","title":"Running the tests","text":"<p>To run the tests, please run the following command(s):</p> <pre><code>make -j1 test test-integration\n</code></pre>"},{"location":"about/contributing/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.</p>"},{"location":"about/license/","title":"Licensing","text":"<p>The legal stuff</p>"},{"location":"about/license/#vm-operator-license","title":"VM Operator License","text":"<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"about/release-notes/","title":"Release Notes","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"apis/overview/","title":"APIs","text":"<p>The VM Operator APIs</p> <p><code>TODO(akutz)</code></p>"},{"location":"apis/v1alpha1/","title":"v1alpha1","text":"<p>Package v1alpha1 contains the VM Operator v1alpha1 APIs.</p>"},{"location":"apis/v1alpha1/#kinds","title":"Kinds","text":""},{"location":"apis/v1alpha1/#clustervirtualmachineimage","title":"ClusterVirtualMachineImage","text":"<p>ClusterVirtualMachineImage is the schema for the clustervirtualmachineimage API A ClusterVirtualMachineImage represents the desired specification and the observed status of a ClusterVirtualMachineImage instance.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ClusterVirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"apis/v1alpha1/#contentlibraryprovider","title":"ContentLibraryProvider","text":"<p>ContentLibraryProvider is the Schema for the contentlibraryproviders API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentLibraryProvider</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ContentLibraryProviderSpec <code>status</code> ContentLibraryProviderStatus"},{"location":"apis/v1alpha1/#contentsource","title":"ContentSource","text":"<p>ContentSource is the Schema for the contentsources API. A ContentSource represents the desired specification and the observed status of a ContentSource instance.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentSource</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ContentSourceSpec <code>status</code> ContentSourceStatus"},{"location":"apis/v1alpha1/#contentsourcebinding","title":"ContentSourceBinding","text":"<p>ContentSourceBinding is an object that represents a ContentSource to Namespace mapping.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentSourceBinding</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>contentSourceRef</code> ContentSourceReference ContentSourceRef is a reference to a ContentSource object."},{"location":"apis/v1alpha1/#virtualmachine","title":"VirtualMachine","text":"<p>VirtualMachine is the Schema for the virtualmachines API. A VirtualMachine represents the desired specification and the observed status of a VirtualMachine instance.  A VirtualMachine is realized by the VirtualMachine controller on a backing Virtual Infrastructure provider such as vSphere.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachine</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSpec <code>status</code> VirtualMachineStatus"},{"location":"apis/v1alpha1/#virtualmachineclass","title":"VirtualMachineClass","text":"<p>VirtualMachineClass is the Schema for the virtualmachineclasses API. A VirtualMachineClass represents the desired specification and the observed status of a VirtualMachineClass instance.  A VirtualMachineClass represents a policy and configuration resource which defines a set of attributes to be used in the configuration of a VirtualMachine instance.  A VirtualMachine resource references a VirtualMachineClass as a required input.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineClass</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineClassSpec <code>status</code> VirtualMachineClassStatus"},{"location":"apis/v1alpha1/#virtualmachineclassbinding","title":"VirtualMachineClassBinding","text":"<p>VirtualMachineClassBinding is a binding object responsible for defining a VirtualMachineClass and a Namespace associated with it.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineClassBinding</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>classRef</code> ClassReference ClassReference is a reference to a VirtualMachineClass object"},{"location":"apis/v1alpha1/#virtualmachineimage","title":"VirtualMachineImage","text":"<p>VirtualMachineImage is the Schema for the virtualmachineimages API A VirtualMachineImage represents a VirtualMachine image (e.g. VM template) that can be used as the base image for creating a VirtualMachine instance.  The VirtualMachineImage is a required field of the VirtualMachine spec.  Currently, VirtualMachineImages are immutable to end users.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"apis/v1alpha1/#virtualmachinepublishrequest","title":"VirtualMachinePublishRequest","text":"<p>VirtualMachinePublishRequest defines the information necessary to publish a VirtualMachine as a VirtualMachineImage to an image registry.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachinePublishRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachinePublishRequestSpec <code>status</code> VirtualMachinePublishRequestStatus"},{"location":"apis/v1alpha1/#virtualmachineservice","title":"VirtualMachineService","text":"<p>VirtualMachineService is the Schema for the virtualmachineservices API. A VirtualMachineService represents the desired specification and the observed status of a VirtualMachineService instance. A VirtualMachineService represents a network service, provided by one or more VirtualMachines, that is desired to be exposed to other workloads both internal and external to the cluster.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineService</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineServiceSpec <code>status</code> VirtualMachineServiceStatus"},{"location":"apis/v1alpha1/#virtualmachinesetresourcepolicy","title":"VirtualMachineSetResourcePolicy","text":"<p>VirtualMachineSetResourcePolicy is the Schema for the virtualmachinesetresourcepolicies API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineSetResourcePolicy</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSetResourcePolicySpec <code>status</code> VirtualMachineSetResourcePolicyStatus"},{"location":"apis/v1alpha1/#webconsolerequest","title":"WebConsoleRequest","text":"<p>WebConsoleRequest allows the creation of a one-time web console ticket that can be used to interact with the VM.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>WebConsoleRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> WebConsoleRequestSpec <code>status</code> WebConsoleRequestStatus"},{"location":"apis/v1alpha1/#types","title":"Types","text":""},{"location":"apis/v1alpha1/#classreference","title":"ClassReference","text":"<p>ClassReference contains info to locate a Kind VirtualMachineClass object.</p> <p>Appears in: - VirtualMachineClassBinding</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced."},{"location":"apis/v1alpha1/#clustermodulespec","title":"ClusterModuleSpec","text":"<p>ClusterModuleSpec defines a grouping of VirtualMachines that are to be grouped together as a logical unit by the infrastructure provider.  Within vSphere, the ClusterModuleSpec maps directly to a vSphere ClusterModule.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>groupname</code> string GroupName describes the name of the ClusterModule Group."},{"location":"apis/v1alpha1/#clustermodulestatus","title":"ClusterModuleStatus","text":"<p>Appears in: - VirtualMachineSetResourcePolicyStatus</p> Field Description <code>groupname</code> string <code>moduleUUID</code> string <code>clusterMoID</code> string"},{"location":"apis/v1alpha1/#condition","title":"Condition","text":"<p>Condition defines an observation of a VM Operator API resource operational state.</p> <p>Appears in: - VirtualMachineImageStatus - VirtualMachinePublishRequestStatus - VirtualMachineStatus</p> Field Description <code>type</code> ConditionType Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to disambiguate is important. <code>status</code> ConditionStatus Status of the condition, one of True, False, Unknown. <code>severity</code> ConditionSeverity Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False. <code>lastTransitionTime</code> Time Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable. <code>reason</code> string The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty. <code>message</code> string A human readable message indicating details about the transition. This field may be empty."},{"location":"apis/v1alpha1/#contentlibraryproviderspec","title":"ContentLibraryProviderSpec","text":"<p>ContentLibraryProviderSpec defines the desired state of ContentLibraryProvider.</p> <p>Appears in: - ContentLibraryProvider</p> Field Description <code>uuid</code> string UUID describes the UUID of a vSphere content library. It is the unique identifier for a vSphere content library."},{"location":"apis/v1alpha1/#contentproviderreference","title":"ContentProviderReference","text":"<p>ContentProviderReference contains the info to locate a content provider resource.</p> <p>Appears in: - ContentSourceSpec - VirtualMachineImageSpec</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced. <code>namespace</code> string Namespace of the resource being referenced. If empty, cluster scoped resource is assumed."},{"location":"apis/v1alpha1/#contentsourcereference","title":"ContentSourceReference","text":"<p>ContentSourceReference contains info to locate a Kind ContentSource object.</p> <p>Appears in: - ContentSourceBinding</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced."},{"location":"apis/v1alpha1/#contentsourcespec","title":"ContentSourceSpec","text":"<p>ContentSourceSpec defines the desired state of ContentSource.</p> <p>Appears in: - ContentSource</p> Field Description <code>providerRef</code> ContentProviderReference ProviderRef is a reference to a content provider object that describes a provider."},{"location":"apis/v1alpha1/#dynamicdirectpathiodevice","title":"DynamicDirectPathIODevice","text":"<p>DynamicDirectPathIODevice contains the configuration corresponding to a Dynamic DirectPath I/O device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>vendorID</code> integer <code>deviceID</code> integer <code>customLabel</code> string"},{"location":"apis/v1alpha1/#folderspec","title":"FolderSpec","text":"<p>FolderSpec defines a Folder.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>name</code> string Name describes the name of the Folder"},{"location":"apis/v1alpha1/#guestheartbeataction","title":"GuestHeartbeatAction","text":"<p>GuestHeartbeatAction describes an action based on the guest heartbeat.</p> <p>Appears in: - Probe</p> Field Description <code>thresholdStatus</code> GuestHeartbeatStatus ThresholdStatus is the value that the guest heartbeat status must be at or above to be considered successful."},{"location":"apis/v1alpha1/#guestheartbeatstatus","title":"GuestHeartbeatStatus","text":"<p>Underlying type: <code>string</code></p> <p>GuestHeartbeatStatus is the status type for a GuestHeartbeat.</p> <p>Appears in: - GuestHeartbeatAction</p>"},{"location":"apis/v1alpha1/#instancestorage","title":"InstanceStorage","text":"<p>InstanceStorage provides information used to configure instance storage volumes for a VirtualMachine.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>storageClass</code> string StorageClass refers to the name of a StorageClass resource used to provide the storage for the configured instance storage volumes. The value of this field has no relationship to or bearing on the field virtualMachine.spec.storageClass. Please note the referred StorageClass must be available in the same namespace as the VirtualMachineClass that uses it for configuring instance storage. <code>volumes</code> InstanceStorageVolume array Volumes describes instance storage volumes created for a VirtualMachine instance that use this VirtualMachineClass."},{"location":"apis/v1alpha1/#instancestoragevolume","title":"InstanceStorageVolume","text":"<p>InstanceStorageVolume contains information required to create an instance storage volume on a VirtualMachine.</p> <p>Appears in: - InstanceStorage</p> Field Description <code>size</code> Quantity"},{"location":"apis/v1alpha1/#instancevolumeclaimvolumesource","title":"InstanceVolumeClaimVolumeSource","text":"<p>InstanceVolumeClaimVolumeSource contains information about the instance storage volume claimed as a PVC.</p> <p>Appears in: - PersistentVolumeClaimVolumeSource</p> Field Description <code>storageClass</code> string StorageClass is the name of the Kubernetes StorageClass that provides the backing storage for this instance storage volume. <code>size</code> Quantity Size is the size of the requested instance storage volume."},{"location":"apis/v1alpha1/#loadbalanceringress","title":"LoadBalancerIngress","text":"<p>LoadBalancerIngress represents the status of a load balancer ingress point: traffic intended for the service should be sent to an ingress point. IP or Hostname may both be set in this structure. It is up to the consumer to determine which field should be used when accessing this LoadBalancer.</p> <p>Appears in: - LoadBalancerStatus</p> Field Description <code>ip</code> string IP is set for load balancer ingress points that are specified by an IP address. <code>hostname</code> string Hostname is set for load balancer ingress points that are specified by a DNS address."},{"location":"apis/v1alpha1/#loadbalancerstatus","title":"LoadBalancerStatus","text":"<p>LoadBalancerStatus represents the status of a load balancer.</p> <p>Appears in: - VirtualMachineServiceStatus</p> Field Description <code>ingress</code> LoadBalancerIngress array Ingress is a list containing ingress addresses for the load balancer. Traffic intended for the service should be sent to any of these ingress points."},{"location":"apis/v1alpha1/#networkdevicestatus","title":"NetworkDeviceStatus","text":"<p>NetworkDeviceStatus defines the network interface IP configuration including gateway, subnetmask and IP address as seen by OVF properties.</p> <p>Appears in: - NetworkStatus</p> Field Description <code>Gateway4</code> string Gateway4 is the gateway for the IPv4 address family for this device. <code>IPAddresses</code> string array IpAddresses represents one or more IP addresses assigned to the network device in CIDR notation, ex. \"192.0.2.1/16\"."},{"location":"apis/v1alpha1/#networkinterfaceproviderreference","title":"NetworkInterfaceProviderReference","text":"<p>NetworkInterfaceProviderReference contains info to locate a network interface provider object.</p> <p>Appears in: - VirtualMachineNetworkInterface</p> Field Description <code>apiGroup</code> string APIGroup is the group for the resource being referenced. <code>kind</code> string Kind is the type of resource being referenced <code>name</code> string Name is the name of resource being referenced <code>apiVersion</code> string API version of the referent."},{"location":"apis/v1alpha1/#networkinterfacestatus","title":"NetworkInterfaceStatus","text":"<p>NetworkInterfaceStatus defines the observed state of network interfaces attached to the VirtualMachine as seen by the Guest OS and VMware tools.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>connected</code> boolean Connected represents whether the network interface is connected or not. <code>macAddress</code> string MAC address of the network adapter <code>ipAddresses</code> string array IpAddresses represents zero, one or more IP addresses assigned to the network interface in CIDR notation. For eg, \"192.0.2.1/16\"."},{"location":"apis/v1alpha1/#networkstatus","title":"NetworkStatus","text":"<p>NetworkStatus describes the observed state of the VM's network configuration.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>Devices</code> NetworkDeviceStatus array Devices describe a list of current status information for each network interface that is desired to be attached to the VirtualMachineTemplate. <code>Nameservers</code> string array Nameservers describe a list of the DNS servers accessible by one of the VM's configured network devices."},{"location":"apis/v1alpha1/#ovfproperty","title":"OvfProperty","text":"<p>OvfProperty describes information related to a user configurable property element that is supported by VirtualMachineImage and can be customized during VirtualMachine creation.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>key</code> string Key describes the key of the ovf property. <code>type</code> string Type describes the type of the ovf property. <code>default</code> string Default describes the default value of the ovf key. <code>description</code> string Description contains the value of the OVF property's optional \"Description\" element. <code>label</code> string Label contains the value of the OVF property's optional \"Label\" element."},{"location":"apis/v1alpha1/#persistentvolumeclaimvolumesource","title":"PersistentVolumeClaimVolumeSource","text":"<p>PersistentVolumeClaimVolumeSource is a composite for the Kubernetes corev1.PersistentVolumeClaimVolumeSource and instance storage options.</p> <p>Appears in: - VirtualMachineVolume</p> Field Description <code>claimName</code> string ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims <code>readOnly</code> boolean Will force the ReadOnly setting in VolumeMounts. Default false. <code>instanceVolumeClaim</code> InstanceVolumeClaimVolumeSource InstanceVolumeClaim is set if the PVC is backed by instance storage."},{"location":"apis/v1alpha1/#probe","title":"Probe","text":"<p>Probe describes a health check to be performed against a VirtualMachine to determine whether it is alive or ready to receive traffic. Only one probe action can be specified.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>tcpSocket</code> TCPSocketAction TCPSocket specifies an action involving a TCP port. <code>guestHeartbeat</code> GuestHeartbeatAction GuestHeartbeat specifies an action involving the guest heartbeat status. <code>timeoutSeconds</code> integer TimeoutSeconds specifies a number of seconds after which the probe times out. Defaults to 10 seconds. Minimum value is 1. <code>periodSeconds</code> integer PeriodSeconds specifics how often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1."},{"location":"apis/v1alpha1/#resourcepoolspec","title":"ResourcePoolSpec","text":"<p>ResourcePoolSpec defines a Logical Grouping of workloads that share resource policies.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>name</code> string Name describes the name of the ResourcePool grouping. <code>reservations</code> VirtualMachineResourceSpec Reservations describes the guaranteed resources reserved for the ResourcePool. <code>limits</code> VirtualMachineResourceSpec Limits describes the limit to resources available to the ResourcePool."},{"location":"apis/v1alpha1/#tcpsocketaction","title":"TCPSocketAction","text":"<p>TCPSocketAction describes an action based on opening a socket.</p> <p>Appears in: - Probe</p> Field Description <code>port</code> IntOrString Port specifies a number or name of the port to access on the VirtualMachine. If the format of port is a number, it must be in the range 1 to 65535. If the format of name is a string, it must be an IANA_SVC_NAME. <code>host</code> string Host is an optional host name to connect to.  Host defaults to the VirtualMachine IP."},{"location":"apis/v1alpha1/#vgpudevice","title":"VGPUDevice","text":"<p>VGPUDevice contains the configuration corresponding to a vGPU device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>profileName</code> string"},{"location":"apis/v1alpha1/#virtualdevices","title":"VirtualDevices","text":"<p>VirtualDevices contains information about the virtual devices associated with a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>vgpuDevices</code> VGPUDevice array <code>dynamicDirectPathIODevices</code> DynamicDirectPathIODevice array"},{"location":"apis/v1alpha1/#virtualmachineadvancedoptions","title":"VirtualMachineAdvancedOptions","text":"<p>VirtualMachineAdvancedOptions describes a set of optional, advanced options for configuring a VirtualMachine.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>defaultVolumeProvisioningOptions</code> VirtualMachineVolumeProvisioningOptions DefaultProvisioningOptions specifies the provisioning type to be used by default for VirtualMachine volumes exclusively owned by this VirtualMachine. This does not apply to PersistentVolumeClaim volumes that are created and managed externally. <code>changeBlockTracking</code> boolean ChangeBlockTracking specifies the enablement of incremental backup support for this VirtualMachine, which can be utilized by external backup systems such as VMware Data Recovery."},{"location":"apis/v1alpha1/#virtualmachineclasshardware","title":"VirtualMachineClassHardware","text":"<p>VirtualMachineClassHardware describes a virtual hardware resource specification.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>cpus</code> integer <code>memory</code> Quantity <code>devices</code> VirtualDevices <code>instanceStorage</code> InstanceStorage"},{"location":"apis/v1alpha1/#virtualmachineclasspolicies","title":"VirtualMachineClassPolicies","text":"<p>VirtualMachineClassPolicies describes the policy configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>resources</code> VirtualMachineClassResources"},{"location":"apis/v1alpha1/#virtualmachineclassresources","title":"VirtualMachineClassResources","text":"<p>VirtualMachineClassResources describes the virtual hardware resource reservations and limits configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassPolicies</p> Field Description <code>requests</code> VirtualMachineResourceSpec <code>limits</code> VirtualMachineResourceSpec"},{"location":"apis/v1alpha1/#virtualmachineclassspec","title":"VirtualMachineClassSpec","text":"<p>VirtualMachineClassSpec defines the desired state of VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClass</p> Field Description <code>hardware</code> VirtualMachineClassHardware Hardware describes the configuration of the VirtualMachineClass attributes related to virtual hardware.  The configuration specified in this field is used to customize the virtual hardware characteristics of any VirtualMachine associated with this VirtualMachineClass. <code>policies</code> VirtualMachineClassPolicies Policies describes the configuration of the VirtualMachineClass attributes related to virtual infrastructure policy.  The configuration specified in this field is used to customize various policies related to infrastructure resource consumption. <code>description</code> string Description describes the configuration of the VirtualMachineClass which is not related to virtual hardware or infrastructure policy. This field is used to address remaining specs about this VirtualMachineClass. <code>configSpec</code> json.RawMessage ConfigSpec describes additional configuration information for a VirtualMachine. The contents of this field are the VirtualMachineConfigSpec data object (https://bit.ly/3HDtiRu) marshaled to JSON using the discriminator field \"_typeName\" to preserve type information."},{"location":"apis/v1alpha1/#virtualmachineimageosinfo","title":"VirtualMachineImageOSInfo","text":"<p>VirtualMachineImageOSInfo describes optional information related to the image operating system that can be added to an image template. This information can be used by the image author to communicate details of the operating system associated with the image.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>version</code> string Version typically describes the version of the guest operating system. <code>type</code> string Type typically describes the type of the guest operating system."},{"location":"apis/v1alpha1/#virtualmachineimageproductinfo","title":"VirtualMachineImageProductInfo","text":"<p>VirtualMachineImageProductInfo describes optional product-related information that can be added to an image template.  This information can be used by the image author to communicate details of the product contained in the image.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>product</code> string Product typically describes the type of product contained in the image. <code>vendor</code> string Vendor typically describes the name of the vendor that is producing the image. <code>version</code> string Version typically describes a short-form version of the image. <code>fullVersion</code> string FullVersion typically describes a long-form version of the image."},{"location":"apis/v1alpha1/#virtualmachineimagespec","title":"VirtualMachineImageSpec","text":"<p>VirtualMachineImageSpec defines the desired state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>type</code> string Type describes the type of the VirtualMachineImage. Currently, the only supported image is \"OVF\" <code>imageSourceType</code> string ImageSourceType describes the type of content source of the VirtualMachineImage.  The only Content Source supported currently is the vSphere Content Library. <code>imageID</code> string ImageID is a unique identifier exposed by the provider of this VirtualMachineImage. <code>providerRef</code> ContentProviderReference ProviderRef is a reference to a content provider object that describes a provider. <code>productInfo</code> VirtualMachineImageProductInfo ProductInfo describes the attributes of the VirtualMachineImage relating to the product contained in the image. <code>osInfo</code> VirtualMachineImageOSInfo OSInfo describes the attributes of the VirtualMachineImage relating to the Operating System contained in the image. <code>ovfEnv</code> object (keys:string, values:OvfProperty) OVFEnv describes the user configurable customization parameters of the VirtualMachineImage. <code>hwVersion</code> integer HardwareVersion describes the virtual hardware version of the image"},{"location":"apis/v1alpha1/#virtualmachineimagestatus","title":"VirtualMachineImageStatus","text":"<p>VirtualMachineImageStatus defines the observed state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>uuid</code> string Deprecated <code>internalId</code> string Deprecated <code>powerState</code> string Deprecated <code>imageName</code> string ImageName describes the display name of this VirtualMachineImage. <code>imageSupported</code> boolean ImageSupported indicates whether the VirtualMachineImage is supported by VMService. A VirtualMachineImage is supported by VMService if the following conditions are true: - VirtualMachineImageV1Alpha1CompatibleCondition <code>conditions</code> Condition array Conditions describes the current condition information of the VirtualMachineImage object. e.g. if the OS type is supported or image is supported by VMService <code>contentLibraryRef</code> TypedLocalObjectReference ContentLibraryRef is a reference to the source ContentLibrary/ClusterContentLibrary resource. <code>contentVersion</code> string ContentVersion describes the observed content version of this VirtualMachineImage that was last successfully synced with the vSphere content library item. <code>firmware</code> string Firmware describe the firmware type used by this VirtualMachineImage. eg: bios, efi."},{"location":"apis/v1alpha1/#virtualmachinemetadata","title":"VirtualMachineMetadata","text":"<p>VirtualMachineMetadata defines any metadata that should be passed to the VirtualMachine instance.  A typical use case is for this metadata to be used for Guest Customization, however the intended use of the metadata is agnostic to the VirtualMachine controller.  VirtualMachineMetadata is read from a configured ConfigMap or a Secret and then propagated to the VirtualMachine instance using a desired \"Transport\" mechanism.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>configMapName</code> string ConfigMapName describes the name of the ConfigMap, in the same Namespace as the VirtualMachine, that should be used for VirtualMachine metadata.  The contents of the Data field of the ConfigMap is used as the VM Metadata. The format of the contents of the VM Metadata are not parsed or interpreted by the VirtualMachine controller. Please note, this field and SecretName are mutually exclusive. <code>secretName</code> string SecretName describes the name of the Secret, in the same Namespace as the VirtualMachine, that should be used for VirtualMachine metadata. The contents of the Data field of the Secret is used as the VM Metadata. The format of the contents of the VM Metadata are not parsed or interpreted by the VirtualMachine controller. Please note, this field and ConfigMapName are mutually exclusive. <code>transport</code> VirtualMachineMetadataTransport Transport describes the name of a supported VirtualMachineMetadata transport protocol.  Currently, the only supported transport protocols are \"ExtraConfig\", \"OvfEnv\" and \"CloudInit\"."},{"location":"apis/v1alpha1/#virtualmachinenetworkinterface","title":"VirtualMachineNetworkInterface","text":"<p>VirtualMachineNetworkInterface defines the properties of a network interface to attach to a VirtualMachine instance.  A VirtualMachineNetworkInterface describes network interface configuration that is used by the VirtualMachine controller when integrating the VirtualMachine into a VirtualNetwork.  Currently, only NSX-T and vSphere Distributed Switch (VDS) type network integrations are supported using this VirtualMachineNetworkInterface structure.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>networkType</code> string NetworkType describes the type of VirtualNetwork that is referenced by the NetworkName.  Currently, the only supported NetworkTypes are \"nsx-t\" and \"vsphere-distributed\". <code>networkName</code> string NetworkName describes the name of an existing virtual network that this interface should be added to. For \"nsx-t\" NetworkType, this is the name of a pre-existing NSX-T VirtualNetwork. If unspecified, the default network for the namespace will be used. For \"vsphere-distributed\" NetworkType, the NetworkName must be specified. <code>providerRef</code> NetworkInterfaceProviderReference ProviderRef is reference to a network interface provider object that specifies the network interface configuration. If unset, default configuration is assumed. <code>ethernetCardType</code> string EthernetCardType describes an optional ethernet card that should be used by the VirtualNetworkInterface (vNIC) associated with this network integration.  The default is \"vmxnet3\"."},{"location":"apis/v1alpha1/#virtualmachineport","title":"VirtualMachinePort","text":"<p>VirtualMachinePort is unused and can be considered deprecated.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>port</code> integer <code>ip</code> string <code>name</code> string <code>protocol</code> Protocol"},{"location":"apis/v1alpha1/#virtualmachinepublishrequestsource","title":"VirtualMachinePublishRequestSource","text":"<p>VirtualMachinePublishRequestSource is the source of a publication request, typically a VirtualMachine resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>name</code> string Name is the name of the referenced object. If omitted this value defaults to the name of the VirtualMachinePublishRequest resource. <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"apis/v1alpha1/#virtualmachinepublishrequestspec","title":"VirtualMachinePublishRequestSpec","text":"<p>VirtualMachinePublishRequestSpec defines the desired state of a VirtualMachinePublishRequest.   All the fields in this spec are optional. This is especially useful when a DevOps persona wants to publish a VM without doing anything more than applying a VirtualMachinePublishRequest resource that has the same name as said VM in the same namespace as said VM.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>source</code> VirtualMachinePublishRequestSource Source is the source of the publication request, ex. a VirtualMachine resource. If this value is omitted then the publication controller checks to see if there is a resource with the same name as this VirtualMachinePublishRequest resource, an API version equal to spec.source.apiVersion, and a kind equal to spec.source.kind. If such a resource exists, then it is the source of the publication. <code>target</code> VirtualMachinePublishRequestTarget Target is the target of the publication request, ex. item information and a ContentLibrary resource. If this value is omitted, the controller uses spec.source.name + \"-image\" as the name of the published item. Additionally, when omitted the controller attempts to identify the target location by matching a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, w/ the label \"imageregistry.vmware.com/default\". Please note that while optional, if a VirtualMachinePublishRequest sans target information is applied to a namespace without a default publication target, then the VirtualMachinePublishRequest resource will be marked in error. <code>ttlSecondsAfterFinished</code> integer TTLSecondsAfterFinished is the time-to-live duration for how long this resource will be allowed to exist once the publication operation completes. After the TTL expires, the resource will be automatically deleted without the user having to take any direct action. If this field is unset then the request resource will not be automatically deleted. If this field is set to zero then the request resource is eligible for deletion immediately after it finishes."},{"location":"apis/v1alpha1/#virtualmachinepublishrequeststatus","title":"VirtualMachinePublishRequestStatus","text":"<p>VirtualMachinePublishRequestStatus defines the observed state of a VirtualMachinePublishRequest.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>sourceRef</code> VirtualMachinePublishRequestSource SourceRef is the reference to the source of the publication request, ex. a VirtualMachine resource. <code>targetRef</code> VirtualMachinePublishRequestTarget TargetRef is the reference to the target of the publication request, ex. item information and a ContentLibrary resource. <code>completionTime</code> Time CompletionTime represents time when the request was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The value of this field should be equal to the value of the LastTransitionTime for the status condition Type=Complete. <code>startTime</code> Time StartTime represents time when the request was acknowledged by the controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. <code>attempts</code> integer Attempts represents the number of times the request to publish the VM has been attempted. <code>lastAttemptTime</code> Time LastAttemptTime represents the time when the latest request was sent. <code>imageName</code> string ImageName is the name of the VirtualMachineImage resource that is eventually realized in the same namespace as the VM and publication request after the publication operation completes. This field will not be set until the VirtualMachineImage resource is realized. <code>ready</code> boolean Ready is set to true only when the VM has been published successfully and the new VirtualMachineImage resource is ready. Readiness is determined by waiting until there is status condition Type=Complete and ensuring it and all other status conditions present have a Status=True. The conditions present will be: * SourceValid * TargetValid * Uploaded * ImageAvailable * Complete <code>conditions</code> Condition array Conditions is a list of the latest, available observations of the request's current state."},{"location":"apis/v1alpha1/#virtualmachinepublishrequesttarget","title":"VirtualMachinePublishRequestTarget","text":"<p>VirtualMachinePublishRequestTarget is the target of a publication request, typically a ContentLibrary resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>item</code> VirtualMachinePublishRequestTargetItem Item contains information about the name of the object to which the VM is published. Please note this value is optional and if omitted, the controller will use spec.source.name + \"-image\" as the name of the published item. <code>location</code> VirtualMachinePublishRequestTargetLocation Location contains information about the location to which to publish the VM."},{"location":"apis/v1alpha1/#virtualmachinepublishrequesttargetitem","title":"VirtualMachinePublishRequestTargetItem","text":"<p>VirtualMachinePublishRequestTargetItem is the item part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the name of the published object. If the spec.target.location.apiVersion equals imageregistry.vmware.com/v1alpha1 and the spec.target.location.kind equals ContentLibrary, then this should be the name that will show up in vCenter Content Library, not the custom resource name in the namespace. If omitted then the controller will use spec.source.name + \"-image\". <code>description</code> string Description is the description to assign to the published object."},{"location":"apis/v1alpha1/#virtualmachinepublishrequesttargetlocation","title":"VirtualMachinePublishRequestTargetLocation","text":"<p>VirtualMachinePublishRequestTargetLocation is the location part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the name of the referenced object. Please note an error will be returned if this field is not set in a namespace that lacks a default publication target. A default publication target is a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, and has the label \"imageregistry.vmware.com/default\". <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"apis/v1alpha1/#virtualmachineresourcespec","title":"VirtualMachineResourceSpec","text":"<p>VirtualMachineResourceSpec describes a virtual hardware policy specification.</p> <p>Appears in: - ResourcePoolSpec - VirtualMachineClassResources</p> Field Description <code>cpu</code> Quantity <code>memory</code> Quantity"},{"location":"apis/v1alpha1/#virtualmachineserviceport","title":"VirtualMachineServicePort","text":"<p>VirtualMachineServicePort describes the specification of a service port to be exposed by a VirtualMachineService. This VirtualMachineServicePort specification includes attributes that define the external and internal representation of the service port.</p> <p>Appears in: - VirtualMachineServiceSpec</p> Field Description <code>name</code> string Name describes the name to be used to identify this VirtualMachineServicePort <code>protocol</code> string Protocol describes the Layer 4 transport protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". <code>port</code> integer Port describes the external port that will be exposed by the service. <code>targetPort</code> integer TargetPort describes the internal port open on a VirtualMachine that should be mapped to the external Port."},{"location":"apis/v1alpha1/#virtualmachineservicespec","title":"VirtualMachineServiceSpec","text":"<p>VirtualMachineServiceSpec defines the desired state of VirtualMachineService. Each VirtualMachineService exposes a set of TargetPorts on a set of VirtualMachine instances as a network endpoint within or outside of the Kubernetes cluster. The VirtualMachineService is loosely coupled to the VirtualMachines that are backing it through the use of a Label Selector. In Kubernetes, a Label Selector enables matching of a resource using a set of key-value pairs, aka Labels. By using a Label Selector, the VirtualMachineService can be generically defined to apply to any VirtualMachine in the same namespace that has the appropriate set of labels.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>type</code> VirtualMachineServiceType Type specifies a desired VirtualMachineServiceType for this VirtualMachineService. Supported types are ClusterIP, LoadBalancer, ExternalName. <code>ports</code> VirtualMachineServicePort array Ports specifies a list of VirtualMachineServicePort to expose with this VirtualMachineService. Each of these ports will be an accessible network entry point to access this service by. <code>selector</code> object (keys:string, values:string) Selector specifies a map of key-value pairs, also known as a Label Selector, that is used to match this VirtualMachineService with the set of VirtualMachines that should back this VirtualMachineService. <code>loadBalancerIP</code> string Only applies to VirtualMachineService Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying load balancer provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the provider does not support the feature. <code>loadBalancerSourceRanges</code> string array LoadBalancerSourceRanges is an array of IP addresses in the format of CIDRs, for example: 103.21.244.0/22 and 10.0.0.0/24. If specified and supported by the load balancer provider, this will restrict ingress traffic to the specified client IPs. This field will be ignored if the provider does not support the feature. <code>clusterIp</code> string clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies <code>externalName</code> string externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName."},{"location":"apis/v1alpha1/#virtualmachineservicestatus","title":"VirtualMachineServiceStatus","text":"<p>VirtualMachineServiceStatus defines the observed state of VirtualMachineService.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>loadBalancer</code> LoadBalancerStatus LoadBalancer contains the current status of the load balancer, if one is present."},{"location":"apis/v1alpha1/#virtualmachinesetresourcepolicyspec","title":"VirtualMachineSetResourcePolicySpec","text":"<p>VirtualMachineSetResourcePolicySpec defines the desired state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>resourcepool</code> ResourcePoolSpec <code>folder</code> FolderSpec <code>clustermodules</code> ClusterModuleSpec array"},{"location":"apis/v1alpha1/#virtualmachinesetresourcepolicystatus","title":"VirtualMachineSetResourcePolicyStatus","text":"<p>VirtualMachineSetResourcePolicyStatus defines the observed state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>clustermodules</code> ClusterModuleStatus array"},{"location":"apis/v1alpha1/#virtualmachinespec","title":"VirtualMachineSpec","text":"<p>VirtualMachineSpec defines the desired state of a VirtualMachine.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>imageName</code> string ImageName describes the name of a VirtualMachineImage that is to be used as the base Operating System image of the desired VirtualMachine instances.  The VirtualMachineImage resources can be introspected to discover identifying attributes that may help users to identify the desired image to use. <code>className</code> string ClassName describes the name of a VirtualMachineClass that is to be used as the overlaid resource configuration of VirtualMachine.  A VirtualMachineClass is used to further customize the attributes of the VirtualMachine instance.  See VirtualMachineClass for more description. <code>powerState</code> VirtualMachinePowerState PowerState describes the desired power state of a VirtualMachine.  Valid power states are \"poweredOff\" and \"poweredOn\". <code>ports</code> VirtualMachinePort array Ports is currently unused and can be considered deprecated. <code>vmMetadata</code> VirtualMachineMetadata VmMetadata describes any optional metadata that should be passed to the Guest OS. <code>storageClass</code> string StorageClass describes the name of a StorageClass that should be used to configure storage-related attributes of the VirtualMachine instance. <code>networkInterfaces</code> VirtualMachineNetworkInterface array NetworkInterfaces describes a list of VirtualMachineNetworkInterfaces to be configured on the VirtualMachine instance. Each of these VirtualMachineNetworkInterfaces describes external network integration configurations that are to be used by the VirtualMachine controller when integrating the VirtualMachine into one or more external networks. <code>resourcePolicyName</code> string ResourcePolicyName describes the name of a VirtualMachineSetResourcePolicy to be used when creating the VirtualMachine instance. <code>volumes</code> VirtualMachineVolume array Volumes describes the list of VirtualMachineVolumes that are desired to be attached to the VirtualMachine.  Each of these volumes specifies a volume identity that the VirtualMachine controller will attempt to satisfy, potentially with an external Volume Management service. <code>readinessProbe</code> Probe ReadinessProbe describes a network probe that can be used to determine if the VirtualMachine is available and responding to the probe. <code>advancedOptions</code> VirtualMachineAdvancedOptions AdvancedOptions describes a set of optional, advanced options for configuring a VirtualMachine"},{"location":"apis/v1alpha1/#virtualmachinestatus","title":"VirtualMachineStatus","text":"<p>VirtualMachineStatus defines the observed state of a VirtualMachine instance.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>host</code> string Host describes the hostname or IP address of the infrastructure host that the VirtualMachine is executing on. <code>powerState</code> VirtualMachinePowerState PowerState describes the current power state of the VirtualMachine. <code>phase</code> VMStatusPhase Phase describes the current phase information of the VirtualMachine. <code>conditions</code> Condition array Conditions describes the current condition information of the VirtualMachine. <code>vmIp</code> string VmIp describes the Primary IP address assigned to the guest operating system, if known. Multiple IPs can be available for the VirtualMachine. Refer to networkInterfaces in the VirtualMachine status for additional IPs <code>uniqueID</code> string UniqueID describes a unique identifier that is provided by the underlying infrastructure provider, such as vSphere. <code>biosUUID</code> string BiosUUID describes a unique identifier provided by the underlying infrastructure provider that is exposed to the Guest OS BIOS as a unique hardware identifier. <code>instanceUUID</code> string InstanceUUID describes the unique instance UUID provided by the underlying infrastructure provider, such as vSphere. <code>volumes</code> VirtualMachineVolumeStatus array Volumes describes a list of current status information for each Volume that is desired to be attached to the VirtualMachine. <code>changeBlockTracking</code> boolean ChangeBlockTracking describes the CBT enablement status on the VirtualMachine. <code>networkInterfaces</code> NetworkInterfaceStatus array NetworkInterfaces describes a list of current status information for each network interface that is desired to be attached to the VirtualMachine. <code>zone</code> string Zone describes the availability zone where the VirtualMachine has been scheduled. Please note this field may be empty when the cluster is not zone-aware."},{"location":"apis/v1alpha1/#virtualmachinevolume","title":"VirtualMachineVolume","text":"<p>VirtualMachineVolume describes a Volume that should be attached to a specific VirtualMachine. Only one of PersistentVolumeClaim, VsphereVolume should be specified.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>name</code> string Name specifies the name of the VirtualMachineVolume.  Each volume within the scope of a VirtualMachine must have a unique name. <code>persistentVolumeClaim</code> PersistentVolumeClaimVolumeSource PersistentVolumeClaim represents a reference to a PersistentVolumeClaim in the same namespace. The PersistentVolumeClaim must match one of the following: * A volume provisioned (either statically or dynamically) by the cluster's CSI provider. * An instance volume with a lifecycle coupled to the VM. <code>vSphereVolume</code> VsphereVolumeSource VsphereVolume represents a reference to a VsphereVolumeSource in the same namespace. Only one of PersistentVolumeClaim or VsphereVolume can be specified. This is enforced via a webhook"},{"location":"apis/v1alpha1/#virtualmachinevolumeprovisioningoptions","title":"VirtualMachineVolumeProvisioningOptions","text":"<p>VirtualMachineVolumeProvisioningOptions specifies the provisioning options for a VirtualMachineVolume.</p> <p>Appears in: - VirtualMachineAdvancedOptions</p> Field Description <code>thinProvisioned</code> boolean ThinProvisioned specifies whether to use thin provisioning for the VirtualMachineVolume. This means a sparse (allocate on demand) format with additional space optimizations. <code>eagerZeroed</code> boolean EagerZeroed specifies whether to use eager zero provisioning for the VirtualMachineVolume. An eager zeroed thick disk has all space allocated and wiped clean of any previous contents on the physical media at creation time. Such disks may take longer time during creation compared to other disk formats. EagerZeroed is only applicable if ThinProvisioned is false. This is validated by the webhook."},{"location":"apis/v1alpha1/#virtualmachinevolumestatus","title":"VirtualMachineVolumeStatus","text":"<p>VirtualMachineVolumeStatus defines the observed state of a VirtualMachineVolume instance.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>name</code> string Name is the name of the volume in a VirtualMachine. <code>attached</code> boolean Attached represents whether a volume has been successfully attached to the VirtualMachine or not. <code>diskUUID</code> string DiskUuid represents the underlying virtual disk UUID and is present when attachment succeeds. <code>error</code> string Error represents the last error seen when attaching or detaching a volume.  Error will be empty if attachment succeeds."},{"location":"apis/v1alpha1/#vspherevolumesource","title":"VsphereVolumeSource","text":"<p>VsphereVolumeSource describes a volume source that represent static disks that belong to a VirtualMachine.</p> <p>Appears in: - VirtualMachineVolume</p> Field Description <code>capacity</code> object (keys:ResourceName, values:Quantity) A description of the virtual volume's resources and capacity <code>deviceKey</code> integer Device key of vSphere disk."},{"location":"apis/v1alpha1/#webconsolerequestspec","title":"WebConsoleRequestSpec","text":"<p>WebConsoleRequestSpec describes the specification for used to request a web console request.</p> <p>Appears in: - WebConsoleRequest</p> Field Description <code>virtualMachineName</code> string VirtualMachineName is the VM in the same namespace, for which the web console is requested. <code>publicKey</code> string PublicKey is used to encrypt the status.response. This is expected to be a RSA OAEP public key in X.509 PEM format."},{"location":"apis/v1alpha1/#webconsolerequeststatus","title":"WebConsoleRequestStatus","text":"<p>WebConsoleRequestStatus defines the observed state, which includes the web console request itself.</p> <p>Appears in: - WebConsoleRequest</p> Field Description <code>response</code> string Response will be the authenticated ticket corresponding to this web console request. <code>expiryTime</code> Time ExpiryTime is when the ticket referenced in Response will expire. <code>proxyAddr</code> string ProxyAddr describes the host address and optional port used to access the VM's web console. The value could be a DNS entry, IPv4, or IPv6 address, followed by an optional port. For example, valid values include: DNS * host.com * host.com:6443 IPv4 * 1.2.3.4 * 1.2.3.4:6443 IPv6 * 1234:1234:1234:1234:1234:1234:1234:1234 * [1234:1234:1234:1234:1234:1234:1234:1234]:6443 * 1234:1234:1234:0000:0000:0000:1234:1234 * 1234:1234:1234::::1234:1234 * [1234:1234:1234::::1234:1234]:6443 In other words, the field may be set to any value that is parsable by Go's https://pkg.go.dev/net#ResolveIPAddr and https://pkg.go.dev/net#ParseIP functions."},{"location":"dev-guide/build-reference/","title":"Build Reference","text":"<p>How to build VM Operator</p>"},{"location":"dev-guide/build-reference/#build-with-docker","title":"Build with Docker","text":"<p>By far the simplest method for building VM Operator is with Docker.</p>"},{"location":"dev-guide/build-reference/#docker-build-requirements","title":"Docker Build Requirements","text":"<p>This project has very few build requirements, but there are still one or two items of which to be aware. Also, please note these are the requirements to build VM Operator, not run it.</p> Requirement Version Operating System Linux, macOS Docker &gt;=21.0"},{"location":"dev-guide/build-reference/#build-the-container-image","title":"Build the Container Image","text":"<p>The following one-line command is the quickest, simplest, and most deterministic approach to building the VM Operator container image:</p> <pre><code>make docker-build\n</code></pre>"},{"location":"dev-guide/build-reference/#build-with-go","title":"Build with Go","text":"<p>The other option is to build the VM Operator binaries directly with Golang.</p>"},{"location":"dev-guide/build-reference/#go-build-requirements","title":"Go Build Requirements","text":"<p>Building VM Operator with Go has the following requirements:</p> Requirement Version Operating System Linux, macOS Go &gt;=1.19 Git &gt;= 2.0"},{"location":"dev-guide/build-reference/#build-the-manager","title":"Build the Manager","text":"<p>The primary artifact for VM Operator is the <code>manager</code> binary:</p> <pre><code>make manager\n</code></pre>"},{"location":"dev-guide/build-reference/#build-the-web-console-validator","title":"Build the Web Console Validator","text":"<p>The other artifact is the <code>web-console-validator</code> binary that is used on vSphere Supervisors to enable the web console feature via <code>kubectl</code>:</p> <pre><code>make web-console-validator\n</code></pre>"},{"location":"dev-guide/project-guidelines/","title":"Project Guidelines","text":"<p>These are important.</p> <p>People contributing code to this project must adhere to the following rules. These standards are in place to keep code clean, consistent, and stable.</p>"},{"location":"dev-guide/project-guidelines/#documentation","title":"Documentation","text":"<p>There are two types of documentation: source and markdown.</p>"},{"location":"dev-guide/project-guidelines/#source-code","title":"Source Code","text":"<p>All source code should be documented in accordance with the Go's documentation rules.</p>"},{"location":"dev-guide/project-guidelines/#markdown","title":"Markdown","text":"<p>When creating or modifying the project's <code>README.md</code> file or any of the documentation in the <code>docs</code> directory, please keep the following rules in mind:</p> <ol> <li>All links to internal resources should be relative.</li> <li>All links to markdown files should include the file extension.</li> </ol> <p>For example, the below link points to the <code>Supervisor</code> platform:</p> <p> /user-guide/platforms/supervisor.md</p> <p>However, when the above link is followed when viewing this page directly from the Github repository instead of the generated site documentation, the link will return a 404.</p> <p>While it's recommended that users view the generated site documentation instead of the source Markdown directly, we can still fix it so that the above link will work regardless. To fix the link, simply make it relative and add the Markdown file extension:</p> <p> ../user-guide/platforms/supervisor.md</p> <p>Now the link will work regardless from where it's viewed.</p>"},{"location":"dev-guide/project-guidelines/#style-syntax","title":"Style &amp; Syntax","text":"<p>All source files should be linted. Any errors or warnings produced by the tools should be corrected before the source is committed. To lint the project, please run the following command:</p> <pre><code>make lint\n</code></pre> <p>The above command lints markdown, shell scripts, and Go sources.</p> <p>Your IDE of choice likely has a plug-in that can utilize the golanglint-ci linter, and it will also constantly keep your Go sources up to date.</p> <p>Another option is to use a client-side, pre-commit hook to ensure that the sources meet the required standards. For example, in the project's <code>.git/hooks</code> directory create a file called <code>pre-commit</code> and mark it as executable. Then paste the following content inside the file:</p> <pre><code>#!/bin/sh\nmake lint 1&gt; /dev/null\n</code></pre> <p>The above script will execute prior to a Git commit operation, prior to even the commit message dialog. The script will invoke the <code>Makefile</code>'s <code>lint</code> target, formatting the sources. If the command returns a non-zero exit code, the commit operation will abort with the error.</p>"},{"location":"dev-guide/project-guidelines/#code-coverage","title":"Code Coverage","text":"<p>All new work submitted to the project should have associated tests where applicable. If there is ever a question of whether or not a test is applicable then the answer is likely yes.</p> <p>This project uses GitHub actions to add coverage to pull requests (PR). If a PR's coverage falls below 60%, the check fails and the PR will be declined until such time coverage is increased.</p> <p>It's also possible to test the project locally while outputting the code coverage. On the command line, from the project's root directory, execute the following:</p> <pre><code>make coverage-full\n</code></pre>"},{"location":"dev-guide/project-guidelines/#commit-messages","title":"Commit Messages","text":"<p>Commit messages should follow the guide 5 Useful Tips For a Better Commit Message. The two primary rules to which to adhere are  </p> <ol> <li> <p>Commit message subjects should not exceed 50 characters in total and should be followed by a blank line.</p> </li> <li> <p>The commit message's body should not have a width that exceeds 72 characters.</p> </li> </ol> <p>For example, the following commit has a very useful message that is succinct without losing utility.</p> <pre><code>commit e80c696939a03f26cd180934ba642a729b0d2941\nAuthor: akutz &lt;sakutz@gmail.com&gt;\nDate:   Tue Oct 20 23:47:36 2015 -0500\n\n    Added --format,-f option for CLI\n\n    This patch adds the flag '--format' or '-f' for the\n    following CLI commands:\n\n        * adapter instances\n        * device [get]\n        * snapshot [get]\n        * snapshot copy\n        * snapshot create\n        * volume [get]\n        * volume attach\n        * volume create\n        * volume map\n        * volume mount\n        * volume path\n\n    The user can specify either '--format=yml|yaml|json' or\n    '-f yml|yaml|json' in order to influence how the resulting,\n    structured data is marshaled prior to being emitted to the console.\n</code></pre> <p>Please note that the output above is the full output for viewing a commit. However, because the above message adheres to the commit message rules, it's quite easy to show just the commit's subject:</p> <pre><code>$ git show e80c696939a03f26cd180934ba642a729b0d2941 --format=\"%s\" -s\nAdded --format,-f option for CLI\n</code></pre> <p>It's also equally simple to print the commit's subject and body together:</p> <pre><code>$ git show e80c696939a03f26cd180934ba642a729b0d2941 --format=\"%s%n%n%b\" -s\nAdded --format,-f option for CLI\n\nThis patch adds the flag '--format' or '-f' for the\nfollowing CLI commands:\n\n    * adapter instances\n    * device [get]\n    * snapshot [get]\n    * snapshot copy\n    * snapshot create\n    * volume [get]\n    * volume attach\n    * volume create\n    * volume map\n    * volume mount\n    * volume path\n\nThe user can specify either '--format=yml|yaml|json' or\n'-f yml|yaml|json' in order to influence how the resulting,\nstructured data is marshaled prior to being emitted to the console.\n</code></pre>"},{"location":"dev-guide/project-guidelines/#submitting-changes","title":"Submitting Changes","text":"<p>All developers are required to follow the GitHub Flow model when proposing new features or even submitting fixes.</p> <p>Please note that although not explicitly stated in the referenced GitHub Flow model, all work should occur on a fork of this project, not from within a branch of this project itself.</p> <p>Pull requests submitted to this project should adhere to the following guidelines:</p> <ul> <li> <p>Branches should be rebased off of the upstream master prior to being opened as pull requests and again prior to merge. This is to ensure that the build system accounts for any changes that may only be detected during the build and test phase.</p> </li> <li> <p>Unless granted an exception a pull request should contain only a single commit. This is because features and patches should be atomic -- wholly shippable items that are either included in a release, or not. Please squash commits on a branch before opening a pull request. It is not a deal-breaker otherwise, but please be prepared to add a comment or explanation as to why you feel multiple commits are required.</p> </li> </ul>"},{"location":"dev-guide/release-process/","title":"Release Process","text":"<p>How to release VM Operator</p>"},{"location":"dev-guide/release-process/#project-stages","title":"Project Stages","text":"<p>This project has three parallels stages of release:</p> Name Description <code>unstable</code> The tip or HEAD of the <code>main</code> branch is referred to as <code>unstable</code> <code>staged</code> A commit tagged with the suffix <code>-rc\\d+</code> such as <code>v0.3.1-rc2</code> is a <code>staged</code> release. These are release candidates. <code>stable</code> A commit tagged with a version sans <code>-rc\\d+</code> suffix such as <code>v0.3.1</code> is a <code>stable</code> release. <p>There are no steps necessary to create an <code>unstable</code> release as that happens automatically whenever an untagged commit is pushed to <code>main</code>. However, the following workflow should be used when tagging a <code>staged</code> release candidate or <code>stable</code> release.</p> <ol> <li>Review outstanding issues &amp; pull requests</li> <li>Prepare release notes</li> <li>Commit &amp; pull request</li> <li>Tag the release</li> </ol>"},{"location":"dev-guide/release-process/#review-issues-pull-requests","title":"Review Issues &amp; Pull Requests","text":"<p>The first step to a release is to review the outstanding issues and pull requests that are tagged for the release in question.</p> <p>If there are outstanding issues requiring changes or pending pull requests to be merged, handle those prior to tagging any commit as a release candidate or release.</p> <p>It is highly recommended that pull requests be merged synchronously after rebasing each subsequent one off of the new tip of <code>main</code>. Remember, while GitHub will update a pull request as in conflict if a change to <code>main</code> results in a merge conflict with the pull request, GitHub will not force a new build to spawn unless the pull request is actually updated.</p> <p>At the very minimum a pull request's build should be re-executed prior to the pull request being merged if <code>main</code> has changed since the pull request was opened.</p>"},{"location":"dev-guide/release-process/#prepare-release-notes","title":"Prepare Release Notes","text":"<p>Update the release notes at <code>.docs/about/release-notes.md</code>. This file is the project's authoritative changelog and should reflect new features, fixes, and any significant changes.</p> <p>The most recent, <code>stable</code> version of the release notes are always available online at VM Operator's documentation site.</p>"},{"location":"dev-guide/release-process/#commit-pull-request","title":"Commit &amp; Pull Request","text":"<p>Once all outstanding issues and pull requests are handled, the release notes are updated, it's time to create a commit.</p> <p>Please make sure that the changes to the release notes and version files are a part of the same commit. This makes identifying the aspects of a release, staged or otherwise, far easier for future developers.</p> <p>A release's commit message can either be a reflection of the release notes or something simple. Either way the commit message should have the following subject format and first line in its body:</p> <pre><code>Release Candidate 0.3.1-rc1\n\nThis patch marks release candidate 0.3.1-rc1.\n</code></pre> <p>If the commit message is longer it should simply reflect the same information from the release notes.</p> <p>Once committed push the change to a fork and open a pull request. Even though this commit marks a staged or official release, the pull request system is still used to assure that the build completes successfully and there are no unforeseen errors.</p>"},{"location":"dev-guide/release-process/#tag-the-release","title":"Tag the Release","text":"<p>Once the pull request marking the <code>staged</code> or <code>stable</code> release has been merged into <code>upstream</code>'s <code>main</code> it's time to tag the release.</p>"},{"location":"dev-guide/release-process/#tag-format","title":"Tag Format","text":"<p>The release tag should follow a prescribed format depending upon the release type:</p> Release Type Tag Format Example <code>staged</code> vMAJOR.MINOR.PATCH-rc[0-9] v0.3.1-rc1 <code>stable</code> vMAJOR.MINOR.PATCH v0.3.1"},{"location":"dev-guide/release-process/#tag-methods","title":"Tag Methods","text":"<p>There are two ways to tag a release:</p> <ol> <li>GitHub Releases</li> <li>Command Line</li> </ol>"},{"location":"dev-guide/release-process/#command-line","title":"Command Line","text":"<p>If tagging a release via the command line be sure to fetch the latest changes from <code>upstream</code>'s <code>main</code> and either merge them into your local copy of <code>main</code> or reset the local copy to reflect <code>upstream</code> prior to creating any tags.</p> <p>The following combination of commands can be used to create a tag for 0.3.1 Release Candidate 1:</p> <pre><code>git fetch upstream &amp;&amp; \\\n  git checkout main &amp;&amp; \\\n  git reset --hard upstream/main &amp;&amp; \\\n  git tag -a -m v0.3.1-rc1 v0.3.1-rc1\n</code></pre> <p>The above example combines a few operations:</p> <ol> <li>The first command fetches the <code>upstream</code> changes</li> <li>The local <code>main</code> branch is checked out</li> <li>The local <code>main</code> branch is hard reset to <code>upstream/main</code></li> <li>An annotated tag is created on <code>main</code> for <code>v0.3.1-rc1</code>, or 0.3.1 Release Candidate 1, with a tag message of <code>v0.3.1-rc1</code>.</li> </ol> <p>Please note that the third step will erase any changes that exist only in the local <code>main</code> branch that do not also exist in the remote, upstream copy. However, if the two branches are not equal this method should not be used to create a tag anyway.</p> <p>The above steps do not actually push the tag upstream. This is to allow for one final review of all the changes before doing so since the appearance of a new, annotated tag in the repository will cause the project's build system to automatically kick off a build that will result in the release of a <code>staged</code> or <code>stable</code> release. For <code>stable</code> releases the project's documentation will also be updated.</p> <p>Once positive everything looks good simply execute the following command to push the tag to the <code>upstream</code> repository:</p> <pre><code>git push upstream v0.3.1-rc1\n</code></pre>"},{"location":"user-guide/bootstrap/","title":"Bootstrap Providers","text":"<p>Be our guest, be our guest...</p>"},{"location":"user-guide/bootstrap/#overview","title":"Overview","text":"<p>There are a number of methods that may be used to bootstrap a virtual machine's (VM) guest operating system:</p> Provider Supported Network Config Linux Windows Description Cloud-Init \u2713 Cloud-Init Network v2 \u2713 \u2713 The industry standard, multi-distro method for cross-platform, cloud instance initialization with modern, VM images vAppConfig \u2713 Bespoke \u2713 For images with bespoke, bootstrap engines driven by vAppConfig properties OvfEnv deprecated Guest OS Customization (GOSC) \u2713 A combination of GOSC and Cloud-Init user-data ExtraConfig deprecated GOSC \u2713 For images with bespoke, bootstrap engines that rely on Guest Info data <p><code>ConfigMap</code> or <code>Secret</code></p> <p>When VM Operator was first released, the only way to store bootstrap data was via a <code>ConfigMap</code> resource. While this still works, it is not recommended as data stored in a <code>ConfigMap</code> is not encrypted at rest. Instead, it is recommended users switch to using <code>Secret</code> resources for storing bootstrap data.</p> <p>Please note that the choice of a <code>ConfigMap</code> or <code>Secret</code> in no way impacts the choice of the bootstrap provider. The two resources fulfill the same obligation -- they are simply a way to store the bootstrap data.</p>"},{"location":"user-guide/bootstrap/#cloud-init","title":"Cloud-Init","text":"<p>Cloud-Init is widely recognized as the de facto method for bootstrapping modern VM instances on hyperscalers, including Tanzu with VM Operator. For example, the following YAML provisions a new VM, using Cloud-Init to:</p> <ul> <li>add a custom user</li> <li>execute commands on boot</li> <li>write files</li> </ul> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name:      my-vm\n  namespace: my-namespace\nspec:\n  className:    small\n  imageName:    ubuntu-2210\n  storageClass: iscsi\n  vmMetadata:\n    transport: CloudInit\n    secretName: my-vm-bootstrap-data\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name:      my-vm-bootstrap-data\n  namespace: my-namespace\nstringData:\n  user-data: |\n    #cloud-config\n    users:\n    - default\n    - name: akutz\n      primary_group: akutz\n      groups: users\n      ssh_authorized_keys:\n      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSL7uWGj...\n    runcmd:\n    - \"ls /\"\n    - [ \"ls\", \"-a\", \"-l\", \"/\" ]\n    write_files:\n    - path: /etc/my-plaintext\n      permissions: '0644'\n      owner: root:root\n      content: |\n        Hello, world.\n</code></pre> <p>The data in the above <code>Secret</code> is called the Cloud-Init Cloud Config. For more information on the Cloud-Init Cloud Config format, please see its official documentation.</p> <p>Windows and Cloud-Init</p> <p>It is possible to use the Cloud-Init bootstrap provider to deploy a Windows image if it contains Cloudbase-Init, the Windows port of Cloud-Init.</p>"},{"location":"user-guide/bootstrap/#vappconfig","title":"vAppConfig","text":"<p>The vAppConfig bootstrap method is useful for legacy, VM images that rely on bespoke, boot-time processes that leverage vAppConfig properties for customizing a guest.</p>"},{"location":"user-guide/bootstrap/#deprecated","title":"Deprecated","text":"<p>The following bootstrap providers are still available, but they are deprecated and are not recommended.</p>"},{"location":"user-guide/bootstrap/#ovfenv","title":"OvfEnv","text":"<p>The <code>OvfEnv</code> method is no longer recommended. It relied on a combination of VMware's Guest OS Customization (GOSC) APIs for bootstrapping the guest's network and the Cloud-Init OVF data source for supplying a Cloud-Init Cloud Config. As a result of mixing bootstrap engines (GOSC and Cloud-Init), there was a race condition that meant any image that used <code>OvfEnv</code> needed to have a special fix applied. This provider is no longer supported and will be removed in v1alpha2. Any consumers still relying on this provider should switch to Cloud-Init.</p>"},{"location":"user-guide/bootstrap/#extraconfig","title":"ExtraConfig","text":"<p>When Tanzu Kubernetes was first released, the Cluster API provider that depended upon VM Operator used the <code>ExtraConfig</code> provider for supplying bootstrap information. This method was never intended for wide use, and Tanzu now uses Cloud-Init anyway. To that end, this provider is no longer supported and will be removed in v1alpha2. Any consumers still relying on this provider should switch to Cloud-Init.</p>"},{"location":"user-guide/platforms/","title":"Platforms","text":"<p>Home is where VM Operator is...</p> <p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/troubleshooting/","title":"Troubleshooting","text":"<p>It's not doing what I expected...</p>"},{"location":"user-guide/help/troubleshooting/#solving-problems","title":"Solving problems","text":"<p>This section details the usual places and methods to look and use when investigating a problem.</p>"},{"location":"user-guide/help/troubleshooting/#is-vm-operator-running","title":"Is VM Operator running?","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/troubleshooting/#are-vms-being-reconciled","title":"Are VMs being reconciled?","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/troubleshooting/#is-the-platform-healthy","title":"Is the platform healthy?","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/troubleshooting/#common-errors","title":"Common Errors","text":"<p>This section reviews common errors encountered when using VM Operator.</p>"},{"location":"user-guide/help/troubleshooting/#invalid-yaml","title":"Invalid YAML","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/troubleshooting/#bootstrap-issue","title":"Bootstrap issue","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/usage/","title":"Usage","text":"<p>Report status, Initiate awesome...</p>"},{"location":"user-guide/help/usage/#overview","title":"Overview","text":"<p>This page reviews how to use the Kubernetes CLI to interact with VM Operator:</p> <pre><code>kubectl\n</code></pre>"},{"location":"user-guide/help/usage/#getting-help","title":"Getting Help","text":"<p>To print the online help for VM Operator APIs, use the following command:</p> <pre><code>kubectl explain &lt;API&gt;.vmoperator.vmware.com\n</code></pre>"},{"location":"user-guide/help/usage/#examples","title":"Examples","text":"<p>This section illustrates several, common examples for using the Kubernetes CLI:</p>"},{"location":"user-guide/help/usage/#print-the-vm-operator-version","title":"Print the VM Operator version","text":"<p>This example shows how to print VM Operator's version:</p> <p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/usage/#restart-vm-operator","title":"Restart VM Operator","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/usage/#list-all-vms-across-all-namespaces","title":"List all VMs across all namespaces","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/usage/#create-a-vm-on-supervisor","title":"Create a VM on Supervisor","text":"<p>Let's deploy a VM with VM Operator on vSphere Supervisor:</p> <p>note</p> <p>The example below assumes:</p> <ul> <li>an available <code>VirtualMachineClass</code> named <code>small</code></li> <li>an available <code>VirtualMachineImage</code> named <code>ubuntu-22.10</code></li> <li>an available <code>StorageClass</code> named <code>iscsi</code></li> <li>the user has <code>Editor</code> permissions on the namespace <code>my-namespace</code></li> </ul> <pre><code>cat &lt;&lt;EOF | kubectl apply -f\n# TODO(akutz)\nEOF\n</code></pre>"},{"location":"user-guide/help/usage/#attach-a-persistentvolume","title":"Attach a PersistentVolume","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/help/usage/#detach-a-persistentvolume","title":"Detach a PersistentVolume","text":"<p><code>// TODO(akutz)</code></p>"},{"location":"user-guide/platforms/supervisor/","title":"Supervisor","text":"<p>Out-of-the-box Kubernetes!</p> <p><code>// TODO(akutz)</code></p>"}]}