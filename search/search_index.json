{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#vm-operator","title":"VM Operator","text":"<p>Self-service management of virtual machines (VM) via Kubernetes.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>The Concepts section helps you learn about the parts of VM Operator that are managed by administrators, those which you can directly influence, and helps you obtain a deeper understanding of how VM Operator works.</p> <ul> <li> <p>Workloads</p> <p>Virtual machines (VM) on Kubernetes</p> </li> <li> <p>Images</p> <p>The images from which VMs are deployed</p> </li> <li> <p>Services &amp; Networking</p> <p>Concepts related to using Services with VM's and VM networking</p> </li> </ul>"},{"location":"concepts/api/","title":"API","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#104)</p>"},{"location":"concepts/components/","title":"Components","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#103)</p>"},{"location":"concepts/images/","title":"Images","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#108)</p>"},{"location":"concepts/images/pub-vm-image/","title":"Publish Virtual Machine Image","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#110)</p>"},{"location":"concepts/images/vm-image/","title":"VirtualMachineImage","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#109)</p>"},{"location":"concepts/images/vm-image/#image-scope","title":"Image Scope","text":"<p>There are two types of VM image resources, the <code>ClusterVirtualMachineImage</code> and <code>VirtualMachineImage</code>. The former is a cluster-scoped resource, while the latter is a namespace-scoped resource. Other than that, the two resources are exactly the same.</p>"},{"location":"concepts/images/vm-image/#image-names","title":"Image Names","text":"<p>Prior to vSphere 8.0U2, the name of a VM image resource was derived from the name of a Content Library item. For example, if a Content Library item was named <code>photonos-5-x64</code>, then its corresponding  <code>VirtualMachineImage</code> resource would also be named <code>photonos-5-x64</code>. This caused a problem if there library items with the same name from different libraries. With the exception of the first library item encountered, all subsequent library items would have randomly generated data appended to their corresponding Kubernetes resource names to ensure they were unique. In vSphere 8.0U2+, with the introduction of the Image Registry API and potential for global image catalogs, image names needed to be both unique and deterministic, hence:</p> <pre><code>vmi-0123456789ABCDEFG\n</code></pre> <p>The above value is referred to as a VMI ID, where VMI stands for Virtual Machine Image. No matter the source of a VM image, all images have unique, predictable VMI IDs. If the source of a VM image is Content Library, then the VMI ID is constructed using the following steps:</p> <ol> <li>Remove any <code>-</code> characters from the Content Library item's UUID</li> <li>Calculate the sha1sum of the value from the previous step</li> <li>Take the first 17 characters from the value from the previous step</li> <li>Append the value from the previous step to <code>vmi-</code></li> </ol> <p>For example, if the Content Library item's UUID is <code>e1968c25-dd84-4506-8dc7-9beacb6b688e</code>, then the VMI ID is <code>vmi-0a0044d7c690bcbea</code>, for example:</p> <ol> <li>Remove any <code>-</code> characters: <code>e1968c25dd8445068dc79beacb6b688e</code>.</li> <li>Get the sha1sum: <code>0a0044d7c690bcbea07c9b49efc9f743479490e5</code>.</li> <li>First 17 characters: <code>0a0044d7c690bcbea</code>.</li> <li>Create the VMI ID: <code>vmi-0a0044d7c690bcbea</code>.</li> </ol>"},{"location":"concepts/images/vm-image/#name-resolution","title":"Name Resolution","text":"<p>When a <code>VirtualMachine</code> resource's field <code>spec.imageName</code> is set to a VMI ID, the value is resolved to the <code>VirtualMachineImage</code> or <code>ClusterVirtualMachineImage</code> with that name. It is also possible to specify images based on their display name.</p> <p>Display name resolution</p> <p>Please note that while resolving VM images based on their display name was merged into VM Operator with github.com/vmware-tanzu/vm-operator#214, the feature is not yet part of a shipping vSphere release.</p> <p>For example, if <code>vmi-0a0044d7c690bcbea</code> refers to an image with a display name of <code>photonos-5-x64</code>, then a user could also specify that value for <code>spec.imageName</code> as long as the following is true:</p> <ul> <li>There is no other <code>VirtualMachineImage</code> in the same namespace with that display name.</li> <li>There is no other <code>ClusterVirtualMachineImage</code> with the same display name.</li> </ul> <p>If the display name unambiguously resolves to the distinct, VM image <code>vmi-0a0044d7c690bcbea</code>, then a mutation webhook replaces <code>spec.imageName: photonos-5-x64</code> with <code>spec.imageName: vmi-0a0044d7c690bcbea</code>. If the display name resolves to multiple or no VM images, then the mutation webhook denies the request and outputs an error message accordingly.</p>"},{"location":"concepts/images/vm-image/#recommended-images","title":"Recommended Images","text":"<p>There are no restrictions on the images that can be deployed by VM Operator. However, for users wanting to try things out for themselves, here are a few images the project's developers use on a daily basis:</p> Image Arch Download  Photon OS 4, Rev 2 amd64 OVA   Photon OS 3, Rev 3, Update 1 amd64 OVA   Ubuntu 22.10 Server (Kinetic Kudo) amd64 OVA   Ubuntu 22.04 Server (Jammy Jellyfish) amd64 OVA  <p>Bring your own image...</p> <p>The above list is by no means exhaustive or restrictive -- we want users to bring their own images!</p>"},{"location":"concepts/services-networking/","title":"Services &amp; Networking","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#111)</p>"},{"location":"concepts/services-networking/guest-net-config/","title":"Guest Networking Configuration","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#113)</p>"},{"location":"concepts/services-networking/vm-service/","title":"VirtualMachineService","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#112)</p>"},{"location":"concepts/workloads/","title":"Workloads","text":"<p>A workload is an application running on Kubernetes. Whether your workload is a single component or several that work together, on Kubernetes you run it inside a set of VirtualMachines. In Kubernetes, a <code>VirtualMachine</code> represents a Virtual Machine running on an underlying, VMware hypervisor, such as vSphere.</p> <p>VM Operator virtual machines (VM) have a defined lifecycle. For example, on vSphere Supervisor, VMs are scheduled on nodes that are represent underlying ESXi hosts. Once a VM is scheduled and running on a node, a critical fault on the node where that VM is running does not necessarily cause the VMs scheduled on that node to fail. If the underlying platform is vSphere, for example, the VMs on that node will be vMotioned to other, compatible nodes in the Supervisor. </p>"},{"location":"concepts/workloads/#whats-next","title":"What's Next","text":"<p>This section provides information about workload resources, such as:</p> <ul> <li><code>VirualMachine</code></li> <li><code>VirualMachineClass</code></li> <li><code>WebConsoleRequest</code></li> </ul> <p>In addition to the workload resources themselves, there is documentation related to broader topics related to workloads:</p> <ul> <li>Customizing a Guest</li> </ul>"},{"location":"concepts/workloads/guest/","title":"Customizing a Guest","text":"<p>The ability to deploy a virtual machine with Kubernetes is nice, but one of the values of VM Operator is its support for popular bootstrap providers such as Cloud-Init, Sysprep, and vAppConfig. This page reviews these bootstrap providers to help inform when to select one over the other.</p>"},{"location":"concepts/workloads/guest/#bootstrap-providers","title":"Bootstrap Providers","text":"<p>There are a number of methods that may be used to bootstrap a virtual machine's (VM) guest operating system:</p> Provider Supported Network Config Linux Windows Description Cloud-Init \u2713 Cloud-Init Network v2 \u2713 \u2713 The industry standard, multi-distro method for cross-platform, cloud instance initialization with modern, VM images Sysprep \u2713 Guest OS Customization (GOSC) \u2713 Microsoft Sysprep is used by VMware to customize Windows images on first-boot vAppConfig \u2713 Bespoke \u2713 For images with bespoke, bootstrap engines driven by vAppConfig properties OvfEnv deprecated Guest OS Customization (GOSC) \u2713 A combination of GOSC and Cloud-Init user-data ExtraConfig deprecated GOSC \u2713 For images with bespoke, bootstrap engines that rely on Guest Info data <p><code>ConfigMap</code> or <code>Secret</code></p> <p>The choice of a <code>ConfigMap</code> or <code>Secret</code> resource in no way impacts the choice or behavior of the selected bootstrap provider. When VM Operator was first released, the only way to store bootstrap data was via a <code>ConfigMap</code> resource. While this still works, it is not recommended as data stored in a <code>ConfigMap</code> is not encrypted at rest. Instead, it is recommended users switch to using <code>Secret</code> resources for storing bootstrap data. Aside from how the data is stored in etcd, the following two resources are effectively identical and serve the same purpose:</p> CloudConfig in a ConfigMapCloudConfig in a Secret <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\ndata:\nuser-data: |\n#cloud-config\nusers:\n- default\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\nstringData:\nuser-data: |\n#cloud-config\nusers:\n- default\n</code></pre>"},{"location":"concepts/workloads/guest/#supported","title":"Supported","text":""},{"location":"concepts/workloads/guest/#cloud-init","title":"Cloud-Init","text":"<p>Cloud-Init is widely recognized as the de facto method for bootstrapping modern VM instances on hyperscalers, including Tanzu with VM Operator. For example, the following resources may be used to deploy a VM and bootstrap its guest with Cloud-Init to:</p> <ul> <li>add a custom user</li> <li>execute commands on boot</li> <li>write files</li> </ul> VirtualMachineCloudConfig <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    ubuntu-2210\nstorageClass: iscsi\nvmMetadata:\ntransport: CloudInit\nsecretName: my-vm-bootstrap-data\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\nstringData:\nuser-data: |\n#cloud-config\nusers:\n- default\n- name: akutz\nprimary_group: akutz\ngroups: users\nssh_authorized_keys:\n- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSL7uWGj...\nruncmd:\n- \"ls /\"\n- [ \"ls\", \"-a\", \"-l\", \"/\" ]\nwrite_files:\n- path: /etc/my-plaintext\npermissions: '0644'\nowner: root:root\ncontent: |\nHello, world.\n</code></pre> <p>The data in the above <code>Secret</code> is called the Cloud-Init Cloud Config. For more information on the Cloud-Init Cloud Config format, please see its official documentation.</p> <p>Windows and Cloud-Init</p> <p>It is possible to use the Cloud-Init bootstrap provider to deploy a Windows image if it contains Cloudbase-Init, the Windows port of Cloud-Init.</p>"},{"location":"concepts/workloads/guest/#sysprep","title":"Sysprep","text":"<p>Microsoft originally designed Sysprep as a means to prepare a deployed system for use as a template. It was such a useful tool, that VMware utilized it as the means to customize a VM with a Windows guest.</p> <p>Sysprep State</p> <p>Deploying Windows images that have not completed their previous Sysprep operation could cause the Guest OS customization to fail. Therefore, it is important to ensure that the image is sealed correctly and in a clean state when using Sysprep. For more information on this issue, please refer to this article.</p>"},{"location":"concepts/workloads/guest/#minimal-config","title":"Minimal Config","text":"<p>The following YAML may be used to bootstrap a Windows image with minimal information. For proper network configuration and Guest OS Customization (GOSC) completion, Sysprep unattend data requires a template for providing network info and <code>RunSynchronousCommand</code> to record GOSC status. Both components are essential for Windows Vista and later versions.</p> <p>Product Key</p> <p>Please note the image would have to be using a Volume License SKU as the product ID is not provided in the following Sysprep configuration. See the \"Activate Windows\" section below for more information.</p> VirtualMachineSysprepConfig <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    windows11\nstorageClass: iscsi\nvmMetadata:\ntransport: Sysprep\nsecretName: my-vm-bootstrap-data\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-vm-bootstrap-data\nnamespace: my-ns\nstringData:\nunattend: |\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;unattend xmlns=\"urn:schemas-microsoft-com:unattend\"&gt;\n&lt;settings pass=\"specialize\"&gt;\n&lt;component name=\"Microsoft-Windows-TCPIP\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;Interfaces&gt;\n&lt;Interface wcm:action=\"add\"&gt;\n&lt;Ipv4Settings&gt;\n&lt;DhcpEnabled&gt;false&lt;/DhcpEnabled&gt;\n&lt;/Ipv4Settings&gt;\n&lt;Ipv6Settings&gt;\n&lt;DhcpEnabled&gt;false&lt;/DhcpEnabled&gt;\n&lt;/Ipv6Settings&gt;\n&lt;Identifier&gt;{{ V1alpha1_FirstNicMacAddr }}&lt;/Identifier&gt;\n&lt;UnicastIpAddresses&gt;\n&lt;IpAddress wcm:action=\"add\" wcm:keyValue=\"1\"&gt;{{ V1alpha1_FirstIP }}&lt;/IpAddress&gt;\n&lt;/UnicastIpAddresses&gt;\n&lt;Routes&gt;\n&lt;Route wcm:action=\"add\"&gt;\n&lt;Identifier&gt;0&lt;/Identifier&gt;\n&lt;Metric&gt;10&lt;/Metric&gt;\n&lt;NextHopAddress&gt;{{ (index .V1alpha1.Net.Devices 0).Gateway4 }}&lt;/NextHopAddress&gt;\n&lt;Prefix&gt;{{ V1alpha1_SubnetMask V1alpha1_FirstIP }}&lt;/Prefix&gt;\n&lt;/Route&gt;\n&lt;/Routes&gt;\n&lt;/Interface&gt;\n&lt;/Interfaces&gt;\n&lt;/component&gt;\n&lt;component name=\"Microsoft-Windows-DNS-Client\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;Interfaces&gt;\n&lt;Interface wcm:action=\"add\"&gt;\n&lt;Identifier&gt;{{ V1alpha1_FirstNicMacAddr }}&lt;/Identifier&gt;\n&lt;DNSServerSearchOrder&gt; {{ range .V1alpha1.Net.Nameservers }} &lt;IpAddress\nwcm:action=\"add\"\nwcm:keyValue=\"{{.}}\"&gt;&lt;/IpAddress&gt; {{ end }} &lt;/DNSServerSearchOrder&gt;\n&lt;/Interface&gt;\n&lt;/Interfaces&gt;\n&lt;/component&gt;\n&lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;RunSynchronous&gt;\n&lt;RunSynchronousCommand wcm:action=\"add\"&gt;\n&lt;Path&gt;C:\\sysprep\\guestcustutil.exe restoreMountedDevices&lt;/Path&gt;\n&lt;Order&gt;1&lt;/Order&gt;\n&lt;/RunSynchronousCommand&gt;\n&lt;RunSynchronousCommand wcm:action=\"add\"&gt;\n&lt;Path&gt;C:\\sysprep\\guestcustutil.exe flagComplete&lt;/Path&gt;\n&lt;Order&gt;2&lt;/Order&gt;\n&lt;/RunSynchronousCommand&gt;\n&lt;RunSynchronousCommand wcm:action=\"add\"&gt;\n&lt;Path&gt;C:\\sysprep\\guestcustutil.exe deleteContainingFolder&lt;/Path&gt;\n&lt;Order&gt;3&lt;/Order&gt;\n&lt;/RunSynchronousCommand&gt;\n&lt;/RunSynchronous&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n&lt;/unattend&gt;\n</code></pre>"},{"location":"concepts/workloads/guest/#activate-windows","title":"Activate Windows","text":"<p>The following XML can be used to supply a product key to activate Windows:</p> <pre><code>&lt;settings pass=\"windowsPE\"&gt;\n&lt;component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;UserData&gt;\n&lt;AcceptEula&gt;true&lt;/AcceptEula&gt;\n&lt;FullName&gt;akutz&lt;/FullName&gt;\n&lt;Organization&gt;VMware&lt;/Organization&gt;\n&lt;ProductKey&gt;\n&lt;Key&gt;1234-5678-9abc-defg&lt;/Key&gt;\n&lt;WillShowUI&gt;Never&lt;/WillShowUI&gt;\n&lt;/ProductKey&gt;\n&lt;/UserData&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n</code></pre>"},{"location":"concepts/workloads/guest/#user-accounts","title":"User Accounts","text":"<p>The following XML can be used to update Administrator password and create a new local user account:</p> <pre><code>&lt;settings pass=\"oobeSystem\"&gt;\n&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;UserAccounts&gt;\n&lt;AdministratorPassword&gt;\n&lt;Value&gt;FakePassword&lt;/Value&gt;\n&lt;PlainText&gt;true&lt;/PlainText&gt;\n&lt;/AdministratorPassword&gt;\n&lt;LocalAccounts&gt;\n&lt;LocalAccount wcm:action=\"add\"&gt;\n&lt;Name&gt;sdiliyaer&lt;/Name&gt;\n&lt;Password&gt;\n&lt;Value&gt;vmware&lt;/Value&gt;\n&lt;PlainText&gt;true&lt;/PlainText&gt;\n&lt;/Password&gt;\n&lt;Group&gt;Administrators&lt;/Group&gt;\n&lt;DisplayName&gt;sdiliyaer&lt;/DisplayName&gt;\n&lt;Description&gt;Local administrator account&lt;/Description&gt;\n&lt;/LocalAccount&gt;\n&lt;/LocalAccounts&gt;\n&lt;/UserAccounts&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n</code></pre>"},{"location":"concepts/workloads/guest/#automate-oobe","title":"Automate OOBE","text":"<p>The following XML can be used to prevent appearing the Windows OOBE screen:</p> <pre><code>&lt;settings pass=\"oobeSystem\"&gt;\n&lt;component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;InputLocale&gt;0409:00000409&lt;/InputLocale&gt;\n&lt;SystemLocale&gt;en-US&lt;/SystemLocale&gt;\n&lt;UserLocale&gt;en-US&lt;/UserLocale&gt;\n&lt;UILanguage&gt;en-US&lt;/UILanguage&gt;\n&lt;/component&gt;\n&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;OOBE&gt;\n&lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;\n&lt;HideLocalAccountScreen&gt;true&lt;/HideLocalAccountScreen&gt;\n&lt;HideOEMRegistrationScreen&gt;true&lt;/HideOEMRegistrationScreen&gt;\n&lt;HideOnlineAccountScreens&gt;true&lt;/HideOnlineAccountScreens&gt;\n&lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;\n&lt;ProtectYourPC&gt;3&lt;/ProtectYourPC&gt;\n&lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;\n&lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;\n&lt;/OOBE&gt;\n&lt;TimeZone&gt;Central Standard Time&lt;/TimeZone&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n</code></pre> <p>For more information on Sysprep, please refer to Microsoft's official documentation.</p>"},{"location":"concepts/workloads/guest/#vappconfig","title":"vAppConfig","text":"<p>The vAppConfig bootstrap method is useful for legacy, VM images that rely on bespoke, boot-time processes that leverage vAppConfig properties for customizing a guest.</p> <p>To illustrate, the following YAML can be utilized to deploy a VirtualMachine and bootstrap OVF properties that define the network information:</p> VirtualMachinevAppConfigvAppConfig with templated data <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    my-vm-image\nstorageClass: my-storage-class\nvmMetadata:\ntransport: vAppConfig\nsecretName: my-vm-bootstrap-template\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-vm-bootstrap-template\nnamespace: my-namespace\nstringData:\nnameservers: \"{{ (index .V1alpha1.Net.Nameservers 0) }}\"\nhostname: \"{{ .V1alpha1.VM.Name }} \"\nmanagement_ip: \"{{ (index (index .V1alpha1.Net.Devices 0).IPAddresses 0) }}\"\nmanagement_gateway: \"{{ (index .V1alpha1.Net.Devices 0).Gateway4 }}\"\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-secret\nnamespace: test-ns\nstringData:\nnameservers: \"{{ V1alpha1_FormatNameservers 2 \\\",\\\" }}\"\nmanagement_ip: \"{{ V1alpha1_FormatIP \\\"192.168.1.10\\\" \\\"255.255.255.0\\\" }}\"\nhostname: \"{{ .V1alpha1.VM.Name }} \"  management_gateway: \"{{ (index .V1alpha1.Net.Devices 0).Gateway4 }}\"\n</code></pre> <p>For more information on vAppConfig, please refer to this tutorial.</p>"},{"location":"concepts/workloads/guest/#deprecated","title":"Deprecated","text":"<p>The following bootstrap providers are still available, but they are deprecated and are not recommended.</p>"},{"location":"concepts/workloads/guest/#ovfenv","title":"OvfEnv","text":"<p>The <code>OvfEnv</code> method combines VMware's Guest OS Customization (GOSC) for bootstrapping a guest's network and the Cloud-Init, OVF data source to supply a Cloud-Init Cloud Config.</p> <p>Deprecation Notice</p> <p>The <code>OvfEnv</code> transport has been deprecated in favor of the <code>CloudInit</code> provider. Apart from the reasons outlined in the Cloud-Init section on why one would want to use Cloud-Init, the <code>OvfEnv</code> provider's reliance on the GOSC APIs for bootstrapping the guest's network and Cloud-Init for additional customizations resulted in a race condition. VMware Tools would reboot the guest to satisfy the GOSC network configuration while Cloud-Init was still running. Thus any image that used <code>OvfEnv</code> needed to have a special fix applied to prevent Cloud-Init from running on first-boot. This method is removed in v1alpha2, and any consumers still relying on this provider should switch to Cloud-Init.</p> <p>The following resources may be used to deploy a VM and bootstrap the guest's network with GOSC and then leverage Cloud-Init to:</p> <ul> <li>add a custom user</li> <li>execute commands on boot</li> <li>write files</li> </ul> VirtualMachineCloudConfig <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    ubuntu-2210\nstorageClass: iscsi\nvmMetadata:\ntransport: OvfEnv\nconfigMapName: my-vm-bootstrap-data\n</code></pre> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\ndata:\nuser-data: I2Nsb3VkLWNvbmZpZwp1c2VyczoKLSBkZWZhdWx0Ci0gbmFtZTogYWt1dHoKICBwcmltYXJ5X2dyb3VwOiBha3V0egogIGdyb3VwczogdXNlcnMKICBzc2hfYXV0aG9yaXplZF9rZXlzOgogIC0gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFEU0w3dVdHai4uLgpydW5jbWQ6Ci0gImxzIC8iCi0gWyAibHMiLCAiLWEiLCAiLWwiLCAiLyIgXQp3cml0ZV9maWxlczoKLSBwYXRoOiAvZXRjL215LXBsYWludGV4dAogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBvd25lcjogcm9vdDpyb290CiAgY29udGVudDogfAogICAgSGVsbG8sIHdvcmxkLg==\n</code></pre> <p>Base64 Encoded User Data</p> <p>Unlike the <code>CloudInit</code> transport which accepts user data as either plain-text or base64-encoded, the <code>OvfEnv</code> provider requires the base64-encoding. The base64-encoded value above decodes to:</p> <pre><code>#cloud-config\nusers:\n- default\n- name: akutz\nprimary_group: akutz\ngroups: users\nssh_authorized_keys:\n- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSL7uWGj...\nruncmd:\n- \"ls /\"\n- [ \"ls\", \"-a\", \"-l\", \"/\" ]\nwrite_files:\n- path: /etc/my-plaintext\npermissions: '0644'\nowner: root:root\ncontent: |\nHello, world.\n</code></pre>"},{"location":"concepts/workloads/guest/#extraconfig","title":"ExtraConfig","text":"<p>The <code>ExtraConfig</code> provider combined VMware's Guest OS Customization (GOSC) for bootstrapping a guest's network allowed clients to set any <code>guestinfo</code> key they wanted in order to influence a guest's bootstrap engine.</p> <p>Deprecation Notice</p> <p>When Tanzu Kubernetes was first released, the Cluster API provider that depended upon VM Operator used the <code>ExtraConfig</code> provider for supplying bootstrap information. This method was never intended for wide use, and Tanzu now uses Cloud-Init anyway. To that end, this provider is no longer supported and will be removed in v1alpha2. Any consumers still relying on this provider should switch to Cloud-Init.</p>"},{"location":"concepts/workloads/vm-class/","title":"VirtualMachineClass","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#95)</p> <p>VirtualMachineClasses (VM Class) represent a collection of virtual hardware that is used to realize a new VirtualMachine (VM).</p>"},{"location":"concepts/workloads/vm-class/#controllername","title":"ControllerName","text":"<p>The field <code>spec.controllerName</code> in a VM Class indicates the name of the controller responsible for reconciling <code>VirtualMachine</code> resources created from the VM Class. The value <code>vmoperator.vmware.com/vsphere</code> indicates the default <code>VirtualMachine</code> controller is used. VM Classes that do not have this field set or set to an empty value behave as if the field is set to the value returned from the environment variable <code>DEFAULT_VM_CLASS_CONTROLLER_NAME</code>. If this environment variable is empty, it defaults to <code>vmoperator.vmware.com/vsphere</code>.</p>"},{"location":"concepts/workloads/vm-web-console/","title":"WebConsoleRequest","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#106)</p>"},{"location":"concepts/workloads/vm/","title":"VirtualMachine","text":"<p>VirtualMachines (VM) represent a collection of virtual hardware combined with one or more virtual disk images that can be managed using a Kubernetes cluster, such as vSphere Supervisor, and are scheduled on a VMware hypervisor, such as vSphere.</p>"},{"location":"concepts/workloads/vm/#what-is-a-vm","title":"What is a VM?","text":"<p>VMware defines a VM as:</p> <p>a compute resource that uses software instead of a physical computer to run programs and deploy apps. One or more virtual \u201cguest\u201d machines run on a physical \u201chost\u201d machine. Each virtual machine runs its own operating system and functions separately from the other VMs, even when they are all running on the same host.</p> <p>The VM Operator <code>VirtualMachine</code> API enables the lifecycle-management of a VM on an underlying hypervisor. A VM resource's virtual hardware is derived from a <code>VirtualMachineClass</code> (VM Class) and a <code>VirtualMachineImage</code> (VM Image) supplies the VM's disk(s).</p>"},{"location":"concepts/workloads/vm/#using-vms","title":"Using VMs","text":"<p>The following is an example of a <code>VirtualMachine</code> resource that bootstraps a Photon OS image using Cloud-Init:</p> vm-example.yaml<pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: my-vm\nspec:\nimageName: photon4\nclassName: small\nstorageClass: iscsi\nvmMetadata:\ntransport: CloudInit\npowerState: poweredOn\n</code></pre> <p>Customizing a Guest</p> <p>Please see this section for more information on the available bootstrap providers tha may be used to bootstrap a guest's host name, network, and further customize the operating system.</p> <p>To create the VM shown above, run the following command (replacing <code>&lt;NAMESPACE&gt;</code> with the name of the <code>Namespace</code> in which to create the VM):</p> <pre><code>kubectl apply -n &lt;NAMESPACE&gt; -f https://raw.githubusercontent.com/vmware-tanzu/vm-operator/main/docs/concepts/workloads/vm-example.yaml\n</code></pre>"},{"location":"concepts/workloads/vm/#working-with-vms","title":"Working with VMs","text":"<p>When a VM gets created, it is scheduled to run on a <code>Node</code> in your cluster. Regardless where VM Operator is running, the <code>Node</code> represents an underlying hypervisor. For example, on vSphere Supervisor a <code>Node</code> represents an ESXi host.</p> <p>The VM remains on that <code>Node</code> until the VM resource is deleted or, if supported by the underlying platform, the VM is rescheduled on another <code>Node</code> via live-migration (ex. vMotion) due to an unexpected failure of planned maintenance resulting in a <code>Node</code>'s underlying hypervisor going offline. There may also be situations where a VM cannot be rescheduled with live-migration due to some hardware dependency. In these instances the VM is powered off and then is powered back onto a compatible <code>Node</code> if one is available. If no other <code>Nodes</code> can support the VM, its controller will continue to try powering on the VM until such time a compatible <code>Node</code> becomes available.</p> <p>The name of a VM must be a valid DNS subdomain value, but this can produce unexpected results for the VM's hostname. For best compatibility, the name should follow the more restrictive rules for a DNS label.</p>"},{"location":"concepts/workloads/vm/#vm-image","title":"VM Image","text":"<p>A VM's disk(s) are supplied by a VM Image, and thus its name must be specified when creating a new VM. The following commands may be used to discover the available VM Images:</p> Get available VM Images for a Namespace<pre><code>kubectl get -n &lt;NAMESPACE&gt; vmimage\n</code></pre> Get available VM Images for cluster<pre><code>kubectl get clustervmimage\n</code></pre> <p>For more information on VM Images, please see the documentation for <code>VirtualMachineImage</code>.</p>"},{"location":"concepts/workloads/vm/#vm-class","title":"VM Class","text":"<p>A VM's virtual hardware is derived from a VM Class, which is why the name of a VM Class is required when creating a VM. The VM Classes available in a given namespace may be discovered with:</p> <pre><code>kubectl get -n &lt;NAMESPACE&gt; vmclass\n</code></pre> <p>For more information on VM Classes, please see the documentation for <code>VirtualMachineClass</code>.</p>"},{"location":"concepts/workloads/vm/#storage-class","title":"Storage Class","text":"<p>A Storage Class defines a VM's storage policy and is required to create a new VM. Use the following command to discover a cluster's available storage classes:</p> <pre><code>kubectl get storageclass\n</code></pre> <p>For more information on Storage Classes, please see the documentation for <code>StorageClass</code>.</p>"},{"location":"concepts/workloads/vm/#updating-a-vm","title":"Updating a VM","text":"<p>It is possible to update parts of an existing <code>VirtualMachine</code> resource. Some fields are completely immutable while some can be modified depending on the VM's power state and whether or not the field has already been set to a non-empty value. The following table highlights what fields may or may not be updated and under what conditions:</p> Update Description While Powered On While Powered Off Not Already Set <code>spec.imageName</code> The name of the <code>VirtualMachineImage</code> that supplies the VM's disk(s) \u2717 \u2717 NA <code>spec.className</code> The name of the <code>VirtualMachineClass</code> that supplies the VM's virtual hardware \u2717 \u2717 NA <code>spec.powerState</code> The VM's desired power state \u2713 \u2713 NA <code>metadata.labels.topology.kubernetes.io/zone</code> The desired availability zone in which to schedule the VM \u2713 \u2713 \u2713"},{"location":"concepts/workloads/vm/#resources","title":"Resources","text":"<p>Some of a VM's hardware resources are derived from the policies defined by your infrastructure administrator, others may be influenced directly by a user.</p>"},{"location":"concepts/workloads/vm/#cpu-and-memory","title":"CPU and Memory","text":"<p>CPU and memory of a VM are derived form the <code>VirtualMachineClass</code> that is used to create the VM. Specifically, the <code>memoryMB</code> and <code>numCPUs</code> properties in the <code>configSpec</code> field of the <code>VirtualMachineClass</code> resource dictate the exact number of virtual CPUs, and the virtual memory that the VM will be created with.</p> <p>Additionally, your administrator might also define certain policies in your VM class in form of resource reservations or limits. These are vSphere constructs which are used to reserve, or set a ceiling on resources consumed by a VM. Users can view these policies by inspecting the <code>ConfigSpec.cpuAllocation</code> and <code>ConfigSpec.memoryAllocation</code> fields of the VM Class for CPU and memory reservation/limits information respectively.</p> <p>For an example, consider the following VM Class: <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachineClass\nmetadata:\n  name: my-vm-class\nspec:\n  configSpec:\n    _typeName: VirtualMachineConfigSpec\n    cpuAllocation:\n      _typeName: ResourceAllocationInfo\n      limit: 400\n      reservation: 200\n    memoryAllocation:\n      _typeName: ResourceAllocationInfo\n      limit: 2048\n      reservation: 1024\n  hardware:\n    cpus: 2\n    memory: 4Gi\n</code></pre> A VM created with this VM class will have 2 vCPUs, 4 GiB of memory. Additionally, the VM will be created with a guaranteed CPU bandwidth of 200MHz and 1024 MB of memory. The CPU bandwidth of the VM will never be allowed to exceed 400MHz and the memory will not exceed 2GB.</p> <p>Units for CPU reservations/limits are in MHz</p> <p>Please note that the units for CPU are different in hardware and reservations/limits.  Virtual hardware is specified in units of vCPUs, whereas CPU reservations/limits are in MHz.  Memory can be specified in MiB, GiB, whereas memory reservations/limits are always in MB.</p>"},{"location":"concepts/workloads/vm/#networking","title":"Networking","text":"<p>Users can optionally specify a list of network interfaces for their VM in the <code>spec.NetworkInterfaces</code> field. Each interface must specify the network type which can be either <code>nsx-t</code> or <code>vsphere-distributed</code>, depending on the network provider being used. Users can further customize each interface with optional fields such as the Ethernet card type, network name etc. If a VM does not specify any network interface, VM operator creates an interface that is connected to the default network available in the namespace. The IP address of the network interface is handled by the available network provider (configured by the administrator).</p>"},{"location":"concepts/workloads/vm/#how-are-a-vms-network-interfaces-configured","title":"How are a VM's Network Interfaces Configured?","text":"<p>VM operator uses the network devices specified in the VM Class to configure the network interfaces specified in the VM spec. If it cannot find sufficient number of devices in the VM class, a set of defaults are used to configure the network interfaces.</p> <p>As an example, consider the following VM Class that specifies two network devices, each with a different Ethernet card type.</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachineClass\nmetadata:\nname: class-with-two-nics\nspec:\nconfigSpec:\n_typeName: VirtualMachineConfigSpec\ndeviceChange:\n- _typeName: VirtualDeviceConfigSpec\ndevice:\n_typeName: VirtualE1000\nkey: -100\noperation: add\n- _typeName: VirtualDeviceConfigSpec\ndevice:\n_typeName: VirtualVmxnet3\nkey: -200\noperation: add\nhardware:\ncpus: 2\nmemory: 4Gi\n</code></pre> <p>If the following VM is created using the class defined above: <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: my-vm\nnamespace: my-namespace\nspec:\nclassName: class-with-two-nics\nimageName: ubuntu-kinetic\nnetworkInterfaces:\n- networkType: nsx-t\nethernetCardType: eth1000\n- networkType: nsx-t\netherNetCardType: vmxNet3\n- networkType: nsx-t\nethernetCardType: vmxnet2\n- networkType: nsx-t\npowerState: poweredOn\nstorageClass: wcpglobal-storage-profile\n</code></pre> The first two network interfaces of the VM are configured using the VM class. So, even though they specify a card type, they inherit the <code>VirtualE1000</code> and <code>VirtualVmxnet3</code> types respectively. The third interface is configured using the card type it specifies - <code>VirtualVmxnet2</code>. The fourth interface does not specify any type, so the default Ethernet card type of <code>VirtualVmxnet3</code> is used.</p>"},{"location":"concepts/workloads/vm/#storage","title":"Storage","text":"<p>A VM deployed using VM operator inherits the storage defined in the <code>VirtualMachineImage</code>.  However, developers can also provision and manage additional storage dynamically by leveraging PersistentVolumes. To do this, a user would create a PersistentVolumeClaim resource by picking a <code>StorageClass</code> associated with their namespace, along with other properties such as the disk size, mode etc. VM operator then dynamically provisions a first class disks which is exposed to the guest as a block volume. Users can start using the disk after formatting and mounting it at a mountpoint. VM operator also supports resizing these volumes to increase their size.</p>"},{"location":"concepts/workloads/vm/#power-states","title":"Power States","text":""},{"location":"concepts/workloads/vm/#on-off-suspend","title":"On, Off, &amp; Suspend","text":"<p>The field <code>spec.powerState</code> controls the power state of a VM and may be set to one of the following values:</p> Power State Description <code>poweredOn</code> Powers on a powered off VM or resumes a suspended VM <code>poweredOff</code> Powers off a powered on or suspended VM (controlled by <code>spec.powerOffMode</code>) <code>suspended</code> Suspends a powered on VM (controlled by <code>spec.suspendMode</code>)"},{"location":"concepts/workloads/vm/#restart","title":"Restart","text":"<p>It is possible to restart a powered on VM by setting <code>spec.nextRestartTime</code> to <code>now</code> (case-insensitive). A mutating webhook transforms <code>now</code> into an RFC3339Nano-formatted string. During the VM's reconciliation, the value of <code>spec.nextRestartTime</code> is compared to the last time the VM was restarted by VM Operator. If <code>spec.nextRestartTime</code> occurs after the last time a restart occurred, then the VM is restarted in accordance with <code>spec.restartMode</code>.</p> <p>Please note that it is not possible to schedule future restarts by assigning an explicit RFC3339Nano-formatted string to <code>spec.nextRestartTime</code>. The only valid values for <code>spec.nextRestartTime</code> are an empty string when creating a VM and <code>now</code> (case-insensitive) when updating/patching an existing VM.</p>"},{"location":"concepts/workloads/vm/#default-power-state-on-create","title":"Default Power State on Create","text":"<p>When updating a VM's power state, an empty string is not allowed -- the desired power state must be specified explicitly. However, on create, the VM's power state may be omitted. When this occurs, the power state defaults to <code>poweredOn</code>.</p>"},{"location":"concepts/workloads/vm/#transitions","title":"Transitions","text":"<p>Please note that there are supported power state transitions, and if a power state is requested that is not a supported transition, an error will be returned from a validating webhook.</p> Desired Power Operations Observed Power State Power On / Resume Power Off Suspend Restart <code>poweredOn</code> <code>NA</code> \u2713 \u2713 \u2713 <code>poweredOff</code> \u2713 <code>NA</code> \u2713if <code>spec.powerOffMode: hard</code> \u274c <code>suspended</code> \u2713 \u274c <code>NA</code> \u274c"},{"location":"concepts/workloads/vm/#power-op-mode","title":"Power Op Mode","text":"<p>The fields <code>spec.powerOffMode</code>, <code>spec.suspendMode</code>, and <code>spec.restartMode</code> control how a VM is powered off, suspended, and restarted:</p> <p>Default Power Op Mode</p> <p>Please note that the default power op mode is changing in v1alpha2 to <code>TrySoft</code>. This should not impact users still managing resources using v1alpha1.</p> Mode Description Default <code>hard</code> Halts, suspends, or restarts the VM with no interaction with the guest \u2713 <code>soft</code> The guest is shutdown, suspended, or restarted gracefully (requires VM Tools) <code>trySoft</code> Attempts a graceful shutdown/standby/restart if VM Tools is present, otherwise falls back to a hard operation the VM has not achieved the desired power state after five minutes."},{"location":"ref/","title":"Reference","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#114)</p>"},{"location":"ref/api/","title":"API","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#126)</p>"},{"location":"ref/api/v1alpha1/","title":"v1alpha1","text":"<p>Package v1alpha1 contains the VM Operator v1alpha1 APIs.</p>"},{"location":"ref/api/v1alpha1/#kinds","title":"Kinds","text":""},{"location":"ref/api/v1alpha1/#clustervirtualmachineimage","title":"ClusterVirtualMachineImage","text":"<p>ClusterVirtualMachineImage is the schema for the clustervirtualmachineimage API A ClusterVirtualMachineImage represents the desired specification and the observed status of a ClusterVirtualMachineImage instance.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ClusterVirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"ref/api/v1alpha1/#contentlibraryprovider","title":"ContentLibraryProvider","text":"<p>ContentLibraryProvider is the Schema for the contentlibraryproviders API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentLibraryProvider</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ContentLibraryProviderSpec <code>status</code> ContentLibraryProviderStatus"},{"location":"ref/api/v1alpha1/#contentsource","title":"ContentSource","text":"<p>ContentSource is the Schema for the contentsources API. A ContentSource represents the desired specification and the observed status of a ContentSource instance.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentSource</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ContentSourceSpec <code>status</code> ContentSourceStatus"},{"location":"ref/api/v1alpha1/#contentsourcebinding","title":"ContentSourceBinding","text":"<p>ContentSourceBinding is an object that represents a ContentSource to Namespace mapping.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>ContentSourceBinding</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>contentSourceRef</code> ContentSourceReference ContentSourceRef is a reference to a ContentSource object."},{"location":"ref/api/v1alpha1/#virtualmachine","title":"VirtualMachine","text":"<p>VirtualMachine is the Schema for the virtualmachines API. A VirtualMachine represents the desired specification and the observed status of a VirtualMachine instance.  A VirtualMachine is realized by the VirtualMachine controller on a backing Virtual Infrastructure provider such as vSphere.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachine</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSpec <code>status</code> VirtualMachineStatus"},{"location":"ref/api/v1alpha1/#virtualmachineclass","title":"VirtualMachineClass","text":"<p>VirtualMachineClass is the Schema for the virtualmachineclasses API. A VirtualMachineClass represents the desired specification and the observed status of a VirtualMachineClass instance.  A VirtualMachineClass represents a policy and configuration resource which defines a set of attributes to be used in the configuration of a VirtualMachine instance.  A VirtualMachine resource references a VirtualMachineClass as a required input.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineClass</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineClassSpec <code>status</code> VirtualMachineClassStatus"},{"location":"ref/api/v1alpha1/#virtualmachineclassbinding","title":"VirtualMachineClassBinding","text":"<p>VirtualMachineClassBinding is a binding object responsible for defining a VirtualMachineClass and a Namespace associated with it.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineClassBinding</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>classRef</code> ClassReference ClassReference is a reference to a VirtualMachineClass object"},{"location":"ref/api/v1alpha1/#virtualmachineimage","title":"VirtualMachineImage","text":"<p>VirtualMachineImage is the Schema for the virtualmachineimages API A VirtualMachineImage represents a VirtualMachine image (e.g. VM template) that can be used as the base image for creating a VirtualMachine instance.  The VirtualMachineImage is a required field of the VirtualMachine spec.  Currently, VirtualMachineImages are immutable to end users.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequest","title":"VirtualMachinePublishRequest","text":"<p>VirtualMachinePublishRequest defines the information necessary to publish a VirtualMachine as a VirtualMachineImage to an image registry.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachinePublishRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachinePublishRequestSpec <code>status</code> VirtualMachinePublishRequestStatus"},{"location":"ref/api/v1alpha1/#virtualmachineservice","title":"VirtualMachineService","text":"<p>VirtualMachineService is the Schema for the virtualmachineservices API. A VirtualMachineService represents the desired specification and the observed status of a VirtualMachineService instance. A VirtualMachineService represents a network service, provided by one or more VirtualMachines, that is desired to be exposed to other workloads both internal and external to the cluster.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineService</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineServiceSpec <code>status</code> VirtualMachineServiceStatus"},{"location":"ref/api/v1alpha1/#virtualmachinesetresourcepolicy","title":"VirtualMachineSetResourcePolicy","text":"<p>VirtualMachineSetResourcePolicy is the Schema for the virtualmachinesetresourcepolicies API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>VirtualMachineSetResourcePolicy</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSetResourcePolicySpec <code>status</code> VirtualMachineSetResourcePolicyStatus"},{"location":"ref/api/v1alpha1/#webconsolerequest","title":"WebConsoleRequest","text":"<p>WebConsoleRequest allows the creation of a one-time web console ticket that can be used to interact with the VM.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha1</code> <code>kind</code> string <code>WebConsoleRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> WebConsoleRequestSpec <code>status</code> WebConsoleRequestStatus"},{"location":"ref/api/v1alpha1/#types","title":"Types","text":""},{"location":"ref/api/v1alpha1/#classreference","title":"ClassReference","text":"<p>ClassReference contains info to locate a Kind VirtualMachineClass object.</p> <p>Appears in: - VirtualMachineClassBinding</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced."},{"location":"ref/api/v1alpha1/#clustermodulespec","title":"ClusterModuleSpec","text":"<p>ClusterModuleSpec defines a grouping of VirtualMachines that are to be grouped together as a logical unit by the infrastructure provider.  Within vSphere, the ClusterModuleSpec maps directly to a vSphere ClusterModule.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>groupname</code> string GroupName describes the name of the ClusterModule Group."},{"location":"ref/api/v1alpha1/#clustermodulestatus","title":"ClusterModuleStatus","text":"<p>Appears in: - VirtualMachineSetResourcePolicyStatus</p> Field Description <code>groupname</code> string <code>moduleUUID</code> string <code>clusterMoID</code> string"},{"location":"ref/api/v1alpha1/#condition","title":"Condition","text":"<p>Condition defines an observation of a VM Operator API resource operational state.</p> <p>Appears in: - VirtualMachineImageStatus - VirtualMachinePublishRequestStatus - VirtualMachineStatus</p> Field Description <code>type</code> ConditionType Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to disambiguate is important. <code>status</code> ConditionStatus Status of the condition, one of True, False, Unknown. <code>severity</code> ConditionSeverity Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False. <code>lastTransitionTime</code> Time Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable. <code>reason</code> string The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty. <code>message</code> string A human readable message indicating details about the transition. This field may be empty."},{"location":"ref/api/v1alpha1/#contentlibraryproviderspec","title":"ContentLibraryProviderSpec","text":"<p>ContentLibraryProviderSpec defines the desired state of ContentLibraryProvider.</p> <p>Appears in: - ContentLibraryProvider</p> Field Description <code>uuid</code> string UUID describes the UUID of a vSphere content library. It is the unique identifier for a vSphere content library."},{"location":"ref/api/v1alpha1/#contentproviderreference","title":"ContentProviderReference","text":"<p>ContentProviderReference contains the info to locate a content provider resource.</p> <p>Appears in: - ContentSourceSpec - VirtualMachineImageSpec</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced. <code>namespace</code> string Namespace of the resource being referenced. If empty, cluster scoped resource is assumed."},{"location":"ref/api/v1alpha1/#contentsourcereference","title":"ContentSourceReference","text":"<p>ContentSourceReference contains info to locate a Kind ContentSource object.</p> <p>Appears in: - ContentSourceBinding</p> Field Description <code>apiVersion</code> string API version of the referent. <code>kind</code> string Kind is the type of resource being referenced. <code>name</code> string Name is the name of resource being referenced."},{"location":"ref/api/v1alpha1/#contentsourcespec","title":"ContentSourceSpec","text":"<p>ContentSourceSpec defines the desired state of ContentSource.</p> <p>Appears in: - ContentSource</p> Field Description <code>providerRef</code> ContentProviderReference ProviderRef is a reference to a content provider object that describes a provider."},{"location":"ref/api/v1alpha1/#dynamicdirectpathiodevice","title":"DynamicDirectPathIODevice","text":"<p>DynamicDirectPathIODevice contains the configuration corresponding to a Dynamic DirectPath I/O device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>vendorID</code> integer <code>deviceID</code> integer <code>customLabel</code> string"},{"location":"ref/api/v1alpha1/#folderspec","title":"FolderSpec","text":"<p>FolderSpec defines a Folder.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>name</code> string Name describes the name of the Folder"},{"location":"ref/api/v1alpha1/#guestheartbeataction","title":"GuestHeartbeatAction","text":"<p>GuestHeartbeatAction describes an action based on the guest heartbeat.</p> <p>Appears in: - Probe</p> Field Description <code>thresholdStatus</code> GuestHeartbeatStatus ThresholdStatus is the value that the guest heartbeat status must be at or above to be considered successful."},{"location":"ref/api/v1alpha1/#guestheartbeatstatus","title":"GuestHeartbeatStatus","text":"<p>Underlying type: <code>string</code></p> <p>GuestHeartbeatStatus is the status type for a GuestHeartbeat.</p> <p>Appears in: - GuestHeartbeatAction</p>"},{"location":"ref/api/v1alpha1/#instancestorage","title":"InstanceStorage","text":"<p>InstanceStorage provides information used to configure instance storage volumes for a VirtualMachine.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>storageClass</code> string StorageClass refers to the name of a StorageClass resource used to provide the storage for the configured instance storage volumes. The value of this field has no relationship to or bearing on the field virtualMachine.spec.storageClass. Please note the referred StorageClass must be available in the same namespace as the VirtualMachineClass that uses it for configuring instance storage. <code>volumes</code> InstanceStorageVolume array Volumes describes instance storage volumes created for a VirtualMachine instance that use this VirtualMachineClass."},{"location":"ref/api/v1alpha1/#instancestoragevolume","title":"InstanceStorageVolume","text":"<p>InstanceStorageVolume contains information required to create an instance storage volume on a VirtualMachine.</p> <p>Appears in: - InstanceStorage</p> Field Description <code>size</code> Quantity"},{"location":"ref/api/v1alpha1/#instancevolumeclaimvolumesource","title":"InstanceVolumeClaimVolumeSource","text":"<p>InstanceVolumeClaimVolumeSource contains information about the instance storage volume claimed as a PVC.</p> <p>Appears in: - PersistentVolumeClaimVolumeSource</p> Field Description <code>storageClass</code> string StorageClass is the name of the Kubernetes StorageClass that provides the backing storage for this instance storage volume. <code>size</code> Quantity Size is the size of the requested instance storage volume."},{"location":"ref/api/v1alpha1/#loadbalanceringress","title":"LoadBalancerIngress","text":"<p>LoadBalancerIngress represents the status of a load balancer ingress point: traffic intended for the service should be sent to an ingress point. IP or Hostname may both be set in this structure. It is up to the consumer to determine which field should be used when accessing this LoadBalancer.</p> <p>Appears in: - LoadBalancerStatus</p> Field Description <code>ip</code> string IP is set for load balancer ingress points that are specified by an IP address. <code>hostname</code> string Hostname is set for load balancer ingress points that are specified by a DNS address."},{"location":"ref/api/v1alpha1/#loadbalancerstatus","title":"LoadBalancerStatus","text":"<p>LoadBalancerStatus represents the status of a load balancer.</p> <p>Appears in: - VirtualMachineServiceStatus</p> Field Description <code>ingress</code> LoadBalancerIngress array Ingress is a list containing ingress addresses for the load balancer. Traffic intended for the service should be sent to any of these ingress points."},{"location":"ref/api/v1alpha1/#networkdevicestatus","title":"NetworkDeviceStatus","text":"<p>NetworkDeviceStatus defines the network interface IP configuration including gateway, subnetmask and IP address as seen by OVF properties.</p> <p>Appears in: - NetworkStatus</p> Field Description <code>Gateway4</code> string Gateway4 is the gateway for the IPv4 address family for this device. <code>MacAddress</code> string MacAddress is the MAC address of the network device. <code>IPAddresses</code> string array IpAddresses represents one or more IP addresses assigned to the network device in CIDR notation, ex. \"192.0.2.1/16\"."},{"location":"ref/api/v1alpha1/#networkinterfaceproviderreference","title":"NetworkInterfaceProviderReference","text":"<p>NetworkInterfaceProviderReference contains info to locate a network interface provider object.</p> <p>Appears in: - VirtualMachineNetworkInterface</p> Field Description <code>apiGroup</code> string APIGroup is the group for the resource being referenced. <code>kind</code> string Kind is the type of resource being referenced <code>name</code> string Name is the name of resource being referenced <code>apiVersion</code> string API version of the referent."},{"location":"ref/api/v1alpha1/#networkinterfacestatus","title":"NetworkInterfaceStatus","text":"<p>NetworkInterfaceStatus defines the observed state of network interfaces attached to the VirtualMachine as seen by the Guest OS and VMware tools.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>connected</code> boolean Connected represents whether the network interface is connected or not. <code>macAddress</code> string MAC address of the network adapter <code>ipAddresses</code> string array IpAddresses represents zero, one or more IP addresses assigned to the network interface in CIDR notation. For eg, \"192.0.2.1/16\"."},{"location":"ref/api/v1alpha1/#networkstatus","title":"NetworkStatus","text":"<p>NetworkStatus describes the observed state of the VM's network configuration.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>Devices</code> NetworkDeviceStatus array Devices describe a list of current status information for each network interface that is desired to be attached to the VirtualMachineTemplate. <code>Nameservers</code> string array Nameservers describe a list of the DNS servers accessible by one of the VM's configured network devices."},{"location":"ref/api/v1alpha1/#ovfproperty","title":"OvfProperty","text":"<p>OvfProperty describes information related to a user configurable property element that is supported by VirtualMachineImage and can be customized during VirtualMachine creation.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>key</code> string Key describes the key of the ovf property. <code>type</code> string Type describes the type of the ovf property. <code>default</code> string Default describes the default value of the ovf key. <code>description</code> string Description contains the value of the OVF property's optional \"Description\" element. <code>label</code> string Label contains the value of the OVF property's optional \"Label\" element."},{"location":"ref/api/v1alpha1/#persistentvolumeclaimvolumesource","title":"PersistentVolumeClaimVolumeSource","text":"<p>PersistentVolumeClaimVolumeSource is a composite for the Kubernetes corev1.PersistentVolumeClaimVolumeSource and instance storage options.</p> <p>Appears in: - VirtualMachineVolume</p> Field Description <code>claimName</code> string claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims <code>readOnly</code> boolean readOnly Will force the ReadOnly setting in VolumeMounts. Default false. <code>instanceVolumeClaim</code> InstanceVolumeClaimVolumeSource InstanceVolumeClaim is set if the PVC is backed by instance storage."},{"location":"ref/api/v1alpha1/#probe","title":"Probe","text":"<p>Probe describes a health check to be performed against a VirtualMachine to determine whether it is alive or ready to receive traffic. Only one probe action can be specified.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>tcpSocket</code> TCPSocketAction TCPSocket specifies an action involving a TCP port. <code>guestHeartbeat</code> GuestHeartbeatAction GuestHeartbeat specifies an action involving the guest heartbeat status. <code>timeoutSeconds</code> integer TimeoutSeconds specifies a number of seconds after which the probe times out. Defaults to 10 seconds. Minimum value is 1. <code>periodSeconds</code> integer PeriodSeconds specifics how often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1."},{"location":"ref/api/v1alpha1/#resourcepoolspec","title":"ResourcePoolSpec","text":"<p>ResourcePoolSpec defines a Logical Grouping of workloads that share resource policies.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>name</code> string Name describes the name of the ResourcePool grouping. <code>reservations</code> VirtualMachineResourceSpec Reservations describes the guaranteed resources reserved for the ResourcePool. <code>limits</code> VirtualMachineResourceSpec Limits describes the limit to resources available to the ResourcePool."},{"location":"ref/api/v1alpha1/#tcpsocketaction","title":"TCPSocketAction","text":"<p>TCPSocketAction describes an action based on opening a socket.</p> <p>Appears in: - Probe</p> Field Description <code>port</code> IntOrString Port specifies a number or name of the port to access on the VirtualMachine. If the format of port is a number, it must be in the range 1 to 65535. If the format of name is a string, it must be an IANA_SVC_NAME. <code>host</code> string Host is an optional host name to connect to.  Host defaults to the VirtualMachine IP."},{"location":"ref/api/v1alpha1/#vgpudevice","title":"VGPUDevice","text":"<p>VGPUDevice contains the configuration corresponding to a vGPU device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>profileName</code> string"},{"location":"ref/api/v1alpha1/#virtualdevices","title":"VirtualDevices","text":"<p>VirtualDevices contains information about the virtual devices associated with a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>vgpuDevices</code> VGPUDevice array <code>dynamicDirectPathIODevices</code> DynamicDirectPathIODevice array"},{"location":"ref/api/v1alpha1/#virtualmachineadvancedoptions","title":"VirtualMachineAdvancedOptions","text":"<p>VirtualMachineAdvancedOptions describes a set of optional, advanced options for configuring a VirtualMachine.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>defaultVolumeProvisioningOptions</code> VirtualMachineVolumeProvisioningOptions DefaultProvisioningOptions specifies the provisioning type to be used by default for VirtualMachine volumes exclusively owned by this VirtualMachine. This does not apply to PersistentVolumeClaim volumes that are created and managed externally. <code>changeBlockTracking</code> boolean ChangeBlockTracking specifies the enablement of incremental backup support for this VirtualMachine, which can be utilized by external backup systems such as VMware Data Recovery."},{"location":"ref/api/v1alpha1/#virtualmachineclasshardware","title":"VirtualMachineClassHardware","text":"<p>VirtualMachineClassHardware describes a virtual hardware resource specification.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>cpus</code> integer <code>memory</code> Quantity <code>devices</code> VirtualDevices <code>instanceStorage</code> InstanceStorage"},{"location":"ref/api/v1alpha1/#virtualmachineclasspolicies","title":"VirtualMachineClassPolicies","text":"<p>VirtualMachineClassPolicies describes the policy configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>resources</code> VirtualMachineClassResources"},{"location":"ref/api/v1alpha1/#virtualmachineclassresources","title":"VirtualMachineClassResources","text":"<p>VirtualMachineClassResources describes the virtual hardware resource reservations and limits configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassPolicies</p> Field Description <code>requests</code> VirtualMachineResourceSpec <code>limits</code> VirtualMachineResourceSpec"},{"location":"ref/api/v1alpha1/#virtualmachineclassspec","title":"VirtualMachineClassSpec","text":"<p>VirtualMachineClassSpec defines the desired state of VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClass</p> Field Description <code>controllerName</code> string ControllerName describes the name of the controller responsible for reconciling VirtualMachine resources that are realized from this VirtualMachineClass. When omitted, controllers reconciling VirtualMachine resources determine the default controller name from the environment variable DEFAULT_VM_CLASS_CONTROLLER_NAME. If this environment variable is not defined or empty, it defaults to vmoperator.vmware.com/vsphere. Once a non-empty value is assigned to this field, attempts to set this field to an empty value will be silently ignored. <code>hardware</code> VirtualMachineClassHardware Hardware describes the configuration of the VirtualMachineClass attributes related to virtual hardware.  The configuration specified in this field is used to customize the virtual hardware characteristics of any VirtualMachine associated with this VirtualMachineClass. <code>policies</code> VirtualMachineClassPolicies Policies describes the configuration of the VirtualMachineClass attributes related to virtual infrastructure policy.  The configuration specified in this field is used to customize various policies related to infrastructure resource consumption. <code>description</code> string Description describes the configuration of the VirtualMachineClass which is not related to virtual hardware or infrastructure policy. This field is used to address remaining specs about this VirtualMachineClass. <code>configSpec</code> json.RawMessage ConfigSpec describes additional configuration information for a VirtualMachine. The contents of this field are the VirtualMachineConfigSpec data object (https://bit.ly/3HDtiRu) marshaled to JSON using the discriminator field \"_typeName\" to preserve type information."},{"location":"ref/api/v1alpha1/#virtualmachineimageosinfo","title":"VirtualMachineImageOSInfo","text":"<p>VirtualMachineImageOSInfo describes optional information related to the image operating system that can be added to an image template. This information can be used by the image author to communicate details of the operating system associated with the image.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>version</code> string Version typically describes the version of the guest operating system. <code>type</code> string Type typically describes the type of the guest operating system."},{"location":"ref/api/v1alpha1/#virtualmachineimageproductinfo","title":"VirtualMachineImageProductInfo","text":"<p>VirtualMachineImageProductInfo describes optional product-related information that can be added to an image template.  This information can be used by the image author to communicate details of the product contained in the image.</p> <p>Appears in: - VirtualMachineImageSpec</p> Field Description <code>product</code> string Product typically describes the type of product contained in the image. <code>vendor</code> string Vendor typically describes the name of the vendor that is producing the image. <code>version</code> string Version typically describes a short-form version of the image. <code>fullVersion</code> string FullVersion typically describes a long-form version of the image."},{"location":"ref/api/v1alpha1/#virtualmachineimagespec","title":"VirtualMachineImageSpec","text":"<p>VirtualMachineImageSpec defines the desired state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>type</code> string Type describes the type of the VirtualMachineImage. Currently, the only supported image is \"OVF\" <code>imageSourceType</code> string ImageSourceType describes the type of content source of the VirtualMachineImage.  The only Content Source supported currently is the vSphere Content Library. <code>imageID</code> string ImageID is a unique identifier exposed by the provider of this VirtualMachineImage. <code>providerRef</code> ContentProviderReference ProviderRef is a reference to a content provider object that describes a provider. <code>productInfo</code> VirtualMachineImageProductInfo ProductInfo describes the attributes of the VirtualMachineImage relating to the product contained in the image. <code>osInfo</code> VirtualMachineImageOSInfo OSInfo describes the attributes of the VirtualMachineImage relating to the Operating System contained in the image. <code>ovfEnv</code> object (keys:string, values:OvfProperty) OVFEnv describes the user configurable customization parameters of the VirtualMachineImage. <code>hwVersion</code> integer HardwareVersion describes the virtual hardware version of the image"},{"location":"ref/api/v1alpha1/#virtualmachineimagestatus","title":"VirtualMachineImageStatus","text":"<p>VirtualMachineImageStatus defines the observed state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>uuid</code> string Deprecated <code>internalId</code> string Deprecated <code>powerState</code> string Deprecated <code>imageName</code> string ImageName describes the display name of this image. <code>imageSupported</code> boolean ImageSupported indicates whether the VirtualMachineImage is supported by VMService. A VirtualMachineImage is supported by VMService if the following conditions are true: - VirtualMachineImageV1Alpha1CompatibleCondition <code>conditions</code> Condition array Conditions describes the current condition information of the VirtualMachineImage object. e.g. if the OS type is supported or image is supported by VMService <code>contentLibraryRef</code> TypedLocalObjectReference ContentLibraryRef is a reference to the source ContentLibrary/ClusterContentLibrary resource. <code>contentVersion</code> string ContentVersion describes the observed content version of this VirtualMachineImage that was last successfully synced with the vSphere content library item. <code>firmware</code> string Firmware describe the firmware type used by this VirtualMachineImage. eg: bios, efi."},{"location":"ref/api/v1alpha1/#virtualmachinemetadata","title":"VirtualMachineMetadata","text":"<p>VirtualMachineMetadata defines any metadata that should be passed to the VirtualMachine instance.  A typical use case is for this metadata to be used for Guest Customization, however the intended use of the metadata is agnostic to the VirtualMachine controller.  VirtualMachineMetadata is read from a configured ConfigMap or a Secret and then propagated to the VirtualMachine instance using a desired \"Transport\" mechanism.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>configMapName</code> string ConfigMapName describes the name of the ConfigMap, in the same Namespace as the VirtualMachine, that should be used for VirtualMachine metadata.  The contents of the Data field of the ConfigMap is used as the VM Metadata. The format of the contents of the VM Metadata are not parsed or interpreted by the VirtualMachine controller. Please note, this field and SecretName are mutually exclusive. <code>secretName</code> string SecretName describes the name of the Secret, in the same Namespace as the VirtualMachine, that should be used for VirtualMachine metadata. The contents of the Data field of the Secret is used as the VM Metadata. The format of the contents of the VM Metadata are not parsed or interpreted by the VirtualMachine controller. Please note, this field and ConfigMapName are mutually exclusive. <code>transport</code> VirtualMachineMetadataTransport Transport describes the name of a supported VirtualMachineMetadata transport protocol.  Currently, the only supported transport protocols are \"ExtraConfig\", \"OvfEnv\" and \"CloudInit\"."},{"location":"ref/api/v1alpha1/#virtualmachinenetworkinterface","title":"VirtualMachineNetworkInterface","text":"<p>VirtualMachineNetworkInterface defines the properties of a network interface to attach to a VirtualMachine instance.  A VirtualMachineNetworkInterface describes network interface configuration that is used by the VirtualMachine controller when integrating the VirtualMachine into a VirtualNetwork.  Currently, only NSX-T and vSphere Distributed Switch (VDS) type network integrations are supported using this VirtualMachineNetworkInterface structure.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>networkType</code> string NetworkType describes the type of VirtualNetwork that is referenced by the NetworkName.  Currently, the only supported NetworkTypes are \"nsx-t\" and \"vsphere-distributed\". <code>networkName</code> string NetworkName describes the name of an existing virtual network that this interface should be added to. For \"nsx-t\" NetworkType, this is the name of a pre-existing NSX-T VirtualNetwork. If unspecified, the default network for the namespace will be used. For \"vsphere-distributed\" NetworkType, the NetworkName must be specified. <code>providerRef</code> NetworkInterfaceProviderReference ProviderRef is reference to a network interface provider object that specifies the network interface configuration. If unset, default configuration is assumed. <code>ethernetCardType</code> string EthernetCardType describes an optional ethernet card that should be used by the VirtualNetworkInterface (vNIC) associated with this network integration.  The default is \"vmxnet3\"."},{"location":"ref/api/v1alpha1/#virtualmachineport","title":"VirtualMachinePort","text":"<p>VirtualMachinePort is unused and can be considered deprecated.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>port</code> integer <code>ip</code> string <code>name</code> string <code>protocol</code> Protocol"},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequestsource","title":"VirtualMachinePublishRequestSource","text":"<p>VirtualMachinePublishRequestSource is the source of a publication request, typically a VirtualMachine resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>name</code> string Name is the name of the referenced object. If omitted this value defaults to the name of the VirtualMachinePublishRequest resource. <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequestspec","title":"VirtualMachinePublishRequestSpec","text":"<p>VirtualMachinePublishRequestSpec defines the desired state of a VirtualMachinePublishRequest.   All the fields in this spec are optional. This is especially useful when a DevOps persona wants to publish a VM without doing anything more than applying a VirtualMachinePublishRequest resource that has the same name as said VM in the same namespace as said VM.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>source</code> VirtualMachinePublishRequestSource Source is the source of the publication request, ex. a VirtualMachine resource. If this value is omitted then the publication controller checks to see if there is a resource with the same name as this VirtualMachinePublishRequest resource, an API version equal to spec.source.apiVersion, and a kind equal to spec.source.kind. If such a resource exists, then it is the source of the publication. <code>target</code> VirtualMachinePublishRequestTarget Target is the target of the publication request, ex. item information and a ContentLibrary resource. If this value is omitted, the controller uses spec.source.name + \"-image\" as the name of the published item. Additionally, when omitted the controller attempts to identify the target location by matching a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, w/ the label \"imageregistry.vmware.com/default\". Please note that while optional, if a VirtualMachinePublishRequest sans target information is applied to a namespace without a default publication target, then the VirtualMachinePublishRequest resource will be marked in error. <code>ttlSecondsAfterFinished</code> integer TTLSecondsAfterFinished is the time-to-live duration for how long this resource will be allowed to exist once the publication operation completes. After the TTL expires, the resource will be automatically deleted without the user having to take any direct action. If this field is unset then the request resource will not be automatically deleted. If this field is set to zero then the request resource is eligible for deletion immediately after it finishes."},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequeststatus","title":"VirtualMachinePublishRequestStatus","text":"<p>VirtualMachinePublishRequestStatus defines the observed state of a VirtualMachinePublishRequest.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>sourceRef</code> VirtualMachinePublishRequestSource SourceRef is the reference to the source of the publication request, ex. a VirtualMachine resource. <code>targetRef</code> VirtualMachinePublishRequestTarget TargetRef is the reference to the target of the publication request, ex. item information and a ContentLibrary resource. <code>completionTime</code> Time CompletionTime represents time when the request was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The value of this field should be equal to the value of the LastTransitionTime for the status condition Type=Complete. <code>startTime</code> Time StartTime represents time when the request was acknowledged by the controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. <code>attempts</code> integer Attempts represents the number of times the request to publish the VM has been attempted. <code>lastAttemptTime</code> Time LastAttemptTime represents the time when the latest request was sent. <code>imageName</code> string ImageName is the name of the VirtualMachineImage resource that is eventually realized in the same namespace as the VM and publication request after the publication operation completes. This field will not be set until the VirtualMachineImage resource is realized. <code>ready</code> boolean Ready is set to true only when the VM has been published successfully and the new VirtualMachineImage resource is ready. Readiness is determined by waiting until there is status condition Type=Complete and ensuring it and all other status conditions present have a Status=True. The conditions present will be: * SourceValid * TargetValid * Uploaded * ImageAvailable * Complete <code>conditions</code> Condition array Conditions is a list of the latest, available observations of the request's current state."},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequesttarget","title":"VirtualMachinePublishRequestTarget","text":"<p>VirtualMachinePublishRequestTarget is the target of a publication request, typically a ContentLibrary resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>item</code> VirtualMachinePublishRequestTargetItem Item contains information about the name of the object to which the VM is published. Please note this value is optional and if omitted, the controller will use spec.source.name + \"-image\" as the name of the published item. <code>location</code> VirtualMachinePublishRequestTargetLocation Location contains information about the location to which to publish the VM."},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequesttargetitem","title":"VirtualMachinePublishRequestTargetItem","text":"<p>VirtualMachinePublishRequestTargetItem is the item part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the display name of the published object. If the spec.target.location.apiVersion equals imageregistry.vmware.com/v1alpha1 and the spec.target.location.kind equals ContentLibrary, then this should be the name that will show up in vCenter Content Library, not the custom resource name in the namespace. If omitted then the controller will use spec.source.name + \"-image\". <code>description</code> string Description is the description to assign to the published object."},{"location":"ref/api/v1alpha1/#virtualmachinepublishrequesttargetlocation","title":"VirtualMachinePublishRequestTargetLocation","text":"<p>VirtualMachinePublishRequestTargetLocation is the location part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the name of the referenced object. Please note an error will be returned if this field is not set in a namespace that lacks a default publication target. A default publication target is a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, and has the label \"imageregistry.vmware.com/default\". <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"ref/api/v1alpha1/#virtualmachineresourcespec","title":"VirtualMachineResourceSpec","text":"<p>VirtualMachineResourceSpec describes a virtual hardware policy specification.</p> <p>Appears in: - ResourcePoolSpec - VirtualMachineClassResources</p> Field Description <code>cpu</code> Quantity <code>memory</code> Quantity"},{"location":"ref/api/v1alpha1/#virtualmachineserviceport","title":"VirtualMachineServicePort","text":"<p>VirtualMachineServicePort describes the specification of a service port to be exposed by a VirtualMachineService. This VirtualMachineServicePort specification includes attributes that define the external and internal representation of the service port.</p> <p>Appears in: - VirtualMachineServiceSpec</p> Field Description <code>name</code> string Name describes the name to be used to identify this VirtualMachineServicePort <code>protocol</code> string Protocol describes the Layer 4 transport protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". <code>port</code> integer Port describes the external port that will be exposed by the service. <code>targetPort</code> integer TargetPort describes the internal port open on a VirtualMachine that should be mapped to the external Port."},{"location":"ref/api/v1alpha1/#virtualmachineservicespec","title":"VirtualMachineServiceSpec","text":"<p>VirtualMachineServiceSpec defines the desired state of VirtualMachineService. Each VirtualMachineService exposes a set of TargetPorts on a set of VirtualMachine instances as a network endpoint within or outside of the Kubernetes cluster. The VirtualMachineService is loosely coupled to the VirtualMachines that are backing it through the use of a Label Selector. In Kubernetes, a Label Selector enables matching of a resource using a set of key-value pairs, aka Labels. By using a Label Selector, the VirtualMachineService can be generically defined to apply to any VirtualMachine in the same namespace that has the appropriate set of labels.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>type</code> VirtualMachineServiceType Type specifies a desired VirtualMachineServiceType for this VirtualMachineService. Supported types are ClusterIP, LoadBalancer, ExternalName. <code>ports</code> VirtualMachineServicePort array Ports specifies a list of VirtualMachineServicePort to expose with this VirtualMachineService. Each of these ports will be an accessible network entry point to access this service by. <code>selector</code> object (keys:string, values:string) Selector specifies a map of key-value pairs, also known as a Label Selector, that is used to match this VirtualMachineService with the set of VirtualMachines that should back this VirtualMachineService. <code>loadBalancerIP</code> string Only applies to VirtualMachineService Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying load balancer provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the provider does not support the feature. <code>loadBalancerSourceRanges</code> string array LoadBalancerSourceRanges is an array of IP addresses in the format of CIDRs, for example: 103.21.244.0/22 and 10.0.0.0/24. If specified and supported by the load balancer provider, this will restrict ingress traffic to the specified client IPs. This field will be ignored if the provider does not support the feature. <code>clusterIp</code> string clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies <code>externalName</code> string externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName."},{"location":"ref/api/v1alpha1/#virtualmachineservicestatus","title":"VirtualMachineServiceStatus","text":"<p>VirtualMachineServiceStatus defines the observed state of VirtualMachineService.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>loadBalancer</code> LoadBalancerStatus LoadBalancer contains the current status of the load balancer, if one is present."},{"location":"ref/api/v1alpha1/#virtualmachinesetresourcepolicyspec","title":"VirtualMachineSetResourcePolicySpec","text":"<p>VirtualMachineSetResourcePolicySpec defines the desired state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>resourcepool</code> ResourcePoolSpec <code>folder</code> FolderSpec <code>clustermodules</code> ClusterModuleSpec array"},{"location":"ref/api/v1alpha1/#virtualmachinesetresourcepolicystatus","title":"VirtualMachineSetResourcePolicyStatus","text":"<p>VirtualMachineSetResourcePolicyStatus defines the observed state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>clustermodules</code> ClusterModuleStatus array"},{"location":"ref/api/v1alpha1/#virtualmachinespec","title":"VirtualMachineSpec","text":"<p>VirtualMachineSpec defines the desired state of a VirtualMachine.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>imageName</code> string ImageName describes the name of a VirtualMachineImage that is to be used as the base Operating System image of the desired VirtualMachine instances.  The VirtualMachineImage resources can be introspected to discover identifying attributes that may help users to identify the desired image to use. <code>className</code> string ClassName describes the name of a VirtualMachineClass that is to be used as the overlaid resource configuration of VirtualMachine.  A VirtualMachineClass is used to further customize the attributes of the VirtualMachine instance.  See VirtualMachineClass for more description. <code>powerState</code> VirtualMachinePowerState PowerState describes the desired power state of a VirtualMachine. Please note this field may be omitted when creating a new VM and will default to \"poweredOn.\" However, once the field is set to a non-empty value, it may no longer be set to an empty value. Additionally, setting this value to \"suspended\" is not supported when creating a new VM. The valid values when creating a new VM are \"poweredOn\" and \"poweredOff.\" An empty value is also allowed on create since this value defaults to \"poweredOn\" for new VMs. <code>powerOffMode</code> VirtualMachinePowerOpMode PowerOffMode describes the desired behavior when powering off a VM. There are three, supported power off modes: hard, soft, and trySoft. The first mode, hard, is the equivalent of a physical system's power cord being ripped from the wall. The soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully shutdown the VM. Its variant, trySoft, first attempts a graceful shutdown, and if that fails or the VM is not in a powered off state after five minutes, the VM is halted. If omitted, the mode defaults to hard. <code>suspendMode</code> VirtualMachinePowerOpMode SuspendMode describes the desired behavior when suspending a VM. There are three, supported suspend modes: hard, soft, and trySoft. The first mode, hard, is where vSphere suspends the VM to disk without any interaction inside of the guest. The soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully suspend the VM. Its variant, trySoft, first attempts a graceful suspend, and if that fails or the VM is not in a put into standby by the guest after five minutes, the VM is suspended. If omitted, the mode defaults to hard. <code>nextRestartTime</code> string NextRestartTime may be used to restart the VM, in accordance with RestartMode, by setting the value of this field to \"now\" (case-insensitive). A mutating webhook changes this value to the current time (UTC), which the VM controller then uses to determine the VM should be restarted by comparing the value to the timestamp of the last time the VM was restarted. Please note it is not possible to schedule future restarts using this field. The only value that users may set is the string \"now\" (case-insensitive). <code>restartMode</code> VirtualMachinePowerOpMode RestartMode describes the desired behavior for restarting a VM when spec.nextRestartTime is set to \"now\" (case-insensitive). There are three, supported suspend modes: hard, soft, and trySoft. The first mode, hard, is where vSphere resets the VM without any interaction inside of the guest. The soft mode requires the VM's guest to have VM Tools installed and asks the guest to restart the VM. Its variant, trySoft, first attempts a soft restart, and if that fails or does not complete within five minutes, the VM is hard reset. If omitted, the mode defaults to hard. <code>ports</code> VirtualMachinePort array Ports is currently unused and can be considered deprecated. <code>vmMetadata</code> VirtualMachineMetadata VmMetadata describes any optional metadata that should be passed to the Guest OS. <code>storageClass</code> string StorageClass describes the name of a StorageClass that should be used to configure storage-related attributes of the VirtualMachine instance. <code>networkInterfaces</code> VirtualMachineNetworkInterface array NetworkInterfaces describes a list of VirtualMachineNetworkInterfaces to be configured on the VirtualMachine instance. Each of these VirtualMachineNetworkInterfaces describes external network integration configurations that are to be used by the VirtualMachine controller when integrating the VirtualMachine into one or more external networks. <code>resourcePolicyName</code> string ResourcePolicyName describes the name of a VirtualMachineSetResourcePolicy to be used when creating the VirtualMachine instance. <code>volumes</code> VirtualMachineVolume array Volumes describes the list of VirtualMachineVolumes that are desired to be attached to the VirtualMachine.  Each of these volumes specifies a volume identity that the VirtualMachine controller will attempt to satisfy, potentially with an external Volume Management service. <code>readinessProbe</code> Probe ReadinessProbe describes a network probe that can be used to determine if the VirtualMachine is available and responding to the probe. <code>advancedOptions</code> VirtualMachineAdvancedOptions AdvancedOptions describes a set of optional, advanced options for configuring a VirtualMachine"},{"location":"ref/api/v1alpha1/#virtualmachinestatus","title":"VirtualMachineStatus","text":"<p>VirtualMachineStatus defines the observed state of a VirtualMachine instance.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>host</code> string Host describes the hostname or IP address of the infrastructure host that the VirtualMachine is executing on. <code>powerState</code> VirtualMachinePowerState PowerState describes the current power state of the VirtualMachine. <code>phase</code> VMStatusPhase Phase describes the current phase information of the VirtualMachine. <code>conditions</code> Condition array Conditions describes the current condition information of the VirtualMachine. <code>vmIp</code> string VmIp describes the Primary IP address assigned to the guest operating system, if known. Multiple IPs can be available for the VirtualMachine. Refer to networkInterfaces in the VirtualMachine status for additional IPs <code>uniqueID</code> string UniqueID describes a unique identifier that is provided by the underlying infrastructure provider, such as vSphere. <code>biosUUID</code> string BiosUUID describes a unique identifier provided by the underlying infrastructure provider that is exposed to the Guest OS BIOS as a unique hardware identifier. <code>instanceUUID</code> string InstanceUUID describes the unique instance UUID provided by the underlying infrastructure provider, such as vSphere. <code>volumes</code> VirtualMachineVolumeStatus array Volumes describes a list of current status information for each Volume that is desired to be attached to the VirtualMachine. <code>changeBlockTracking</code> boolean ChangeBlockTracking describes the CBT enablement status on the VirtualMachine. <code>networkInterfaces</code> NetworkInterfaceStatus array NetworkInterfaces describes a list of current status information for each network interface that is desired to be attached to the VirtualMachine. <code>zone</code> string Zone describes the availability zone where the VirtualMachine has been scheduled. Please note this field may be empty when the cluster is not zone-aware. <code>lastRestartTime</code> Time LastRestartTime describes the last time the VM was restarted."},{"location":"ref/api/v1alpha1/#virtualmachinevolume","title":"VirtualMachineVolume","text":"<p>VirtualMachineVolume describes a Volume that should be attached to a specific VirtualMachine. Only one of PersistentVolumeClaim, VsphereVolume should be specified.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>name</code> string Name specifies the name of the VirtualMachineVolume.  Each volume within the scope of a VirtualMachine must have a unique name. <code>persistentVolumeClaim</code> PersistentVolumeClaimVolumeSource PersistentVolumeClaim represents a reference to a PersistentVolumeClaim in the same namespace. The PersistentVolumeClaim must match one of the following: * A volume provisioned (either statically or dynamically) by the cluster's CSI provider. * An instance volume with a lifecycle coupled to the VM. <code>vSphereVolume</code> VsphereVolumeSource VsphereVolume represents a reference to a VsphereVolumeSource in the same namespace. Only one of PersistentVolumeClaim or VsphereVolume can be specified. This is enforced via a webhook"},{"location":"ref/api/v1alpha1/#virtualmachinevolumeprovisioningoptions","title":"VirtualMachineVolumeProvisioningOptions","text":"<p>VirtualMachineVolumeProvisioningOptions specifies the provisioning options for a VirtualMachineVolume.</p> <p>Appears in: - VirtualMachineAdvancedOptions</p> Field Description <code>thinProvisioned</code> boolean ThinProvisioned specifies whether to use thin provisioning for the VirtualMachineVolume. This means a sparse (allocate on demand) format with additional space optimizations. <code>eagerZeroed</code> boolean EagerZeroed specifies whether to use eager zero provisioning for the VirtualMachineVolume. An eager zeroed thick disk has all space allocated and wiped clean of any previous contents on the physical media at creation time. Such disks may take longer time during creation compared to other disk formats. EagerZeroed is only applicable if ThinProvisioned is false. This is validated by the webhook."},{"location":"ref/api/v1alpha1/#virtualmachinevolumestatus","title":"VirtualMachineVolumeStatus","text":"<p>VirtualMachineVolumeStatus defines the observed state of a VirtualMachineVolume instance.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>name</code> string Name is the name of the volume in a VirtualMachine. <code>attached</code> boolean Attached represents whether a volume has been successfully attached to the VirtualMachine or not. <code>diskUUID</code> string DiskUuid represents the underlying virtual disk UUID and is present when attachment succeeds. <code>error</code> string Error represents the last error seen when attaching or detaching a volume.  Error will be empty if attachment succeeds."},{"location":"ref/api/v1alpha1/#vspherevolumesource","title":"VsphereVolumeSource","text":"<p>VsphereVolumeSource describes a volume source that represent static disks that belong to a VirtualMachine.</p> <p>Appears in: - VirtualMachineVolume</p> Field Description <code>capacity</code> object (keys:ResourceName, values:Quantity) A description of the virtual volume's resources and capacity <code>deviceKey</code> integer Device key of vSphere disk."},{"location":"ref/api/v1alpha1/#webconsolerequestspec","title":"WebConsoleRequestSpec","text":"<p>WebConsoleRequestSpec describes the specification for used to request a web console request.</p> <p>Appears in: - WebConsoleRequest</p> Field Description <code>virtualMachineName</code> string VirtualMachineName is the VM in the same namespace, for which the web console is requested. <code>publicKey</code> string PublicKey is used to encrypt the status.response. This is expected to be a RSA OAEP public key in X.509 PEM format."},{"location":"ref/api/v1alpha1/#webconsolerequeststatus","title":"WebConsoleRequestStatus","text":"<p>WebConsoleRequestStatus defines the observed state, which includes the web console request itself.</p> <p>Appears in: - WebConsoleRequest</p> Field Description <code>response</code> string Response will be the authenticated ticket corresponding to this web console request. <code>expiryTime</code> Time ExpiryTime is when the ticket referenced in Response will expire. <code>proxyAddr</code> string ProxyAddr describes the host address and optional port used to access the VM's web console. The value could be a DNS entry, IPv4, or IPv6 address, followed by an optional port. For example, valid values include: DNS * host.com * host.com:6443 IPv4 * 1.2.3.4 * 1.2.3.4:6443 IPv6 * 1234123412341234:1234 * [1234123412341234:1234]:6443 * 12341234:0000:0000:0000:1234:1234 * 12341234:::1234 * [12341234:::1234]:6443 In other words, the field may be set to any value that is parsable by Go's https://pkg.go.dev/net#ResolveIPAddr and https://pkg.go.dev/net#ParseIP functions."},{"location":"ref/api/v1alpha2/","title":"v1alpha2","text":""},{"location":"ref/api/v1alpha2/#kinds","title":"Kinds","text":""},{"location":"ref/api/v1alpha2/#clustervirtualmachineimage","title":"ClusterVirtualMachineImage","text":"<p>ClusterVirtualMachineImage is the schema for the clustervirtualmachineimages API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>ClusterVirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"ref/api/v1alpha2/#virtualmachine","title":"VirtualMachine","text":"<p>VirtualMachine is the schema for the virtualmachines API and represents the desired state and observed status of a virtualmachines resource.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachine</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSpec <code>status</code> VirtualMachineStatus"},{"location":"ref/api/v1alpha2/#virtualmachineclass","title":"VirtualMachineClass","text":"<p>VirtualMachineClass is the schema for the virtualmachineclasses API and represents the desired state and observed status of a virtualmachineclasses resource.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachineClass</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineClassSpec <code>status</code> VirtualMachineClassStatus"},{"location":"ref/api/v1alpha2/#virtualmachineimage","title":"VirtualMachineImage","text":"<p>VirtualMachineImage is the schema for the virtualmachineimages API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachineImage</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineImageSpec <code>status</code> VirtualMachineImageStatus"},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequest","title":"VirtualMachinePublishRequest","text":"<p>VirtualMachinePublishRequest defines the information necessary to publish a VirtualMachine as a VirtualMachineImage to an image registry.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachinePublishRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachinePublishRequestSpec <code>status</code> VirtualMachinePublishRequestStatus"},{"location":"ref/api/v1alpha2/#virtualmachineservice","title":"VirtualMachineService","text":"<p>VirtualMachineService is the Schema for the virtualmachineservices API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachineService</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineServiceSpec <code>status</code> VirtualMachineServiceStatus"},{"location":"ref/api/v1alpha2/#virtualmachinesetresourcepolicy","title":"VirtualMachineSetResourcePolicy","text":"<p>VirtualMachineSetResourcePolicy is the Schema for the virtualmachinesetresourcepolicies API.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachineSetResourcePolicy</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineSetResourcePolicySpec <code>status</code> VirtualMachineSetResourcePolicyStatus"},{"location":"ref/api/v1alpha2/#virtualmachinewebconsolerequest","title":"VirtualMachineWebConsoleRequest","text":"<p>VirtualMachineWebConsoleRequest allows the creation of a one-time, web console connection to a VM.</p> Field Description <code>apiVersion</code> string <code>vmoperator.vmware.com/v1alpha2</code> <code>kind</code> string <code>VirtualMachineWebConsoleRequest</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> VirtualMachineWebConsoleRequestSpec <code>status</code> VirtualMachineWebConsoleRequestStatus"},{"location":"ref/api/v1alpha2/#types","title":"Types","text":""},{"location":"ref/api/v1alpha2/#dynamicdirectpathiodevice","title":"DynamicDirectPathIODevice","text":"<p>DynamicDirectPathIODevice contains the configuration corresponding to a Dynamic DirectPath I/O device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>vendorID</code> integer <code>deviceID</code> integer <code>customLabel</code> string"},{"location":"ref/api/v1alpha2/#guestheartbeataction","title":"GuestHeartbeatAction","text":"<p>GuestHeartbeatAction describes an action based on the guest heartbeat.</p> <p>Appears in: - VirtualMachineReadinessProbeSpec</p> Field Description <code>thresholdStatus</code> GuestHeartbeatStatus ThresholdStatus is the value that the guest heartbeat status must be at or above to be considered successful."},{"location":"ref/api/v1alpha2/#guestheartbeatstatus","title":"GuestHeartbeatStatus","text":"<p>Underlying type: <code>string</code></p> <p>GuestHeartbeatStatus is the guest heartbeat status.</p> <p>Appears in: - GuestHeartbeatAction</p>"},{"location":"ref/api/v1alpha2/#guestinfoaction","title":"GuestInfoAction","text":"<p>GuestInfoAction describes a key from GuestInfo that must match the associated value expression.</p> <p>Appears in: - VirtualMachineReadinessProbeSpec</p> Field Description <code>key</code> string Key is the name of the GuestInfo key. Values are automatically prefixed with \"guestinfo.\" before being evaluated. Thus if the key \"guestinfo.mykey\" is provided, it will be evaluated as \"guestinfo.guestinfo.mykey\". <code>value</code> string Value is a regular expression that is matched against the value of the specified key. An empty value is the equivalent of \"match any\" or \".*\". All values must adhere to the RE2 regular expression syntax as documented at https://golang.org/s/re2syntax. Invalid values may be rejected or ignored depending on the implementation of this API. Either way, invalid values will not be considered when evaluating the ready state of a VM."},{"location":"ref/api/v1alpha2/#instancestorage","title":"InstanceStorage","text":"<p>InstanceStorage provides information used to configure instance storage volumes for a VirtualMachine.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>storageClass</code> string StorageClass refers to the name of a StorageClass resource used to provide the storage for the configured instance storage volumes. The value of this field has no relationship to or bearing on the field virtualMachine.spec.storageClass. Please note the referred StorageClass must be available in the same namespace as the VirtualMachineClass that uses it for configuring instance storage. <code>volumes</code> InstanceStorageVolume array Volumes describes instance storage volumes created for a VirtualMachine instance that use this VirtualMachineClass."},{"location":"ref/api/v1alpha2/#instancestoragevolume","title":"InstanceStorageVolume","text":"<p>InstanceStorageVolume contains information required to create an instance storage volume on a VirtualMachine.</p> <p>Appears in: - InstanceStorage</p> Field Description <code>size</code> Quantity"},{"location":"ref/api/v1alpha2/#instancevolumeclaimvolumesource","title":"InstanceVolumeClaimVolumeSource","text":"<p>InstanceVolumeClaimVolumeSource contains information about the instance storage volume claimed as a PVC.</p> <p>Appears in: - PersistentVolumeClaimVolumeSource</p> Field Description <code>storageClass</code> string StorageClass is the name of the Kubernetes StorageClass that provides the backing storage for this instance storage volume. <code>size</code> Quantity Size is the size of the requested instance storage volume."},{"location":"ref/api/v1alpha2/#loadbalanceringress","title":"LoadBalancerIngress","text":"<p>LoadBalancerIngress represents the status of a load balancer ingress point: traffic intended for the service should be sent to an ingress point. IP or Hostname may both be set in this structure. It is up to the consumer to determine which field should be used when accessing this LoadBalancer.</p> <p>Appears in: - LoadBalancerStatus</p> Field Description <code>ip</code> string IP is set for load balancer ingress points that are specified by an IP address. <code>hostname</code> string Hostname is set for load balancer ingress points that are specified by a DNS address."},{"location":"ref/api/v1alpha2/#loadbalancerstatus","title":"LoadBalancerStatus","text":"<p>LoadBalancerStatus represents the status of a load balancer.</p> <p>Appears in: - VirtualMachineServiceStatus</p> Field Description <code>ingress</code> LoadBalancerIngress array Ingress is a list containing ingress addresses for the load balancer. Traffic intended for the service should be sent to any of these ingress points."},{"location":"ref/api/v1alpha2/#networkdevicestatus","title":"NetworkDeviceStatus","text":"<p>NetworkDeviceStatus defines the network interface IP configuration including gateway, subnet mask and IP address as seen by OVF properties.</p> <p>Appears in: - NetworkStatus</p> Field Description <code>Gateway4</code> string Gateway4 is the gateway for the IPv4 address family for this device. <code>MacAddress</code> string MacAddress is the MAC address of the network device. <code>IPAddresses</code> string array IpAddresses represents one or more IP addresses assigned to the network device in CIDR notation, ex. \"192.0.2.1/16\"."},{"location":"ref/api/v1alpha2/#networkstatus","title":"NetworkStatus","text":"<p>NetworkStatus describes the observed state of the VM's network configuration.</p> <p>Appears in: - VirtualMachineTemplate</p> Field Description <code>Devices</code> NetworkDeviceStatus array Devices describe a list of current status information for each network interface that is desired to be attached to the VirtualMachineTemplate. <code>Nameservers</code> string array Nameservers describe a list of the DNS servers accessible by one of the VM's configured network devices."},{"location":"ref/api/v1alpha2/#ovfproperty","title":"OVFProperty","text":"<p>OVFProperty describes an OVF property associated with an image. OVF properties may be used in conjunction with the vAppConfig bootstrap provider to customize a VM during its creation.</p> <p>Appears in: - VirtualMachineImageStatus</p> Field Description <code>key</code> string Key describes the OVF property's key. <code>type</code> string Type describes the OVF property's type. <code>default</code> string Default describes the OVF property's default value."},{"location":"ref/api/v1alpha2/#persistentvolumeclaimvolumesource","title":"PersistentVolumeClaimVolumeSource","text":"<p>PersistentVolumeClaimVolumeSource is a composite for the Kubernetes corev1.PersistentVolumeClaimVolumeSource and instance storage options.</p> <p>Appears in: - VirtualMachineVolumeSource</p> Field Description <code>claimName</code> string claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims <code>readOnly</code> boolean readOnly Will force the ReadOnly setting in VolumeMounts. Default false. <code>instanceVolumeClaim</code> InstanceVolumeClaimVolumeSource InstanceVolumeClaim is set if the PVC is backed by instance storage."},{"location":"ref/api/v1alpha2/#resourcepoolspec","title":"ResourcePoolSpec","text":"<p>ResourcePoolSpec defines a Logical Grouping of workloads that share resource policies.</p> <p>Appears in: - VirtualMachineSetResourcePolicySpec</p> Field Description <code>name</code> string Name describes the name of the ResourcePool grouping. <code>reservations</code> VirtualMachineResourceSpec Reservations describes the guaranteed resources reserved for the ResourcePool. <code>limits</code> VirtualMachineResourceSpec Limits describes the limit to resources available to the ResourcePool."},{"location":"ref/api/v1alpha2/#tcpsocketaction","title":"TCPSocketAction","text":"<p>TCPSocketAction describes an action based on opening a socket.</p> <p>Appears in: - VirtualMachineReadinessProbeSpec</p> Field Description <code>port</code> IntOrString Port specifies a number or name of the port to access on the VM. If the format of port is a number, it must be in the range 1 to 65535. If the format of name is a string, it must be an IANA_SVC_NAME. <code>host</code> string Host is an optional host name to connect to. Host defaults to the VM IP."},{"location":"ref/api/v1alpha2/#vgpudevice","title":"VGPUDevice","text":"<p>VGPUDevice contains the configuration corresponding to a vGPU device.</p> <p>Appears in: - VirtualDevices</p> Field Description <code>profileName</code> string"},{"location":"ref/api/v1alpha2/#vsphereclustermodulestatus","title":"VSphereClusterModuleStatus","text":"<p>VSphereClusterModuleStatus describes the observed state of a vSphere cluster module.</p> <p>Appears in: - VirtualMachineSetResourcePolicyStatus</p> Field Description <code>groupName</code> string <code>moduleUUID</code> string <code>clusterMoID</code> string"},{"location":"ref/api/v1alpha2/#virtualdevices","title":"VirtualDevices","text":"<p>VirtualDevices contains information about the virtual devices associated with a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassHardware</p> Field Description <code>vgpuDevices</code> VGPUDevice array <code>dynamicDirectPathIODevices</code> DynamicDirectPathIODevice array"},{"location":"ref/api/v1alpha2/#virtualmachineadvancedspec","title":"VirtualMachineAdvancedSpec","text":"<p>VirtualMachineAdvancedSpec describes a set of optional, advanced VM configuration options.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>bootDiskCapacity</code> Quantity BootDiskCapacity is the capacity of the VM's boot disk -- the first disk from the VirtualMachineImage from which the VM was deployed. Please note it is not advised to change this value while the VM is running. Also, resizing the VM's boot disk may require actions inside of the guest to take advantage of the additional capacity. Finally, changing the size of the VM's boot disk, even increasing it, could adversely affect the VM. <code>defaultVolumeProvisioningMode</code> VirtualMachineVolumeProvisioningMode DefaultVolumeProvisioningMode specifies the default provisioning mode for persistent volumes managed by this VM. <code>changeBlockTracking</code> boolean ChangeBlockTracking is a flag that enables incremental backup support for this VM, a feature utilized by external backup systems such as VMware Data Recovery."},{"location":"ref/api/v1alpha2/#virtualmachinebootstrapcloudinitspec","title":"VirtualMachineBootstrapCloudInitSpec","text":"<p>VirtualMachineBootstrapCloudInitSpec describes the CloudInit configuration used to bootstrap the VM.</p> <p>Appears in: - VirtualMachineBootstrapSpec</p> Field Description <code>cloudConfig</code> CloudConfig CloudConfig describes a subset of a Cloud-Init CloudConfig, used to bootstrap the VM. Please note this field and RawCloudConfig are mutually exclusive. <code>rawCloudConfig</code> SecretKeySelector RawCloudConfig describes a key in a Secret resource that contains the CloudConfig data used to bootstrap the VM. The CloudConfig data specified by the key may be plain-text, base64-encoded, or gzipped and base64-encoded. Please note this field and CloudConfig are mutually exclusive. <code>sshAuthorizedKeys</code> string array SSHAuthorizedKeys is a list of public keys that CloudInit will apply to the guest's default user."},{"location":"ref/api/v1alpha2/#virtualmachinebootstraplinuxprepspec","title":"VirtualMachineBootstrapLinuxPrepSpec","text":"<p>VirtualMachineBootstrapLinuxPrepSpec describes the LinuxPrep configuration used to bootstrap the VM.</p> <p>Appears in: - VirtualMachineBootstrapSpec</p> Field Description <code>hardwareClockIsUTC</code> boolean HardwareClockIsUTC specifies whether the hardware clock is in UTC or local time. <code>timeZone</code> string TimeZone is a case-sensitive timezone, such as Europe/Sofia. Valid values are based on the tz (timezone) database used by Linux and other Unix systems. The values are strings in the form of \"Area/Location,\" in which Area is a continent or ocean name, and Location is the city, island, or other regional designation. Please see https://kb.vmware.com/s/article/2145518 for a list of valid time zones for Linux systems."},{"location":"ref/api/v1alpha2/#virtualmachinebootstrapspec","title":"VirtualMachineBootstrapSpec","text":"<p>VirtualMachineBootstrapSpec defines the desired state of a VM's bootstrap configuration.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>cloudInit</code> VirtualMachineBootstrapCloudInitSpec CloudInit may be used to bootstrap Linux guests with Cloud-Init or Windows guests that support Cloudbase-Init. The guest's networking stack is configured by Cloud-Init on Linux guests and Cloudbase-Init on Windows guests. Please note this bootstrap provider may not be used in conjunction with the other bootstrap providers. <code>linuxPrep</code> VirtualMachineBootstrapLinuxPrepSpec LinuxPrep may be used to bootstrap Linux guests. The guest's networking stack is configured by Guest OS Customization (GOSC). Please note this bootstrap provider may be used in conjunction with the VAppConfig bootstrap provider when wanting to configure the guest's network with GOSC but also send vApp/OVF properties into the guest. This bootstrap provider may not be used in conjunction with the CloudInit or Sysprep bootstrap providers. <code>sysprep</code> VirtualMachineBootstrapSysprepSpec Sysprep may be used to bootstrap Windows guests. The guest's networking stack is configured by Guest OS Customization (GOSC). Please note this bootstrap provider may be used in conjunction with the VAppConfig bootstrap provider when wanting to configure the guest's network with GOSC but also send vApp/OVF properties into the guest. This bootstrap provider may not be used in conjunction with the CloudInit or LinuxPrep bootstrap providers. <code>vAppConfig</code> VirtualMachineBootstrapVAppConfigSpec VAppConfig may be used to bootstrap guests that rely on vApp properties (how VMware surfaces OVF properties on guests) to transport data into the guest. The guest's networking stack may be configured using either vApp properties or GOSC. Many OVFs define one or more properties that are used by the guest to bootstrap its networking stack. If the VirtualMachineImage defines one or more properties like this, then they can be configured to use the network data provided for this VM at runtime by setting these properties to Go template strings. It is also possible to use GOSC to bootstrap this VM's network stack by configuring either the LinuxPrep or Sysprep bootstrap providers. Please note the VAppConfig bootstrap provider in conjunction with the LinuxPrep bootstrap provider is the equivalent of setting the v1alpha1 VM metadata transport to \"OvfEnv\". This bootstrap provider may not be used in conjunction with the CloudInit bootstrap provider."},{"location":"ref/api/v1alpha2/#virtualmachinebootstrapsysprepspec","title":"VirtualMachineBootstrapSysprepSpec","text":"<p>VirtualMachineBootstrapSysprepSpec describes the Sysprep configuration used to bootstrap the VM.</p> <p>Appears in: - VirtualMachineBootstrapSpec</p> Field Description <code>sysprep</code> Sysprep Sysprep is an object representation of a Windows sysprep.xml answer file. This field encloses all the individual keys listed in a sysprep.xml file. For more detailed information please see https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx. Please note this field and RawSysprep are mutually exclusive. <code>rawSysprep</code> SecretKeySelector RawSysprep describes a key in a Secret resource that contains an XML string of the Sysprep text used to bootstrap the VM. The data specified by the Secret key may be plain-text, base64-encoded, or gzipped and base64-encoded. Please note this field and Sysprep are mutually exclusive."},{"location":"ref/api/v1alpha2/#virtualmachinebootstrapvappconfigspec","title":"VirtualMachineBootstrapVAppConfigSpec","text":"<p>VirtualMachineBootstrapVAppConfigSpec describes the vApp configuration used to bootstrap the VM.</p> <p>Appears in: - VirtualMachineBootstrapSpec</p> Field Description <code>properties</code> KeyValueOrSecretKeySelectorPair array Properties is a list of vApp/OVF property key/value pairs. Please note this field and RawProperties are mutually exclusive. <code>rawProperties</code> string RawProperties is the name of a Secret resource in the same Namespace as this VM where each key/value pair from the Secret is used as a vApp key/value pair. Please note this field and Properties are mutually exclusive."},{"location":"ref/api/v1alpha2/#virtualmachineclasshardware","title":"VirtualMachineClassHardware","text":"<p>VirtualMachineClassHardware describes a virtual hardware resource specification.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>cpus</code> integer <code>memory</code> Quantity <code>devices</code> VirtualDevices <code>instanceStorage</code> InstanceStorage"},{"location":"ref/api/v1alpha2/#virtualmachineclasspolicies","title":"VirtualMachineClassPolicies","text":"<p>VirtualMachineClassPolicies describes the policy configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassSpec</p> Field Description <code>resources</code> VirtualMachineClassResources"},{"location":"ref/api/v1alpha2/#virtualmachineclassresources","title":"VirtualMachineClassResources","text":"<p>VirtualMachineClassResources describes the virtual hardware resource reservations and limits configuration to be used by a VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClassPolicies</p> Field Description <code>requests</code> VirtualMachineResourceSpec <code>limits</code> VirtualMachineResourceSpec"},{"location":"ref/api/v1alpha2/#virtualmachineclassspec","title":"VirtualMachineClassSpec","text":"<p>VirtualMachineClassSpec defines the desired state of VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClass</p> Field Description <code>controllerName</code> string ControllerName describes the name of the controller responsible for reconciling VirtualMachine resources that are realized from this VirtualMachineClass. When omitted, controllers reconciling VirtualMachine resources determine the default controller name from the environment variable DEFAULT_VM_CLASS_CONTROLLER_NAME. If this environment variable is not defined or empty, it defaults to vmoperator.vmware.com/vsphere. Once a non-empty value is assigned to this field, attempts to set this field to an empty value will be silently ignored. <code>hardware</code> VirtualMachineClassHardware Hardware describes the configuration of the VirtualMachineClass attributes related to virtual hardware. The configuration specified in this field is used to customize the virtual hardware characteristics of any VirtualMachine associated with this VirtualMachineClass. <code>policies</code> VirtualMachineClassPolicies Policies describes the configuration of the VirtualMachineClass attributes related to virtual infrastructure policy. The configuration specified in this field is used to customize various policies related to infrastructure resource consumption. <code>description</code> string Description describes the configuration of the VirtualMachineClass which is not related to virtual hardware or infrastructure policy. This field is used to address remaining specs about this VirtualMachineClass. <code>configSpec</code> json.RawMessage ConfigSpec describes additional configuration information for a VirtualMachine. The contents of this field are the VirtualMachineConfigSpec data object (https://bit.ly/3HDtiRu) marshaled to JSON using the discriminator field \"_typeName\" to preserve type information."},{"location":"ref/api/v1alpha2/#virtualmachineclassstatus","title":"VirtualMachineClassStatus","text":"<p>VirtualMachineClassStatus defines the observed state of VirtualMachineClass.</p> <p>Appears in: - VirtualMachineClass</p> Field Description <code>capabilities</code> string array Capabilities describes the class's observed capabilities. The capabilities are discerned when VM Operator reconciles a class and inspects its specification. Well-known capabilities include: * instance-storage * nvidia-gpu * sriov-net In addition to \"nvidia-gpu\", a capability is added for every nVidia profile name associated with the class. Every capability is also added to the resource's labels as VirtualMachineClassCapabilityLabel + Value. For example, if the capability is \"nvidia-gpu\" then the following label will be added to the resource: capability.class.vmoperator.vmware.com/nvidia-gpu. <code>conditions</code> Condition array Conditions describes the observed conditions of the VirtualMachineClass. <code>ready</code> boolean Ready describes whether the class's hardware can be realized in the cluster. This field is only set to true if all of the class resource's conditions have Status=True."},{"location":"ref/api/v1alpha2/#virtualmachineimageosinfo","title":"VirtualMachineImageOSInfo","text":"<p>VirtualMachineImageOSInfo describes the image's guest operating system.</p> <p>Appears in: - VirtualMachineImageStatus</p> Field Description <code>id</code> string ID describes the operating system ID. This value is also added to the image resource's labels as VirtualMachineImageOSIDLabel. <code>type</code> string Type describes the operating system type. This value is also added to the image resource's labels as VirtualMachineImageOSTypeLabel. <code>version</code> string Version describes the operating system version. This value is also added to the image resource's labels as VirtualMachineImageOSVersionLabel."},{"location":"ref/api/v1alpha2/#virtualmachineimageproductinfo","title":"VirtualMachineImageProductInfo","text":"<p>VirtualMachineImageProductInfo describes product information for an image.</p> <p>Appears in: - VirtualMachineImageStatus</p> Field Description <code>product</code> string Product is a general descriptor for the image. <code>vendor</code> string Vendor describes the organization/user that produced the image. <code>version</code> string Version describes the short-form version of the image. <code>fullVersion</code> string FullVersion describes the long-form version of the image."},{"location":"ref/api/v1alpha2/#virtualmachineimagespec","title":"VirtualMachineImageSpec","text":"<p>VirtualMachineImageSpec defines the desired state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>providerRef</code> LocalObjectRef ProviderRef is a reference to the resource that contains the source of this image's information."},{"location":"ref/api/v1alpha2/#virtualmachineimagestatus","title":"VirtualMachineImageStatus","text":"<p>VirtualMachineImageStatus defines the observed state of VirtualMachineImage.</p> <p>Appears in: - ClusterVirtualMachineImage - VirtualMachineImage</p> Field Description <code>name</code> string Name describes the display name of this image. <code>capabilities</code> string array Capabilities describes the image's observed capabilities. The capabilities are discerned when VM Operator reconciles an image. If the source of an image is an OVF in Content Library, then the capabilities are parsed from the OVF property capabilities.image.vmoperator.vmware.com as a comma-separated list of values. Well-known capabilities include: * cloud-init * nvidia-gpu * sriov-net Every capability is also added to the resource's labels as VirtualMachineImageCapabilityLabel + Value. For example, if the capability is \"cloud-init\" then the following label will be added to the resource: capability.image.vmoperator.vmware.com/cloud-init. <code>firmware</code> string Firmware describe the firmware type used by this image, ex. BIOS, EFI. <code>hardwareVersion</code> integer HardwareVersion describes the observed hardware version of this image. <code>osInfo</code> VirtualMachineImageOSInfo OSInfo describes the observed operating system information for this image. The OS information is also added to the image resource's labels. Please refer to VirtualMachineImageOSInfo for more information. <code>ovfProperties</code> OVFProperty array OVFProperties describes the observed OVF properties defined for this image. <code>productInfo</code> VirtualMachineImageProductInfo ProductInfo describes the observed product information for this image. <code>providerContentVersion</code> string ProviderContentVersion describes the content version from the provider item that this image corresponds to. If the provider of this image is a Content Library, this will be the version of the corresponding Content Library item. <code>providerItemID</code> string ProviderItemID describes the ID of the provider item that this image corresponds to. If the provider of this image is a Content Library, this ID will be that of the corresponding Content Library item. <code>conditions</code> Condition array Conditions describes the observed conditions for this image."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkdhcpoptionsstatus","title":"VirtualMachineNetworkDHCPOptionsStatus","text":"<p>VirtualMachineNetworkDHCPOptionsStatus describes the observed state of DHCP options.</p> <p>Appears in: - VirtualMachineNetworkDHCPStatus</p> Field Description <code>config</code> KeyValuePair array Config describes platform-dependent settings for the DHCP client. The key part is a unique number while the value part is the platform specific configuration command. For example on Linux and BSD systems using the file dhclient.conf output would be reported at system scope: key='1', value='timeout 60;' key='2', value='reboot 10;'. The output reported per interface would be: key='1', value='prepend domain-name-servers 192.0.2.1;' key='2', value='require subnet-mask, domain-name-servers;'. <code>enabled</code> boolean Enabled reports the status of the DHCP client services."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkdhcpstatus","title":"VirtualMachineNetworkDHCPStatus","text":"<p>VirtualMachineNetworkDHCPStatus describes the observed state of the client-side, system-wide DHCP settings for IP4 and IP6.</p> <p>Appears in: - VirtualMachineNetworkIPStackStatus - VirtualMachineNetworkInterfaceIPStatus</p> Field Description <code>ip4</code> VirtualMachineNetworkDHCPOptionsStatus IP4 describes the observed state of the IP4 DHCP client settings. <code>ip6</code> VirtualMachineNetworkDHCPOptionsStatus IP6 describes the observed state of the IP6 DHCP client settings."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkdnsstatus","title":"VirtualMachineNetworkDNSStatus","text":"<p>VirtualMachineNetworkDNSStatus describes the observed state of the guest's RFC 1034 client-side DNS settings.</p> <p>Appears in: - VirtualMachineNetworkIPStackStatus - VirtualMachineNetworkInterfaceStatus</p> Field Description <code>dhcp</code> boolean DHCP indicates whether or not dynamic host control protocol (DHCP) was used to configure DNS configuration. <code>domainName</code> string DomainName is the domain name portion of the DNS name. For example, the \"domain.local\" part of \"my-vm.domain.local\". <code>hostName</code> string HostName is the host name portion of the DNS name. For example, the \"my-vm\" part of \"my-vm.domain.local\". <code>nameservers</code> string array Nameservers is a list of the IP addresses for the DNS servers to use. IP4 addresses are specified using dotted decimal notation. For example, \"192.0.2.1\". IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373. <code>searchDomains</code> string array SearchDomains is a list of domains in which to search for hosts, in the order of preference."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkiproutegatewaystatus","title":"VirtualMachineNetworkIPRouteGatewayStatus","text":"<p>VirtualMachineNetworkIPRouteGatewayStatus describes the observed state of a guest network's IP route's next hop gateway.</p> <p>Appears in: - VirtualMachineNetworkIPRouteStatus</p> Field Description <code>device</code> string Device is the name of the device in the guest for which this gateway applies. <code>address</code> string Address is the IP4 or IP6 address of the gateway."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkiproutestatus","title":"VirtualMachineNetworkIPRouteStatus","text":"<p>VirtualMachineNetworkIPRouteStatus describes the observed state of a guest network's IP routes.</p> <p>Appears in: - VirtualMachineNetworkIPStackStatus - VirtualMachineNetworkRouteStatus</p> Field Description <code>gateway</code> VirtualMachineNetworkIPRouteGatewayStatus Gateway describes where to send the packets to next. <code>networkAddress</code> string NetworkAddress is the IP4 or IP6 address of the destination network. Addresses include the network's prefix length, ex. 192.168.0.0/24 or 2001:DB8:101::230:6eff:fe04:d9ff::/64. IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkipstackstatus","title":"VirtualMachineNetworkIPStackStatus","text":"<p>VirtualMachineNetworkIPStackStatus describes the observed state of a VM's IP stack.</p> <p>Appears in: - VirtualMachineNetworkStatus</p> Field Description <code>dhcp</code> VirtualMachineNetworkDHCPStatus DHCP describes the VM's observed, client-side, system-wide DHCP options. <code>dns</code> VirtualMachineNetworkDNSStatus DNS describes the VM's observed, client-side DNS configuration. <code>ipRoutes</code> VirtualMachineNetworkIPRouteStatus array IPRoutes contain the VM's routing tables for all address families. <code>kernelConfig</code> KeyValuePair array KernelConfig describes the observed state of the VM's kernel IP configuration settings. The key part contains a unique number while the value part contains the 'key=value' as provided by the underlying provider. For example, on Linux and/or BSD, the systcl -a output would be reported as: key='5', value='net.ipv4.tcp_keepalive_time = 7200'."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkinterfaceipaddrstatus","title":"VirtualMachineNetworkInterfaceIPAddrStatus","text":"<p>VirtualMachineNetworkInterfaceIPAddrStatus describes information about a specific IP address.</p> <p>Appears in: - VirtualMachineNetworkInterfaceIPStatus</p> Field Description <code>address</code> string Address is an IP4 or IP6 address and their network prefix length. An IP4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373. <code>lifetime</code> Time Lifetime describes when this address will expire. <code>origin</code> string Origin describes how this address was configured. <code>state</code> string State describes the state of this IP address."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkinterfaceipstatus","title":"VirtualMachineNetworkInterfaceIPStatus","text":"<p>VirtualMachineNetworkInterfaceIPStatus describes the observed state of a VM's network interface's IP configuration.</p> <p>Appears in: - VirtualMachineNetworkInterfaceStatus</p> Field Description <code>autoConfigurationEnabled</code> boolean AutoConfigurationEnabled describes whether or not ICMPv6 router solicitation requests are enabled or disabled from a given interface. These requests acquire an IP6 address and default gateway route from zero-to-many routers on the connected network. If not set then ICMPv6 is not available on this VM. <code>dhcp</code> VirtualMachineNetworkDHCPStatus DHCP describes the VM's observed, client-side, interface-specific DHCP options. <code>addresses</code> VirtualMachineNetworkInterfaceIPAddrStatus array Addresses describes observed IP addresses for this interface. <code>macAddr</code> string MACAddr describes the observed MAC address for this interface."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkinterfacespec","title":"VirtualMachineNetworkInterfaceSpec","text":"<p>VirtualMachineNetworkInterfaceSpec describes the desired state of a VM's network interface.</p> <p>Appears in: - VirtualMachineNetworkSpec</p> Field Description <code>name</code> string Name describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. This value is also used to rename the device inside the guest when the bootstrap provider is CloudInit. Please note it is up to the user to ensure the provided device name does not conflict with any other devices inside the guest, ex. dvd, cdrom, sda, etc. <code>network</code> PartialObjectRef Network is the name of the network resource to which this interface is connected. If no network is provided, then this interface will be connected to the Namespace's default network. <code>addresses</code> string array Addresses is an optional list of IP4 or IP6 addresses to assign to this interface. Please note this field is only supported if the connected network supports manual IP allocation. Please note IP4 and IP6 addresses must include the network prefix length, ex. 192.168.0.10/24 or 2001:db8:101::a/64. Please note this field may not contain IP4 addresses if DHCP4 is set to true or IP6 addresses if DHCP6 is set to true. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>dhcp4</code> boolean DHCP4 indicates whether or not this interface uses DHCP for IP4 networking. Please note this field is only supported if the network connection supports DHCP. Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway4 field. <code>dhcp6</code> boolean DHCP6 indicates whether or not this interface uses DHCP for IP6 networking. Please note this field is only supported if the network connection supports DHCP. Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway6 field. <code>gateway4</code> string Gateway4 is the default, IP4 gateway for this interface. Please note this field is only supported if the network connection supports manual IP allocation. If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. Please note the IP address must include the network prefix length, ex. 192.168.0.1/24. Please note this field is mutually exclusive with DHCP4. <code>gateway6</code> string Gateway6 is the primary IP6 gateway for this interface. Please note this field is only supported if the network connection supports manual IP allocation. If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. Please note the IP address must include the network prefix length, ex. 2001:db8:101::1/64. Please note this field is mutually exclusive with DHCP6. <code>mtu</code> integer MTU is the Maximum Transmission Unit size in bytes. Please note this feature is available only with the following bootstrap providers: CloudInit. <code>nameservers</code> string array Nameservers is a list of IP4 and/or IP6 addresses used as DNS nameservers. Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). Please note that Linux allows only three nameservers (https://linux.die.net/man/5/resolv.conf). <code>routes</code> VirtualMachineNetworkRouteSpec array Routes is a list of optional, static routes. Please note this feature is available only with the following bootstrap providers: CloudInit. <code>searchDomains</code> string array SearchDomains is a list of search domains used when resolving IP addresses with DNS. Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep)."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkinterfacestatus","title":"VirtualMachineNetworkInterfaceStatus","text":"<p>VirtualMachineNetworkInterfaceStatus describes the observed state of a VM's network interface.</p> <p>Appears in: - VirtualMachineNetworkStatus</p> Field Description <code>name</code> string Name describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. Please note this name is not related to the name of the device as it is surfaced inside of the guest. <code>ip</code> VirtualMachineNetworkInterfaceIPStatus IP describes the observed state of the interface's IP configuration. <code>dns</code> VirtualMachineNetworkDNSStatus DNS describes the observed state of the interface's DNS configuration."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkroutespec","title":"VirtualMachineNetworkRouteSpec","text":"<p>VirtualMachineNetworkRouteSpec defines a static route for a guest.</p> <p>Appears in: - VirtualMachineNetworkInterfaceSpec - VirtualMachineNetworkSpec</p> Field Description <code>to</code> string To is an IP4 or IP6 address. <code>via</code> string Via is an IP4 or IP6 address. <code>metric</code> integer Metric is the weight/priority of the route."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkspec","title":"VirtualMachineNetworkSpec","text":"<p>VirtualMachineNetworkSpec defines a VM's desired network configuration.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>network</code> PartialObjectRef Network is the optional name of the network resource to which this VM is connected. Please note if the Interfaces field is non-empty then this field is ignored. If networking is not disabled, no interfaces are defined, and this value is omitted, then the VM will be provided a single virtual network interface and connected to the Namespace's default network. <code>disabled</code> boolean Disabled is a flag that indicates whether or not to disable networking for this VM. When set to true, the VM is not configured with a default interface nor any specified from the Interfaces field. <code>hostName</code> string HostName is the value the guest uses as its host name. If omitted then the name of the VM will be used. Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). <code>interfaces</code> VirtualMachineNetworkInterfaceSpec array Interfaces is the list of network interfaces used by this VM. Please note this field is mutually exclusive with the following fields: DeviceName, Network, Addresses, DHCP4, DHCP6, Gateway4, Gateway6, MTU, Nameservers, Routes, and SearchDomains. <code>deviceName</code> string DeviceName describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. This value is also used to rename the device inside the guest when the bootstrap provider is CloudInit. Please note it is up to the user to ensure the provided device name does not conflict with any other devices inside the guest, ex. dvd, cdrom, sda, etc. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. If the Interfaces field is empty and this field is not specified, then the default interface's name will be eth0. <code>addresses</code> string array Addresses is an optional list of IP4 or IP6 addresses to assign to the VM. Please note this field is only supported if the connected network supports manual IP allocation. Please note IP4 and IP6 addresses must include the network prefix length, ex. 192.168.0.10/24 or 2001:db8:101::a/64. Please note this field may not contain IP4 addresses if DHCP4 is set to true or IP6 addresses if DHCP6 is set to true. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>dhcp4</code> boolean DHCP4 indicates whether or not to use DHCP for IP4 networking. Please note this field is only supported if the network connection supports DHCP. Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway4 field. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>dhcp6</code> boolean DHCP6 indicates whether or not to use DHCP for IP6 networking. Please note this field is only supported if the network connection supports DHCP. Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway6 field. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>gateway4</code> string Gateway4 is the default, IP4 gateway for this VM. Please note this field is only supported if the network connection supports manual IP allocation. If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. Please note this field is mutually exclusive with DHCP4. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>gateway6</code> string Gateway6 is the primary IP6 gateway for this VM. Please note this field is only supported if the network connection supports manual IP allocation. If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. Please note this field is mutually exclusive with DHCP6. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>mtu</code> integer MTU is the Maximum Transmission Unit size in bytes. Please note this feature is available only with the following bootstrap providers: CloudInit. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>nameservers</code> string array Nameservers is a list of IP4 and/or IP6 addresses used as DNS nameservers. Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). Please note that Linux allows only three nameservers (https://linux.die.net/man/5/resolv.conf). Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>routes</code> VirtualMachineNetworkRouteSpec array Routes is a list of optional, static routes. Please note this feature is available only with the following bootstrap providers: CloudInit. Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. <code>searchDomains</code> string array SearchDomains is a list of search domains used when resolving IP addresses with DNS. Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list."},{"location":"ref/api/v1alpha2/#virtualmachinenetworkstatus","title":"VirtualMachineNetworkStatus","text":"<p>VirtualMachineNetworkStatus defines the observed state of a VM's network configuration.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>interfaces</code> VirtualMachineNetworkInterfaceStatus array Interfaces describes the status of the VM's network interfaces. <code>primaryIP4</code> string PrimaryIP4 describes the VM's primary IP4 address. If the bootstrap provider is CloudInit then this value is set to the value of the VM's \"guestinfo.local-ipv4\" property. Please see https://bit.ly/3NJB534 for more information on how this value is calculated. If the bootstrap provider is anything else then this field is set to the value of the infrastructure VM's \"guest.ipAddress\" field. Please see https://bit.ly/3Au0jM4 for more information. <code>primaryIP6</code> string PrimaryIP6 describes the VM's primary IP6 address. If the bootstrap provider is CloudInit then this value is set to the value of the VM's \"guestinfo.local-ipv6\" property. Please see https://bit.ly/3NJB534 for more information on how this value is calculated. If the bootstrap provider is anything else then this field is set to the value of the infrastructure VM's \"guest.ipAddress\" field. Please see https://bit.ly/3Au0jM4 for more information. <code>dhcp</code> VirtualMachineNetworkDHCPStatus DHCP describes the VM's observed, client-side, system-wide DHCP options. <code>dns</code> VirtualMachineNetworkDNSStatus DNS describes the VM's observed, client-side DNS configuration. <code>ipRoutes</code> VirtualMachineNetworkIPRouteStatus array IPRoutes contain the VM's routing tables for all address families. <code>kernelConfig</code> KeyValuePair array KernelConfig describes the observed state of the VM's kernel IP configuration settings. The key part contains a unique number while the value part contains the 'key=value' as provided by the underlying provider. For example, on Linux and/or BSD, the systcl -a output would be reported as: key='5', value='net.ipv4.tcp_keepalive_time = 7200'."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequestsource","title":"VirtualMachinePublishRequestSource","text":"<p>VirtualMachinePublishRequestSource is the source of a publication request, typically a VirtualMachine resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>name</code> string Name is the name of the referenced object. If omitted this value defaults to the name of the VirtualMachinePublishRequest resource. <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequestspec","title":"VirtualMachinePublishRequestSpec","text":"<p>VirtualMachinePublishRequestSpec defines the desired state of a VirtualMachinePublishRequest.   All the fields in this spec are optional. This is especially useful when a DevOps persona wants to publish a VM without doing anything more than applying a VirtualMachinePublishRequest resource that has the same name as said VM in the same namespace as said VM.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>source</code> VirtualMachinePublishRequestSource Source is the source of the publication request, ex. a VirtualMachine resource. If this value is omitted then the publication controller checks to see if there is a resource with the same name as this VirtualMachinePublishRequest resource, an API version equal to spec.source.apiVersion, and a kind equal to spec.source.kind. If such a resource exists, then it is the source of the publication. <code>target</code> VirtualMachinePublishRequestTarget Target is the target of the publication request, ex. item information and a ContentLibrary resource. If this value is omitted, the controller uses spec.source.name + \"-image\" as the name of the published item. Additionally, when omitted the controller attempts to identify the target location by matching a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, w/ the label \"imageregistry.vmware.com/default\". Please note that while optional, if a VirtualMachinePublishRequest sans target information is applied to a namespace without a default publication target, then the VirtualMachinePublishRequest resource will be marked in error. <code>ttlSecondsAfterFinished</code> integer TTLSecondsAfterFinished is the time-to-live duration for how long this resource will be allowed to exist once the publication operation completes. After the TTL expires, the resource will be automatically deleted without the user having to take any direct action. If this field is unset then the request resource will not be automatically deleted. If this field is set to zero then the request resource is eligible for deletion immediately after it finishes."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequeststatus","title":"VirtualMachinePublishRequestStatus","text":"<p>VirtualMachinePublishRequestStatus defines the observed state of a VirtualMachinePublishRequest.</p> <p>Appears in: - VirtualMachinePublishRequest</p> Field Description <code>sourceRef</code> VirtualMachinePublishRequestSource SourceRef is the reference to the source of the publication request, ex. a VirtualMachine resource. <code>targetRef</code> VirtualMachinePublishRequestTarget TargetRef is the reference to the target of the publication request, ex. item information and a ContentLibrary resource. <code>completionTime</code> Time CompletionTime represents time when the request was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The value of this field should be equal to the value of the LastTransitionTime for the status condition Type=Complete. <code>startTime</code> Time StartTime represents time when the request was acknowledged by the controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. <code>attempts</code> integer Attempts represents the number of times the request to publish the VM has been attempted. <code>lastAttemptTime</code> Time LastAttemptTime represents the time when the latest request was sent. <code>imageName</code> string ImageName is the name of the VirtualMachineImage resource that is eventually realized in the same namespace as the VM and publication request after the publication operation completes. This field will not be set until the VirtualMachineImage resource is realized. <code>ready</code> boolean Ready is set to true only when the VM has been published successfully and the new VirtualMachineImage resource is ready. Readiness is determined by waiting until there is status condition Type=Complete and ensuring it and all other status conditions present have a Status=True. The conditions present will be: * SourceValid * TargetValid * Uploaded * ImageAvailable * Complete <code>conditions</code> Condition array Conditions is a list of the latest, available observations of the request's current state."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequesttarget","title":"VirtualMachinePublishRequestTarget","text":"<p>VirtualMachinePublishRequestTarget is the target of a publication request, typically a ContentLibrary resource.</p> <p>Appears in: - VirtualMachinePublishRequestSpec - VirtualMachinePublishRequestStatus</p> Field Description <code>item</code> VirtualMachinePublishRequestTargetItem Item contains information about the name of the object to which the VM is published. Please note this value is optional and if omitted, the controller will use spec.source.name + \"-image\" as the name of the published item. <code>location</code> VirtualMachinePublishRequestTargetLocation Location contains information about the location to which to publish the VM."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequesttargetitem","title":"VirtualMachinePublishRequestTargetItem","text":"<p>VirtualMachinePublishRequestTargetItem is the item part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the name of the published object. If the spec.target.location.apiVersion equals imageregistry.vmware.com/v1alpha1 and the spec.target.location.kind equals ContentLibrary, then this should be the name that will show up in vCenter Content Library, not the custom resource name in the namespace. If omitted then the controller will use spec.source.name + \"-image\". <code>description</code> string Description is the description to assign to the published object."},{"location":"ref/api/v1alpha2/#virtualmachinepublishrequesttargetlocation","title":"VirtualMachinePublishRequestTargetLocation","text":"<p>VirtualMachinePublishRequestTargetLocation is the location part of a publication request's target.</p> <p>Appears in: - VirtualMachinePublishRequestTarget</p> Field Description <code>name</code> string Name is the name of the referenced object. Please note an error will be returned if this field is not set in a namespace that lacks a default publication target. A default publication target is a resource with an API version equal to spec.target.location.apiVersion, a kind equal to spec.target.location.kind, and has the label \"imageregistry.vmware.com/default\". <code>apiVersion</code> string APIVersion is the API version of the referenced object. <code>kind</code> string Kind is the kind of referenced object."},{"location":"ref/api/v1alpha2/#virtualmachinereadinessgate","title":"VirtualMachineReadinessGate","text":"<p>VirtualMachineReadinessGate contains the reference to a VM condition.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>conditionType</code> string ConditionType refers to a condition in the VM's condition list with matching type."},{"location":"ref/api/v1alpha2/#virtualmachinereadinessprobespec","title":"VirtualMachineReadinessProbeSpec","text":"<p>VirtualMachineReadinessProbeSpec describes a probe used to determine if a VM is in a ready state. All probe actions are mutually exclusive.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>tcpSocket</code> TCPSocketAction TCPSocket specifies an action involving a TCP port. <code>guestHeartbeat</code> GuestHeartbeatAction GuestHeartbeat specifies an action involving the guest heartbeat status. <code>guestInfo</code> GuestInfoAction array GuestInfo specifies an action involving key/value pairs from GuestInfo. The elements are evaluated with the logical AND operator, meaning all expressions must evaluate as true for the probe to succeed. For example, a VM resource's probe definition could be specified as the following: guestInfo: - key:   ready value: true With the above configuration in place, the VM would not be considered ready until the GuestInfo key \"ready\" was set to the value \"true\". From within the guest operating system it is possible to set GuestInfo key/value pairs using the program \"vmware-rpctool,\" which is included with VM Tools. For example, the following command will set the key \"guestinfo.ready\" to the value \"true\": vmware-rpctool \"info-set guestinfo.ready true\" Once executed, the VM's readiness probe will be signaled and the VM resource will be marked as ready. <code>timeoutSeconds</code> integer TimeoutSeconds specifies a number of seconds after which the probe times out. Defaults to 10 seconds. Minimum value is 1. <code>periodSeconds</code> integer PeriodSeconds specifics how often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1."},{"location":"ref/api/v1alpha2/#virtualmachinereservedspec","title":"VirtualMachineReservedSpec","text":"<p>VirtualMachineReservedSpec describes a set of VM configuration options reserved for system use. Modification attempts by DevOps users will result in a validation error.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>resourcePolicyName</code> string ResourcePolicyName describes the name of a VirtualMachineSetResourcePolicy resource used to configure the VM's resource policy."},{"location":"ref/api/v1alpha2/#virtualmachineresourcespec","title":"VirtualMachineResourceSpec","text":"<p>VirtualMachineResourceSpec describes a virtual hardware policy specification.</p> <p>Appears in: - ResourcePoolSpec - VirtualMachineClassResources</p> Field Description <code>cpu</code> Quantity <code>memory</code> Quantity"},{"location":"ref/api/v1alpha2/#virtualmachineserviceport","title":"VirtualMachineServicePort","text":"<p>VirtualMachineServicePort describes the specification of a service port to be exposed by a VirtualMachineService. This VirtualMachineServicePort specification includes attributes that define the external and internal representation of the service port.</p> <p>Appears in: - VirtualMachineServiceSpec</p> Field Description <code>name</code> string Name describes the name to be used to identify this VirtualMachineServicePort. <code>protocol</code> string Protocol describes the Layer 4 transport protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". <code>port</code> integer Port describes the external port that will be exposed by the service. <code>targetPort</code> integer TargetPort describes the internal port open on a VirtualMachine that should be mapped to the external Port."},{"location":"ref/api/v1alpha2/#virtualmachineservicespec","title":"VirtualMachineServiceSpec","text":"<p>VirtualMachineServiceSpec defines the desired state of VirtualMachineService.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>type</code> VirtualMachineServiceType Type specifies a desired VirtualMachineServiceType for this VirtualMachineService. Supported types are ClusterIP, LoadBalancer, ExternalName. <code>ports</code> VirtualMachineServicePort array Ports specifies a list of VirtualMachineServicePort to expose with this VirtualMachineService. Each of these ports will be an accessible network entry point to access this service by. <code>selector</code> object (keys:string, values:string) Selector specifies a map of key-value pairs, also known as a Label Selector, that is used to match this VirtualMachineService with the set of VirtualMachines that should back this VirtualMachineService. <code>loadBalancerIP</code> string Only applies to VirtualMachineService Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying load balancer provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the provider does not support the feature. <code>loadBalancerSourceRanges</code> string array LoadBalancerSourceRanges is an array of IP addresses in the format of CIDRs, for example: 103.21.244.0/22 and 10.0.0.0/24. If specified and supported by the load balancer provider, this will restrict ingress traffic to the specified client IPs. This field will be ignored if the provider does not support the feature. <code>clusterIp</code> string clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies <code>externalName</code> string externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName."},{"location":"ref/api/v1alpha2/#virtualmachineservicestatus","title":"VirtualMachineServiceStatus","text":"<p>VirtualMachineServiceStatus defines the observed state of VirtualMachineService.</p> <p>Appears in: - VirtualMachineService</p> Field Description <code>loadBalancer</code> LoadBalancerStatus LoadBalancer contains the current status of the load balancer, if one is present."},{"location":"ref/api/v1alpha2/#virtualmachinesetresourcepolicyspec","title":"VirtualMachineSetResourcePolicySpec","text":"<p>VirtualMachineSetResourcePolicySpec defines the desired state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>resourcePool</code> ResourcePoolSpec <code>folder</code> string <code>clusterModuleGroups</code> string array"},{"location":"ref/api/v1alpha2/#virtualmachinesetresourcepolicystatus","title":"VirtualMachineSetResourcePolicyStatus","text":"<p>VirtualMachineSetResourcePolicyStatus defines the observed state of VirtualMachineSetResourcePolicy.</p> <p>Appears in: - VirtualMachineSetResourcePolicy</p> Field Description <code>clustermodules</code> VSphereClusterModuleStatus array"},{"location":"ref/api/v1alpha2/#virtualmachinespec","title":"VirtualMachineSpec","text":"<p>VirtualMachineSpec defines the desired state of a VirtualMachine.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>imageName</code> string ImageName describes the name of the image resource used to deploy this VM. This field may be used to specify the name of a VirtualMachineImage or ClusterVirtualMachineImage resource. The resolver first checks to see if there is a ClusterVirtualMachineImage with the specified name. If no such resource exists, the resolver then checks to see if there is a VirtualMachineImage resource with the specified name in the same Namespace as the VM being deployed. This field is optional in the cases where there exists a sensible default value, such as when there is a single VirtualMachineImage resource available in the same Namespace as the VM being deployed. <code>className</code> string Class describes the name of the VirtualMachineClass resource used to deploy this VM. This field is optional in the cases where there exists a sensible default value, such as when there is a single VirtualMachineClass resource available in the same Namespace as the VM being deployed. <code>storageClass</code> string StorageClass describes the name of a Kubernetes StorageClass resource used to configure this VM's storage-related attributes. Please see https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information on Kubernetes storage classes. This field is optional in the cases where there exists a sensible default value, such as when there is a single StorageClass resource available in the same Namespace as the VM being deployed. <code>bootstrap</code> VirtualMachineBootstrapSpec Bootstrap describes the desired state of the guest's bootstrap configuration. If omitted, then the bootstrap method is determined based on the guest identifier from the VirtualMachineImage. If the image's guest OS type is Windows, then the Sysprep bootstrap method is used; if Linux, the LinuxPrep method is used. Please note that defaulting to Sysprep for Windows images only works if the image uses a volume license key, otherwise the image's product ID is required. <code>network</code> VirtualMachineNetworkSpec Network describes the desired network configuration for the VM. Please note this value may be omitted entirely and the VM will be assigned a single, virtual network interface that is connected to the Namespace's default network. <code>powerState</code> VirtualMachinePowerState PowerState describes the desired power state of a VirtualMachine. Please note this field may be omitted when creating a new VM and will default to \"PoweredOn.\" However, once the field is set to a non-empty value, it may no longer be set to an empty value. Additionally, setting this value to \"Suspended\" is not supported when creating a new VM. The valid values when creating a new VM are \"PoweredOn\" and \"PoweredOff.\" An empty value is also allowed on create since this value defaults to \"PoweredOn\" for new VMs. <code>powerOffMode</code> VirtualMachinePowerOpMode PowerOffMode describes the desired behavior when powering off a VM. There are three, supported power off modes: Hard, Soft, and TrySoft. The first mode, Hard, is the equivalent of a physical system's power cord being ripped from the wall. The Soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully shutdown the VM. Its variant, TrySoft, first attempts a graceful shutdown, and if that fails or the VM is not in a powered off state after five minutes, the VM is halted. If omitted, the mode defaults to TrySoft. <code>suspendMode</code> VirtualMachinePowerOpMode SuspendMode describes the desired behavior when suspending a VM. There are three, supported suspend modes: Hard, Soft, and TrySoft. The first mode, Hard, is where vSphere suspends the VM to disk without any interaction inside of the guest. The Soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully suspend the VM. Its variant, TrySoft, first attempts a graceful suspend, and if that fails or the VM is not in a put into standby by the guest after five minutes, the VM is suspended. If omitted, the mode defaults to TrySoft. <code>nextRestartTime</code> string NextRestartTime may be used to restart the VM, in accordance with RestartMode, by setting the value of this field to \"now\" (case-insensitive). A mutating webhook changes this value to the current time (UTC), which the VM controller then uses to determine the VM should be restarted by comparing the value to the timestamp of the last time the VM was restarted. Please note it is not possible to schedule future restarts using this field. The only value that users may set is the string \"now\" (case-insensitive). <code>restartMode</code> VirtualMachinePowerOpMode RestartMode describes the desired behavior for restarting a VM when spec.nextRestartTime is set to \"now\" (case-insensitive). There are three, supported suspend modes: Hard, Soft, and TrySoft. The first mode, Hard, is where vSphere resets the VM without any interaction inside of the guest. The Soft mode requires the VM's guest to have VM Tools installed and asks the guest to restart the VM. Its variant, TrySoft, first attempts a soft restart, and if that fails or does not complete within five minutes, the VM is hard reset. If omitted, the mode defaults to TrySoft. <code>volumes</code> VirtualMachineVolume array Volumes describes a list of volumes that can be mounted to the VM. <code>readinessProbe</code> VirtualMachineReadinessProbeSpec ReadinessProbe describes a probe used to determine the VM's ready state. <code>readinessGates</code> VirtualMachineReadinessGate array ReadinessGates, if specified, will be evaluated to determine the VM's readiness. A VM is ready when its readiness probe, if specified, is true AND all of the conditions specified by the readiness gates have a status equal to \"True\". <code>advanced</code> VirtualMachineAdvancedSpec Advanced describes a set of optional, advanced VM configuration options. <code>reserved</code> VirtualMachineReservedSpec Reserved describes a set of VM configuration options reserved for system use. Please note attempts to modify the value of this field by a DevOps user will result in a validation error."},{"location":"ref/api/v1alpha2/#virtualmachinestatus","title":"VirtualMachineStatus","text":"<p>VirtualMachineStatus defines the observed state of a VirtualMachine instance.</p> <p>Appears in: - VirtualMachine</p> Field Description <code>image</code> LocalObjectRef Image is a reference to the VirtualMachineImage resource used to deploy this VM. <code>class</code> LocalObjectRef Class is a reference to the VirtualMachineClass resource used to deploy this VM. <code>host</code> string Host describes the hostname or IP address of the infrastructure host where the VM is executed. <code>powerState</code> VirtualMachinePowerState PowerState describes the observed power state of the VirtualMachine. <code>conditions</code> Condition array Conditions describes the observed conditions of the VirtualMachine. <code>network</code> VirtualMachineNetworkStatus Network describes the observed state of the VM's network configuration. Please note much of the network status information is only available if the guest has VM Tools installed. <code>uniqueID</code> string UniqueID describes a unique identifier that is provided by the underlying infrastructure provider, such as vSphere. <code>biosUUID</code> string BiosUUID describes a unique identifier provided by the underlying infrastructure provider that is exposed to the Guest OS BIOS as a unique hardware identifier. <code>instanceUUID</code> string InstanceUUID describes the unique instance UUID provided by the underlying infrastructure provider, such as vSphere. <code>volumes</code> VirtualMachineVolumeStatus array Volumes describes a list of current status information for each Volume that is desired to be attached to the VM. <code>changeBlockTracking</code> boolean ChangeBlockTracking describes the CBT enablement status on the VM. <code>zone</code> string Zone describes the availability zone where the VirtualMachine has been scheduled. Please note this field may be empty when the cluster is not zone-aware. <code>lastRestartTime</code> Time LastRestartTime describes the last time the VM was restarted."},{"location":"ref/api/v1alpha2/#virtualmachinevolume","title":"VirtualMachineVolume","text":"<p>VirtualMachineVolume represents a named volume in a VM.</p> <p>Appears in: - VirtualMachineSpec</p> Field Description <code>name</code> string Name represents the volume's name. Must be a DNS_LABEL and unique within the VM. <code>persistentVolumeClaim</code> PersistentVolumeClaimVolumeSource PersistentVolumeClaim represents a reference to a PersistentVolumeClaim in the same namespace. More information is available at https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims."},{"location":"ref/api/v1alpha2/#virtualmachinevolumesource","title":"VirtualMachineVolumeSource","text":"<p>VirtualMachineVolumeSource represents the source location of a volume to mount. Only one of its members may be specified.</p> <p>Appears in: - VirtualMachineVolume</p> Field Description <code>persistentVolumeClaim</code> PersistentVolumeClaimVolumeSource PersistentVolumeClaim represents a reference to a PersistentVolumeClaim in the same namespace. More information is available at https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims."},{"location":"ref/api/v1alpha2/#virtualmachinevolumestatus","title":"VirtualMachineVolumeStatus","text":"<p>VirtualMachineVolumeStatus defines the observed state of a VirtualMachineVolume instance.</p> <p>Appears in: - VirtualMachineStatus</p> Field Description <code>name</code> string Name is the name of the attached volume. <code>attached</code> boolean Attached represents whether a volume has been successfully attached to the VirtualMachine or not. <code>diskUUID</code> string DiskUUID represents the underlying virtual disk UUID and is present when attachment succeeds. <code>error</code> string Error represents the last error seen when attaching or detaching a volume.  Error will be empty if attachment succeeds."},{"location":"ref/api/v1alpha2/#virtualmachinewebconsolerequestspec","title":"VirtualMachineWebConsoleRequestSpec","text":"<p>VirtualMachineWebConsoleRequestSpec describes the desired state for a web console request to a VM.</p> <p>Appears in: - VirtualMachineWebConsoleRequest</p> Field Description <code>name</code> string Name is the name of a VM in the same Namespace as this web console request. <code>publicKey</code> string PublicKey is used to encrypt the status.response. This is expected to be a RSA OAEP public key in X.509 PEM format."},{"location":"ref/api/v1alpha2/#virtualmachinewebconsolerequeststatus","title":"VirtualMachineWebConsoleRequestStatus","text":"<p>VirtualMachineWebConsoleRequestStatus describes the observed state of the request.</p> <p>Appears in: - VirtualMachineWebConsoleRequest</p> Field Description <code>response</code> string Response will be the authenticated ticket corresponding to this web console request. <code>expiryTime</code> Time ExpiryTime is the time at which access via this request will expire. <code>proxyAddr</code> string ProxyAddr describes the host address and optional port used to access the VM's web console. The value could be a DNS entry, IPv4, or IPv6 address, followed by an optional port. For example, valid values include: DNS * host.com * host.com:6443 IPv4 * 1.2.3.4 * 1.2.3.4:6443 IPv6 * 1234123412341234:1234 * [1234123412341234:1234]:6443 * 12341234:0000:0000:0000:1234:1234 * 12341234:::1234 * [12341234:::1234]:6443 In other words, the field may be set to any value that is parsable by Go's https://pkg.go.dev/net#ResolveIPAddr and https://pkg.go.dev/net#ParseIP functions."},{"location":"ref/config/","title":"Configuration","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#115)</p>"},{"location":"ref/config/manager/","title":"Manager Pod","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#116)</p>"},{"location":"ref/proj/","title":"Project","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#117)</p>"},{"location":"ref/proj/build/","title":"Build Reference","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#118)</p>"},{"location":"ref/proj/build/#build-with-docker","title":"Build with Docker","text":"<p>By far the simplest method for building VM Operator is with Docker.</p>"},{"location":"ref/proj/build/#docker-build-requirements","title":"Docker Build Requirements","text":"<p>This project has very few build requirements, but there are still one or two items of which to be aware. Also, please note these are the requirements to build VM Operator, not run it.</p> Requirement Version Operating System Linux, macOS Docker &gt;=21.0"},{"location":"ref/proj/build/#build-the-container-image","title":"Build the Container Image","text":"<p>The following one-line command is the quickest, simplest, and most deterministic approach to building the VM Operator container image:</p> <pre><code>make docker-build\n</code></pre>"},{"location":"ref/proj/build/#build-with-go","title":"Build with Go","text":"<p>The other option is to build the VM Operator binaries directly with Golang.</p>"},{"location":"ref/proj/build/#go-build-requirements","title":"Go Build Requirements","text":"<p>Building VM Operator with Go has the following requirements:</p> Requirement Version Operating System Linux, macOS Go &gt;=1.19 Git &gt;= 2.0"},{"location":"ref/proj/build/#build-the-manager","title":"Build the Manager","text":"<p>The primary artifact for VM Operator is the <code>manager</code> binary:</p> <pre><code>make manager\n</code></pre>"},{"location":"ref/proj/build/#build-the-web-console-validator","title":"Build the Web Console Validator","text":"<p>The other artifact is the <code>web-console-validator</code> binary that is used on vSphere Supervisors to enable the web console feature via <code>kubectl</code>:</p> <pre><code>make web-console-validator\n</code></pre>"},{"location":"ref/proj/docs/","title":"Writing Documentation","text":"<p>This page outlines how to write documentation for VM Operator.</p>"},{"location":"ref/proj/docs/#go-docs","title":"Go Docs","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#94)</p>"},{"location":"ref/proj/docs/#project-docs","title":"Project Docs","text":"<p>The project documentation lives in the ./docs directory and is written in Markdown. This section reviews the project documentation structure and examples for writing high-quality documentation.</p>"},{"location":"ref/proj/docs/#structure","title":"Structure","text":"<p>The project documentation adheres to a specific structure under the <code>docs</code> directory:</p> <pre><code>docs\n|-- README.md\n|-- SECTION1\n|   |-- SECTION1/README.md\n|   |-- SECTION1/topic1.md\n|   |-- SECTION1/topic2.md\n|-- SECTION2\n    |-- SECTION2/README.md\n    |-- SECTION2/topic1.md\n    |-- SUBSECTION1\n        |-- SECTION2/SUBSECTION1/README.md\n        |-- SECTION2/SUBSECTION1/topic1.md\n        |-- SECTION2/SUBSECTION1/topic2.md\n        |-- SECTION2/SUBSECTION1/topic3.md\n</code></pre> <ul> <li> <p>The <code>docs</code> directory represents the root section</p> </li> <li> <p>The file layout is based on sections, with each section getting its own directory.</p> </li> <li> <p>Do not modify the top-level sections unless you have cleared it with the project leadership. These are: <code>Getting Started</code>, <code>Concepts</code>, <code>Tutorials</code>, and <code>Reference</code>.</p> </li> <li> <p>Every section should have a <code>README.md</code> that summarizes the contents of the section. It does not matter if the section has a single topic in it, if there's a section, then it must have a <code>README.md</code>. Besides good organization, there is another reason this is important that will be reviewed later.</p> </li> <li> <p>The documentation will not appear unless added to the <code>nav</code> section in the project's <code>mkdocs.yml</code> file, ex.:</p> mkdocs.yml<pre><code>nav:\n- Home: README.md\n- Getting Started:\n- start/README.md\n- Quickstart: start/quick.md\n- Talk to Us: start/help.md\n- Contribute:\n- start/contrib/README.md\n- Suggest a Change: start/contrib/suggest-change.md\n- Report an Issue: start/contrib/report-issue.md\n- Submit a Change: start/contrib/submit-change.md\n- About:\n- start/about/README.md\n- Roadmap: start/about/roadmap.md\n- Release Notes: start/about/release-notes.md\n- License: start/about/license.md\n- Concepts:\n- concepts/README.md\n- Workloads:\n- concepts/workloads/README.md\n- VirtualMachine: concepts/workloads/vm.md\n- VirtualMachineClass: concepts/workloads/vm-class.md\n- WebConsoleRequest: concepts/workloads/vm-web-console.md\n- Guest Customization: concepts/workloads/guest.md\n- Images:\n- concepts/images/README.md\n- VirtualMachineImage: concepts/images/vm-image.md\n- Publish a VM Image: concepts/images/pub-vm-image.md\n- Services &amp; Networking:\n- concepts/services-networking/README.md\n- VirtualMachineService: concepts/services-networking/vm-service.md\n- Guest Network Config: concepts/services-networking/guest-net-config.md\n- Tutorials:\n- tutorials/README.md\n- Deploy VM:\n- tutorials/deploy-vm/README.md\n- With Cloud-Init: tutorials/deploy-vm/cloudinit.md\n- With vAppConfig: tutorials/deploy-vm/vappconfig.md\n- Troubleshooting:\n- tutorials/troubleshooting/README.md\n- Get a Console Session: tutorials/troubleshooting/get-console-session.md\n- Reference:\n- ref/README.md\n- API:\n- ref/api/README.md\n- v1alpha1: ref/api/v1alpha1.md\n- Configuration:\n- ref/config/README.md\n- Manager Pod: ref/config/manager.md\n- Project:\n- ref/proj/README.md\n- Build from Source: ref/proj/build.md\n- Create a Release: ref/proj/release.md\n- Writing Documentation: ref/proj/docs.md\n</code></pre> </li> </ul>"},{"location":"ref/proj/docs/#examples","title":"Examples","text":"<p>The guidelines for writing project documentation are as follows:</p> <ul> <li> <p>The documentation is based on the Kubernetes documentation, so if you have a question, the first place to look for answers and inspiration is https://kubernetes.io/docs/.</p> </li> <li> <p>Samples for the level of detail and quality associated with this project's documentation may also be found inside this project as well:</p> <ul> <li>Example of a section <code>README.md</code></li> <li>Example of a concept</li> <li>Example of a tutorial</li> </ul> </li> </ul>"},{"location":"ref/proj/docs/#preview-changes","title":"Preview Changes","text":"<p>Once documentation is written, it is important to see how it looks in order to review it. There are a few ways to preview the VM Operator project documentation:</p>"},{"location":"ref/proj/docs/#preview-with-pull-request","title":"Preview with Pull Request","text":"<p>First, and perhaps the simplest way to preview documentation is by opening a pull request. If any changes are detected under the <code>./docs</code> folder, a link is automatically added at the bottom of a pull request's description that points to a temporary, public URL that hosts the documentation from the pull request. For example, at the bottom of the description of pull request that added this section, vmware-tanzu/vm-operator/pull#190, the following was added automatically:</p> <p> Documentation preview : https://vm-operator--190.org.readthedocs.build/en/190/</p> <p>This option makes it trivial for pull request reviewers to verify doc updates. Additionally, because the process used to build documentation for a pull request is the same as the one for <code>main</code>, this option is a great way to assert that changes to files such as <code>mkdocs.yml</code> or <code>.readthedocs.yaml</code>, have not broken the ability to build the documentation.</p>"},{"location":"ref/proj/docs/#preview-locally","title":"Preview Locally","text":"<p>Understandably, some people would like to preview changes prior to opening a pull request. There are two ways to build and preview the documentation locally:</p> <ul> <li> <p>With Python3</p> <pre><code>make docs-serve-python\n</code></pre> </li> <li> <p>With Docker</p> <pre><code>make docs-server-docker\n</code></pre> </li> </ul> <p>Both of the above options have their strengths and weaknesses. Using Python3 is faster, but adds the complexity of knowing how to debug issues with a local Python3 installation if any should arise. The Docker option is more portable, but only if Docker is already installed. After choosing a command and running it:</p> <ul> <li>The documentation is available at http://127.0.0.1:8000/vmware-tanzu/vm-operator/.</li> <li>The local server will automatically reload if any changes are detected to content under the <code>./docs</code> folder. </li> </ul> <p>Docker and <code>0.0.0.0</code></p> <p>If the Docker option is selected to preview the documentation locally, the last line of the output will be <code>Serving on http://0.0.0.0:8000/vmware-tanzu/vm-operator/</code>. However, the site is still accessed via http://127.0.0.1:8000/vmware-tanzu/vm-operator/. So what gives with the <code>0.0.0.0</code>?</p> <p>The IP address <code>0.0.0.0</code> instructs the web server to bind the port over which the content is accessed to all, available IP addresses. Normally <code>mkdocs</code> just binds the web server port to <code>127.0.0.1</code>, but if that was used inside of the container, the web server would not be accessible via the web browser on the system where Docker is running.</p>"},{"location":"ref/proj/release/","title":"Release Process","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#119)</p>"},{"location":"ref/proj/release/#project-stages","title":"Project Stages","text":"<p>This project has three parallels stages of release:</p> Name Description <code>unstable</code> The tip or HEAD of the <code>main</code> branch is referred to as <code>unstable</code> <code>staged</code> A commit tagged with the suffix <code>-rc\\d+</code> such as <code>v0.3.1-rc2</code> is a <code>staged</code> release. These are release candidates. <code>stable</code> A commit tagged with a version sans <code>-rc\\d+</code> suffix such as <code>v0.3.1</code> is a <code>stable</code> release. <p>There are no steps necessary to create an <code>unstable</code> release as that happens automatically whenever an untagged commit is pushed to <code>main</code>. However, the following workflow should be used when tagging a <code>staged</code> release candidate or <code>stable</code> release.</p> <ol> <li>Review outstanding issues &amp; pull requests</li> <li>Prepare release notes</li> <li>Commit &amp; pull request</li> <li>Tag the release</li> </ol>"},{"location":"ref/proj/release/#review-issues-pull-requests","title":"Review Issues &amp; Pull Requests","text":"<p>The first step to a release is to review the outstanding issues and pull requests that are tagged for the release in question.</p> <p>If there are outstanding issues requiring changes or pending pull requests to be merged, handle those prior to tagging any commit as a release candidate or release.</p> <p>It is highly recommended that pull requests be merged synchronously after rebasing each subsequent one off of the new tip of <code>main</code>. Remember, while GitHub will update a pull request as in conflict if a change to <code>main</code> results in a merge conflict with the pull request, GitHub will not force a new build to spawn unless the pull request is actually updated.</p> <p>At the very minimum a pull request's build should be re-executed prior to the pull request being merged if <code>main</code> has changed since the pull request was opened.</p>"},{"location":"ref/proj/release/#prepare-release-notes","title":"Prepare Release Notes","text":"<p>Update the release notes at <code>.docs/about/release-notes.md</code>. This file is the project's authoritative changelog and should reflect new features, fixes, and any significant changes.</p> <p>The most recent, <code>stable</code> version of the release notes are always available online at VM Operator's documentation site.</p>"},{"location":"ref/proj/release/#commit-pull-request","title":"Commit &amp; Pull Request","text":"<p>Once all outstanding issues and pull requests are handled, the release notes are updated, it's time to create a commit.</p> <p>Please make sure that the changes to the release notes and version files are a part of the same commit. This makes identifying the aspects of a release, staged or otherwise, far easier for future developers.</p> <p>A release's commit message can either be a reflection of the release notes or something simple. Either way the commit message should have the following subject format and first line in its body:</p> <pre><code>Release Candidate 0.3.1-rc1\n\nThis patch marks release candidate 0.3.1-rc1.\n</code></pre> <p>If the commit message is longer it should simply reflect the same information from the release notes.</p> <p>Once committed push the change to a fork and open a pull request. Even though this commit marks a staged or official release, the pull request system is still used to assure that the build completes successfully and there are no unforeseen errors.</p>"},{"location":"ref/proj/release/#tag-the-release","title":"Tag the Release","text":"<p>Once the pull request marking the <code>staged</code> or <code>stable</code> release has been merged into <code>upstream</code>'s <code>main</code> it's time to tag the release.</p>"},{"location":"ref/proj/release/#tag-format","title":"Tag Format","text":"<p>The release tag should follow a prescribed format depending upon the release type:</p> Release Type Tag Format Example <code>staged</code> vMAJOR.MINOR.PATCH-rc[0-9] v0.3.1-rc1 <code>stable</code> vMAJOR.MINOR.PATCH v0.3.1"},{"location":"ref/proj/release/#tag-methods","title":"Tag Methods","text":"<p>There are two ways to tag a release:</p> <ol> <li>GitHub Releases</li> <li>Command Line</li> </ol>"},{"location":"ref/proj/release/#command-line","title":"Command Line","text":"<p>If tagging a release via the command line be sure to fetch the latest changes from <code>upstream</code>'s <code>main</code> and either merge them into your local copy of <code>main</code> or reset the local copy to reflect <code>upstream</code> prior to creating any tags.</p> <p>The following combination of commands can be used to create a tag for 0.3.1 Release Candidate 1:</p> <pre><code>git fetch upstream &amp;&amp; \\\ngit checkout main &amp;&amp; \\\ngit reset --hard upstream/main &amp;&amp; \\\ngit tag -a -m v0.3.1-rc1 v0.3.1-rc1\n</code></pre> <p>The above example combines a few operations:</p> <ol> <li>The first command fetches the <code>upstream</code> changes</li> <li>The local <code>main</code> branch is checked out</li> <li>The local <code>main</code> branch is hard reset to <code>upstream/main</code></li> <li>An annotated tag is created on <code>main</code> for <code>v0.3.1-rc1</code>, or 0.3.1 Release Candidate 1, with a tag message of <code>v0.3.1-rc1</code>.</li> </ol> <p>Please note that the third step will erase any changes that exist only in the local <code>main</code> branch that do not also exist in the remote, upstream copy. However, if the two branches are not equal this method should not be used to create a tag anyway.</p> <p>The above steps do not actually push the tag upstream. This is to allow for one final review of all the changes before doing so since the appearance of a new, annotated tag in the repository will cause the project's build system to automatically kick off a build that will result in the release of a <code>staged</code> or <code>stable</code> release. For <code>stable</code> releases the project's documentation will also be updated.</p> <p>Once positive everything looks good simply execute the following command to push the tag to the <code>upstream</code> repository:</p> <pre><code>git push upstream v0.3.1-rc1\n</code></pre>"},{"location":"start/","title":"Getting Started","text":"<p>This documentation provides information on:</p> <ul> <li>How to ask for help</li> <li>Contributing to VM Operator</li> <li>The project in general</li> <li>Concepts related to VM Operator</li> <li>Tutorials on useful tasks</li> <li>A reference section for everything else</li> </ul>"},{"location":"start/help/","title":"Talk to Us","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#96)</p>"},{"location":"start/quick/","title":"Quickstart","text":"<p>This page walks through the quickest way to try out VM Operator!</p>"},{"location":"start/quick/#requirements","title":"Requirements","text":"<p>Currently VM Operator is only available with VMware vSphere 7.0+ and VM Service on Supervisor. Please refer to the following documentation for getting started with Supervisor and VM Service:</p> <ul> <li>Configuring and Managing a Supervisor (7.0, 8.0)</li> <li>Deploying and Managing Virtual Machines (7.0, 8.0)</li> </ul> <p>The following steps will also assume there is a <code>Namespace</code> (7.0, 8.0) named <code>my-namespace</code> and:</p> <ul> <li>You have have write permissions in this namespace</li> <li>There is an NSX-T network or vSphere Distributed network available to this namespace</li> <li>There is a VM Class named <code>small</code> available to this namespace</li> <li>There is a VM Image named <code>photon4</code> available to this namespace</li> <li>There is a storage class named <code>iscsi</code> available to this namespace</li> </ul>"},{"location":"start/quick/#create-a-vm","title":"Create a VM","text":"<p>Once you are logged into the Supervisor with, a new VM may be realized using the following YAML:</p> vm-example.yaml<pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: my-vm\nspec:\nimageName: photon4\nclassName: small\nstorageClass: iscsi\nvmMetadata:\ntransport: CloudInit\npowerState: poweredOn\n</code></pre> <p>Create the new VM with the following command:</p> <pre><code>kubectl apply -n my-namespace -f https://raw.githubusercontent.com/vmware-tanzu/vm-operator/main/docs/concepts/workloads/vm-example.yaml\n</code></pre> <p>And that's it! Use <code>kubectl</code> to watch the VM until it is powered on with an IP address, at which point you have successfully deployed a workload on Kubernetes with VM Operator.</p>"},{"location":"start/about/","title":"About","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#100)</p>"},{"location":"start/about/license/","title":"Licensing","text":"LICENSE.txt<pre><code>VM Operator\nCopyright 2021 VMware, Inc.\n\nThe Apache 2.0 license (the \"License\") set forth below applies to all parts of the VM Operator project. You may not use this file except in compliance with the License.\n\nApache License \n\nVersion 2.0, January 2004 \nhttp://www.apache.org/licenses/ \n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION \n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the\ncopyright owner that is granting the License.  \n\n\"Legal Entity\" shall mean the union of the acting entity and all other\nentities that control, are controlled by, or are under common control\nwith that entity. For the purposes of this definition, \"control\" means\n(i) the power, direct or indirect, to cause the direction or management\nof such entity, whether by contract or otherwise, or (ii) ownership\nof fifty percent (50%) or more of the outstanding shares, or (iii)\nbeneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.  \n\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation source,\nand configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation\nor translation of a Source form, including but not limited to compiled\nobject code, generated documentation, and conversions to other media\ntypes.  \n\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a copyright\nnotice that is included in or attached to the work (an example is provided\nin the Appendix below).  \n\n\"Derivative Works\" shall mean any work, whether in Source or Object form,\nthat is based on (or derived from) the Work and for which the editorial\nrevisions, annotations, elaborations, or other modifications represent,\nas a whole, an original work of authorship. For the purposes of this\nLicense, Derivative Works shall not include works that remain separable\nfrom, or merely link (or bind by name) to the interfaces of, the Work\nand Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the\noriginal version of the Work and any modifications or additions to\nthat Work or Derivative Works thereof, that is intentionally submitted\nto Licensor for inclusion in the Work by the copyright owner or by an\nindividual or Legal Entity authorized to submit on behalf of the copyright\nowner. For the purposes of this definition, \"submitted\" means any form of\nelectronic, verbal, or written communication sent to the Licensor or its\nrepresentatives, including but not limited to communication on electronic\nmailing lists, source code control systems, and issue tracking systems\nthat are managed by, or on behalf of, the Licensor for the purpose of\ndiscussing and improving the Work, but excluding communication that is\nconspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\n2. Grant of Copyright License.\nSubject to the terms and conditions of this License, each Contributor\nhereby grants to You a perpetual, worldwide, non-exclusive, no-charge,\nroyalty-free, irrevocable copyright license to reproduce, prepare\nDerivative Works of, publicly display, publicly perform, sublicense, and\ndistribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License.\nSubject to the terms and conditions of this License, each Contributor\nhereby grants to You a perpetual, worldwide, non-exclusive, no-charge,\nroyalty- free, irrevocable (except as stated in this section) patent\nlicense to make, have made, use, offer to sell, sell, import, and\notherwise transfer the Work, where such license applies only to those\npatent claims licensable by such Contributor that are necessarily\ninfringed by their Contribution(s) alone or by combination of\ntheir Contribution(s) with the Work to which such Contribution(s)\nwas submitted. If You institute patent litigation against any entity\n(including a cross-claim or counterclaim in a lawsuit) alleging that the\nWork or a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses granted\nto You under this License for that Work shall terminate as of the date\nsuch litigation is filed.\n\n4. Redistribution.\nYou may reproduce and distribute copies of the Work or Derivative Works\nthereof in any medium, with or without modifications, and in Source or\nObject form, provided that You meet the following conditions:\n\n  a. You must give any other recipients of the Work or Derivative Works\n     a copy of this License; and\n\n  b. You must cause any modified files to carry prominent notices stating\n     that You changed the files; and\n\n  c. You must retain, in the Source form of any Derivative Works that\n     You distribute, all copyright, patent, trademark, and attribution\n     notices from the Source form of the Work, excluding those notices\n     that do not pertain to any part of the Derivative Works; and\n\n  d. If the Work includes a \"NOTICE\" text file as part of its\n     distribution, then any Derivative Works that You distribute must\n     include a readable copy of the attribution notices contained\n     within such NOTICE file, excluding those notices that do not\n     pertain to any part of the Derivative Works, in at least one of\n     the following places: within a NOTICE text file distributed as part\n     of the Derivative Works; within the Source form or documentation,\n     if provided along with the Derivative Works; or, within a display\n     generated by the Derivative Works, if and wherever such third-party\n     notices normally appear. The contents of the NOTICE file are for\n     informational purposes only and do not modify the License. You\n     may add Your own attribution notices within Derivative Works that\n     You distribute, alongside or as an addendum to the NOTICE text\n     from the Work, provided that such additional attribution notices\n     cannot be construed as modifying the License.  You may add Your own\n     copyright statement to Your modifications and may provide additional\n     or different license terms and conditions for use, reproduction, or\n     distribution of Your modifications, or for any such Derivative Works\n     as a whole, provided Your use, reproduction, and distribution of the\n     Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions.\nUnless You explicitly state otherwise, any Contribution intentionally\nsubmitted for inclusion in the Work by You to the Licensor shall be\nunder the terms and conditions of this License, without any additional\nterms or conditions.  Notwithstanding the above, nothing herein shall\nsupersede or modify the terms of any separate license agreement you may\nhave executed with Licensor regarding such Contributions.\n\n6. Trademarks.\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\nUnless required by applicable law or agreed to in writing, Licensor\nprovides the Work (and each Contributor provides its Contributions) on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\nexpress or implied, including, without limitation, any warranties or\nconditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR\nA PARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any risks\nassociated with Your exercise of permissions under this License.\n\n8. Limitation of Liability.\nIn no event and under no legal theory, whether in tort (including\nnegligence), contract, or otherwise, unless required by applicable law\n(such as deliberate and grossly negligent acts) or agreed to in writing,\nshall any Contributor be liable to You for damages, including any direct,\nindirect, special, incidental, or consequential damages of any character\narising as a result of this License or out of the use or inability to\nuse the Work (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all other\ncommercial damages or losses), even if such Contributor has been advised\nof the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\nWhile redistributing the Work or Derivative Works thereof, You may\nchoose to offer, and charge a fee for, acceptance of support, warranty,\nindemnity, or other liability obligations and/or rights consistent with\nthis License. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf of\nany other Contributor, and only if You agree to indemnify, defend, and\nhold each Contributor harmless for any liability incurred by, or claims\nasserted against, such Contributor by reason of your accepting any such\nwarranty or additional liability.\n\nEND OF TERMS AND CONDITIONS \n</code></pre>"},{"location":"start/about/release-notes/","title":"Release Notes","text":""},{"location":"start/about/release-notes/#v184-20230809","title":"v1.8.4 (2023/08/09)","text":"<p>An addendum to the previous release to fix misaligned headings in the release notes.</p>"},{"location":"start/about/release-notes/#v183-20230809","title":"v1.8.3 (2023/08/09)","text":"<p>This release introduces several documentation updates.</p>"},{"location":"start/about/release-notes/#documentation","title":"Documentation","text":"<ul> <li>Deploying a VM with the vAppConfig bootstrap provider (#175)</li> <li>Deploying a VM with the Cloud-Init bootstrap provider (#183)</li> <li>Information about a VM resources such as CPU, memory, storage (#189)</li> <li>A call-out to address the incomplete Sysprep state issue (#186)</li> <li>How to use <code>kubectl vsphere vm web-console</code> (#196)</li> </ul>"},{"location":"start/about/release-notes/#v182-20230728","title":"v1.8.2 (2023/07/28)","text":"<p>This release includes changes related to the upcoming v1alpha2 schema, power state enhancements, support for deploying Windows, and the ability for a <code>VirtualMachineClass</code> to contain all of a vSphere VM's hardware and configuration options.</p>"},{"location":"start/about/release-notes/#coming-soon","title":"Coming Soon","text":"<ul> <li>The not-yet-enabled-but-now-in-repo beginnings of the VM Operator v1alpha2 API (the changes so far...)!</li> </ul>"},{"location":"start/about/release-notes/#new-features","title":"New Features","text":"<ul> <li>A <code>VirtualMachineClass</code> now supports all of the hardware and configuration options of a vSphere VM!</li> <li>Support for deploying Windows VMs using Sysprep (#83, #136, #149).</li> <li>The ability to suspend a VM, either using suspend or standby, by setting the VM's <code>spec.powerState</code> field to <code>suspended</code> (#152, #154).</li> <li>Users can now gracefully shutdown a VM using VM tools instead of halting a VM, the equivalent of yanking a system's power cable, by setting <code>spec.powerOffMode</code> to <code>soft</code> or <code>trySoft</code> (#152).</li> <li>Restart a VM or reboot its guest by setting <code>spec.nextRestartTime</code> to the value <code>now</code>. The VM will be power cycled exactly once until the next time <code>spec.nextRestartTime</code> is set to <code>now</code> (#155).</li> <li>Support for multiple, concurrent controllers for reconciling a VirtualMachine resource via the new <code>spec.controllerName</code> field in a <code>VirtualMachineClass</code> (#163).</li> </ul>"},{"location":"start/about/release-notes/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>A <code>VirtualMachineService</code> with an empty selector no longer considers all <code>VirtualMachine</code> resources (#137).</li> </ul>"},{"location":"start/about/release-notes/#known-issues","title":"Known Issues","text":"<ul> <li>Deploying a <code>VirtualMachine</code> with an encryption storage policy is not currently supported. This means it is not possible for a VM Service VM to have encrypted boot disks. However, using VM Class that has a vTPM will still result in a VM with encryption less its boot disks.</li> </ul>"},{"location":"start/about/roadmap/","title":"Roadmap","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#101)</p>"},{"location":"start/contrib/","title":"Contribute","text":"<p>We welcome all-comers interested in improving VM Operator. There are a myriad of ways to help, including:</p> <ul> <li>Suggest a change such as an idea to improve the documentation, an API enhancement request, or a nifty new, GitHub action, just to name a few.</li> <li>Report an issue if you find a bug, spelling mistake, etc. </li> <li>Submit a change to update or create new documentation, fix a bug, or create a bespoke feature! </li> </ul>"},{"location":"start/contrib/report-issue/","title":"Report an Issue","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#98)</p>"},{"location":"start/contrib/submit-change/","title":"Submit a Change","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#99)</p>"},{"location":"start/contrib/submit-change/#documentation","title":"Documentation","text":"<p>There are two types of documentation: source and markdown.</p>"},{"location":"start/contrib/submit-change/#source-code","title":"Source Code","text":"<p>All source code should be documented in accordance with the Go's documentation rules.</p>"},{"location":"start/contrib/submit-change/#markdown","title":"Markdown","text":"<p>When creating or modifying the project's <code>README.md</code> file or any of the documentation in the <code>docs</code> directory, please keep the following rules in mind:</p> <ol> <li>All links to internal resources should be relative.</li> <li>All links to markdown files should include the file extension.</li> </ol> <p>For example, the below link points to the <code>Quickstart</code> page:</p> <p> /start/quick.md</p> <p>However, when the above link is followed when viewing this page directly from the Github repository instead of the generated site documentation, the link will return a 404.</p> <p>While it's recommended that users view the generated site documentation instead of the source Markdown directly, we can still fix it so that the above link will work regardless. To fix the link, simply make it relative and add the Markdown file extension:</p> <p> ../quick.md</p> <p>Now the link will work regardless from where it's viewed.</p>"},{"location":"start/contrib/submit-change/#style-syntax","title":"Style &amp; Syntax","text":"<p>All source files should be linted. Any errors or warnings produced by the tools should be corrected before the source is committed. To lint the project, please run the following command:</p> <pre><code>make lint\n</code></pre> <p>The above command lints markdown, shell scripts, and Go sources.</p> <p>Your IDE of choice likely has a plug-in that can utilize the golanglint-ci linter, and it will also constantly keep your Go sources up to date.</p> <p>Another option is to use a client-side, pre-commit hook to ensure that the sources meet the required standards. For example, in the project's <code>.git/hooks</code> directory create a file called <code>pre-commit</code> and mark it as executable. Then paste the following content inside the file:</p> <pre><code>#!/bin/sh\nmake lint 1&gt; /dev/null\n</code></pre> <p>The above script will execute prior to a Git commit operation, prior to even the commit message dialog. The script will invoke the <code>Makefile</code>'s <code>lint</code> target, formatting the sources. If the command returns a non-zero exit code, the commit operation will abort with the error.</p>"},{"location":"start/contrib/submit-change/#code-coverage","title":"Code Coverage","text":"<p>All new work submitted to the project should have associated tests where applicable. If there is ever a question of whether or not a test is applicable then the answer is likely yes.</p> <p>This project uses GitHub actions to add coverage to pull requests (PR). If a PR's coverage falls below 60%, the check fails and the PR will be declined until such time coverage is increased.</p> <p>It's also possible to test the project locally while outputting the code coverage. On the command line, from the project's root directory, execute the following:</p> <pre><code>make coverage-full\n</code></pre>"},{"location":"start/contrib/submit-change/#commit-messages","title":"Commit Messages","text":"<p>Commit messages should follow the guide 5 Useful Tips For a Better Commit Message. The two primary rules to which to adhere are  </p> <ol> <li> <p>Commit message subjects should not exceed 50 characters in total and should be followed by a blank line.</p> </li> <li> <p>The commit message's body should not have a width that exceeds 72 characters.</p> </li> </ol> <p>For example, the following commit has a very useful message that is succinct without losing utility.</p> <pre><code>commit e80c696939a03f26cd180934ba642a729b0d2941\nAuthor: akutz &lt;sakutz@gmail.com&gt;\nDate:   Tue Oct 20 23:47:36 2015 -0500\n\n    Added --format,-f option for CLI\n\n    This patch adds the flag '--format' or '-f' for the\n    following CLI commands:\n\n        * adapter instances\n        * device [get]\n        * snapshot [get]\n        * snapshot copy\n        * snapshot create\n        * volume [get]\n        * volume attach\n        * volume create\n        * volume map\n        * volume mount\n        * volume path\n\n    The user can specify either '--format=yml|yaml|json' or\n    '-f yml|yaml|json' in order to influence how the resulting,\n    structured data is marshaled prior to being emitted to the console.\n</code></pre> <p>Please note that the output above is the full output for viewing a commit. However, because the above message adheres to the commit message rules, it's quite easy to show just the commit's subject:</p> <pre><code>$ git show e80c696939a03f26cd180934ba642a729b0d2941 --format=\"%s\" -s\nAdded --format,-f option for CLI\n</code></pre> <p>It's also equally simple to print the commit's subject and body together:</p> <pre><code>$ git show e80c696939a03f26cd180934ba642a729b0d2941 --format=\"%s%n%n%b\" -s\nAdded --format,-f option for CLI\n\nThis patch adds the flag '--format' or '-f' for the\nfollowing CLI commands:\n\n    * adapter instances\n    * device [get]\n* snapshot [get]\n* snapshot copy\n    * snapshot create\n    * volume [get]\n* volume attach\n    * volume create\n    * volume map\n    * volume mount\n    * volume path\n\nThe user can specify either '--format=yml|yaml|json' or\n'-f yml|yaml|json' in order to influence how the resulting,\nstructured data is marshaled prior to being emitted to the console.\n</code></pre>"},{"location":"start/contrib/submit-change/#pull-requests","title":"Pull Requests","text":"<p>All developers are required to follow the GitHub Flow model when proposing new features or even submitting fixes.</p> <p>Please note that although not explicitly stated in the referenced GitHub Flow model, all work should occur on a fork of this project, not from within a branch of this project itself.</p> <p>Pull requests submitted to this project should adhere to the following guidelines:</p> <ul> <li> <p>Branches should be rebased off of the upstream master prior to being opened as pull requests and again prior to merge. This is to ensure that the build system accounts for any changes that may only be detected during the build and test phase.</p> </li> <li> <p>Unless granted an exception a pull request should contain only a single commit. This is because features and patches should be atomic -- wholly shippable items that are either included in a release, or not. Please squash commits on a branch before opening a pull request. It is not a deal-breaker otherwise, but please be prepared to add a comment or explanation as to why you feel multiple commits are required.</p> </li> </ul>"},{"location":"start/contrib/suggest-change/","title":"Suggest a Change","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#97)</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#120)</p>"},{"location":"tutorials/deploy-apps/","title":"Deploy applications","text":"<p>This section reviews how to deploy different types of applications with VM Operator.</p>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/","title":"Deploy an NFS server and client","text":"<p>This tutorial describes how to deploy two VMs in different namespaces, where the first VM acts as an NFS server and the other as the client, able to mount the exported share via a <code>VirtualMachineService</code>.</p>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes the following:</p> <ul> <li>There are two namespaces in which the user is able to deploy <code>VirtualMachine</code> resources. In this tutorial, the namespaces shall be referred to as <code>ns-1</code> and <code>ns-2</code>.</li> <li>Both namespaces have access to a <code>VirtualMachineClass</code>. In this tutorial, the class used is <code>best-effort-small</code>.</li> <li>Both namespaces have access to a <code>VirtualMachineImage</code> (VMI) with Ubuntu 22.04+. In this tutorial, the VMI used is <code>vmi-a5bad5914ea06d469</code>.</li> <li>Both namespaces have access to a <code>StorageClass</code>. In this tutorial, the class used is <code>global-storage</code>.</li> </ul>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#deploy-the-server","title":"Deploy the server","text":"<p>The first step is to deploy a VM that will act as the NFS server, which is achieved by applying the following YAML:</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: nfs-server\nnamespace: ns-1\nlabels:\napp: nfs-server\nspec:\nclassName: best-effort-small\nimageName: vmi-a5bad5914ea06d469 # Ubuntu 22.04 (jammy)\nstorageClass: global-storage\nvmMetadata:\ntransport:  CloudInit\nsecretName: nfs-server-bootstrap-data\n\n---\n\napiVersion: v1\nkind: Secret\nmetadata:\nname: nfs-server-bootstrap-data\nnamespace: ns-1\nstringData:\nuser-data: |\n#cloud-config\nssh_pwauth: true\nusers:\n- name: user\nprimary_group: user\nsudo: ALL=(ALL) NOPASSWD:ALL\ngroups: users\nlock_passwd: false\n# Password is secret\npasswd: '$1$SaltSalt$YhgRYajLPrYevs14poKBQ0'\nshell: /bin/bash\nruncmd:\n- apt-get update --assume-no\n- apt-get install --assume-yes nfs-kernel-server sudo\n- mkdir -p /mnt/share\n- echo 'world.' &gt;/mnt/share/hello\n- echo '/mnt/share *(rw,sync,no_subtree_check,insecure)' &gt;&gt;/etc/exports\n- exportfs -a\n</code></pre>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#create-service-to-access-nfs-exports","title":"Create service to access NFS exports","text":"<p>Great, an NFS server is up and running in namespace <code>ns-1</code>! To ensure workloads outside of that namespace are able to mount the NFS server's exports, a <code>VirtualMachineService</code> is used to provide a load balanced IP address that can be accessed across namespaces.</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachineService\nmetadata:\nname: nfs-server\nnamespace: ns-1\nspec:\nselector:\napp: nfs-server\ntype: LoadBalancer\nports:\n- name: tcp-ssh\nport: 22\nprotocol: TCP\ntargetPort: 22\n- name: tcp-rpcbind\nport: 111\nprotocol: TCP\ntargetPort: 111\n- name: tcp-nfs\nport: 2049\nprotocol: TCP\ntargetPort: 2049\n</code></pre> <p>Use <code>kubectl</code> to make note of the service's external IP address, ex.:</p> <pre><code>$ kubectl -n ns-1 get service nfs-server\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                   AGE\nnfs-server   LoadBalancer   172.24.116.43   192.168.0.4   22/TCP,111/TCP,2049/TCP   2m3s\n</code></pre>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#deploy-the-client","title":"Deploy the client","text":"<p>With the NFS server up and running, it is time to deploy the VM that will act as the client by applying the following YAML:</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: nfs-client\nnamespace: ns-2\nlabels:\napp: nfs-client\nspec:\nclassName: best-effort-small\nimageName: vmi-a5bad5914ea06d469 # Ubuntu 22.04 (jammy)\nstorageClass: global-storage\nvmMetadata:\ntransport:  CloudInit\nsecretName: nfs-client-bootstrap-data\n\n---\n\napiVersion: v1\nkind: Secret\nmetadata:\nname: nfs-client-bootstrap-data\nnamespace: ns-2\nstringData:\nuser-data: |\n#cloud-config\nssh_pwauth: true\nusers:\n- name: user\nprimary_group: user\nsudo: ALL=(ALL) NOPASSWD:ALL\ngroups: users\nlock_passwd: false\n# Password is secret\npasswd: '$1$SaltSalt$YhgRYajLPrYevs14poKBQ0'\nshell: /bin/bash\nruncmd:\n- apt-get update --assume-no\n- apt-get install --assume-yes nfs-common sudo\n- mkdir /var/share\n- chmod 0777 /var/share\n</code></pre>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#create-service-to-access-nfs-client-via-ssh","title":"Create service to access NFS client via SSH","text":"<p>Just like a service is required to access the NFS exports across namespaces, the following YAML creates a service that allows external actors to access the NFS client via SSH:</p> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachineService\nmetadata:\nname: nfs-client\nnamespace: ns-2\nspec:\nselector:\napp: nfs-client\ntype: LoadBalancer\nports:\n- name: tcp-ssh\nport: 22\nprotocol: TCP\ntargetPort: 22\n</code></pre> <p>Use <code>kubectl</code> to make note of the service's external IP address, ex.:</p> <pre><code>$ kubectl -n ns-2 get service nfs-client\nNAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nnfs-client   LoadBalancer   172.24.204.9   192.168.0.5   22/TCP    51s\n</code></pre>"},{"location":"tutorials/deploy-apps/nfs-server-and-client/#mount-the-exported-share","title":"Mount the exported share","text":"<p>Alright, it is time to see if everything works as intended!</p> <ol> <li> <p>With the external IP address from the <code>nfs-client</code> service, SSH into the VM acting as the NFS client:</p> <pre><code>ssh user@&lt;NFS_CLIENT_SERVICE_EXTERNAL_IP&gt;\n</code></pre> </li> <li> <p>Print the contents of the file <code>/var/share/hello</code> to the screen:</p> <pre><code>cat /var/share/hello\n</code></pre> <p>Oops! An error occurred, because that file does not exist!</p> <pre><code>cat: /var/share/hello: No such file or directory\n</code></pre> </li> <li> <p>Mount the export from the NFS server:</p> <pre><code>sudo mount -t nfs &lt;NFS_SERVER_SERVICE_EXTERNAL_IP&gt;:/mnt/share /var/share\n</code></pre> </li> <li> <p>Print the contents of the file <code>/var/share/hello</code> one more time:</p> <pre><code>cat /var/share/hello\n</code></pre> <p>If the text <code>world.</code> appeared on the screen, then congratulations, the NFS export was successfully mounted to the client!</p> </li> </ol>"},{"location":"tutorials/deploy-vm/","title":"Deploy a VM","text":"<p>This page reviews the different components, workflows, and decisions related to deploying a VM with VM Operator:</p>"},{"location":"tutorials/deploy-vm/#the-virtualmachine-api","title":"The VirtualMachine API","text":"<pre><code>apiVersion: vmoperator.vmware.com/v1alpha1 # (1)\nkind: VirtualMachine # (2)\nmetadata:\nname:      my-vm # (3)\nnamespace: my-namespace # (4)\nspec:\nclassName:    small # (5)\nimageName:    ubuntu-2210 # (6)\nstorageClass: iscsi # (7)\nvmMetadata: # (8)\ntransport: CloudInit\nsecretName: my-vm-bootstrap-data\n</code></pre> <ol> <li> <p> The field <code>apiVersion</code> indicates the resource's schema, ex. <code>vmoperator.vmware.com</code>, and version, ex.<code>v1alpha1</code>.</p> </li> <li> <p> The field <code>kind</code> specifies the kind of resource, ex. <code>VirtualMachine</code>.</p> </li> <li> <p> The field <code>metadata.name</code> is used to uniquely identify an instance of an API resource in a given Kubernetes namespace.</p> </li> <li> <p> The field <code>metadata.namespace</code> denotes in which Kubernetes namespace the API resource is located.</p> </li> <li> <p> The field <code>spec.className</code> refers to the name of the <code>VirtualMachineClass</code> resource that provides the hardware configuration when deploying a VM.</p> <p>The <code>VirtualMachineClass</code> API is cluster-scoped, and the following command may be used to print all of the VM classes on a cluster:</p> <pre><code>kubectl get vmclass\n</code></pre> <p>However, access to these resources is per-namespace. To determine the names of the VM classes that may be used in a given namespace, use the following command:</p> <pre><code>kubectl get -n &lt;NAMESPACE&gt; vmclassbinding\n</code></pre> </li> <li> <p> The field <code>spec.imageName</code> refers to the name of the <code>ClusterVirtualMachineImage</code> or <code>VirtualMachineImage</code> resource that provides the disk(s) when deploying a VM.</p> <ul> <li>If there is a <code>ClusterVirtualMachineImage</code> resource with the specified name, the cluster-scoped resource is used, otherwise...</li> <li>If there is a <code>VirtualMachineImage</code> resource in the same namespace as the VM being deployed, the namespace-scoped resource is used.</li> </ul> <p>The following command may be used to print a list of the images available to the entire cluster:</p> <pre><code>kubectl get clustervmimage\n</code></pre> <p>Whereas this command may be used to print a list of images available to a given namespace:</p> <pre><code>kubectl get -n &lt;NAMESPACE&gt; vmimage\n</code></pre> </li> <li> <p> The field <code>spec.storageClass</code> refers to the Kubernetes storage class used to configure the storage for the VM.</p> <p>The following command may be used to print a list of the storage classes available to the entire cluster:</p> <pre><code>kubectl get storageclass\n</code></pre> </li> <li> <p> The field <code>spec.vmMetadata</code>, and the fields inside of it, are used to configure the VM's bootstrap provider.</p> </li> </ol>"},{"location":"tutorials/deploy-vm/#bootstrap-provider","title":"Bootstrap Provider","text":"<p>There are a number of methods that may be used to bootstrap a virtual machine's (VM) guest operating system:</p> Provider Supported Network Config Linux Windows Description Cloud-Init \u2713 Cloud-Init Network v2 \u2713 \u2713 The industry standard, multi-distro method for cross-platform, cloud instance initialization with modern, VM images Sysprep \u2713 Guest OS Customization (GOSC) \u2713 Microsoft Sysprep is used by VMware to customize Windows images on first-boot vAppConfig \u2713 Bespoke \u2713 For images with bespoke, bootstrap engines driven by vAppConfig properties OvfEnv deprecated Guest OS Customization (GOSC) \u2713 A combination of GOSC and Cloud-Init user-data ExtraConfig deprecated GOSC \u2713 For images with bespoke, bootstrap engines that rely on Guest Info data <p><code>ConfigMap</code> or <code>Secret</code></p> <p>The choice of a <code>ConfigMap</code> or <code>Secret</code> resource in no way impacts the choice or behavior of the selected bootstrap provider. When VM Operator was first released, the only way to store bootstrap data was via a <code>ConfigMap</code> resource. While this still works, it is not recommended as data stored in a <code>ConfigMap</code> is not encrypted at rest. Instead, it is recommended users switch to using <code>Secret</code> resources for storing bootstrap data. Aside from how the data is stored in etcd, the following two resources are effectively identical and serve the same purpose:</p> CloudConfig in a ConfigMapCloudConfig in a Secret <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\ndata:\nuser-data: |\n#cloud-config\nusers:\n- default\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\nstringData:\nuser-data: |\n#cloud-config\nusers:\n- default\n</code></pre>"},{"location":"tutorials/deploy-vm/#supported","title":"Supported","text":""},{"location":"tutorials/deploy-vm/#cloud-init","title":"Cloud-Init","text":"<p>Cloud-init is the industry standard multi-distribution method for cross-platform cloud instance initialisation. Refer to Deploy a VM With Cloud-Init for instructions to use this bootstrap method.</p>"},{"location":"tutorials/deploy-vm/#sysprep","title":"Sysprep","text":"<p>Microsoft originally designed Sysprep as a means to prepare a deployed system for use as a template. It was such a useful tool, that VMware utilized it as the means to customize a VM with a Windows guest. For example, the following YAML provisions a new VM, using Sysprep to:</p> <ul> <li>supplies a product key</li> <li>sets the admin password</li> <li>configures first-boot</li> </ul> <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    windows11\nstorageClass: iscsi\nvmMetadata:\ntransport: Sysprep\nsecretName: my-vm-bootstrap-data\n---\napiVersion: v1\nkind: Secret\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\nstringData:\nunattend: |\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;unattend xmlns=\"urn:schemas-microsoft-com:unattend\"&gt;\n&lt;settings pass=\"windowsPE\"&gt;\n&lt;component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;UserData&gt;\n&lt;AcceptEula&gt;true&lt;/AcceptEula&gt;\n&lt;FullName&gt;akutz&lt;/FullName&gt;\n&lt;Organization&gt;VMware&lt;/Organization&gt;\n&lt;ProductKey&gt;\n&lt;Key&gt;1234-5678-9abc-defg&lt;/Key&gt;\n&lt;WillShowUI&gt;Never&lt;/WillShowUI&gt;\n&lt;/ProductKey&gt;\n&lt;/UserData&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n&lt;settings pass=\"specialize\"&gt;\n&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;ComputerName&gt;my-vm&lt;/ComputerName&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n&lt;settings pass=\"oobeSystem\"&gt;\n&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\"\nxmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;UserAccounts&gt;\n&lt;AdministratorPassword&gt;\n&lt;Value&gt;FakePassword&lt;/Value&gt;\n&lt;PlainText&gt;true&lt;/PlainText&gt;\n&lt;/AdministratorPassword&gt;\n&lt;/UserAccounts&gt;\n&lt;OOBE&gt;\n&lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;\n&lt;HideLocalAccountScreen&gt;true&lt;/HideLocalAccountScreen&gt;\n&lt;HideOEMRegistrationScreen&gt;true&lt;/HideOEMRegistrationScreen&gt;\n&lt;HideOnlineAccountScreens&gt;true&lt;/HideOnlineAccountScreens&gt;\n&lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;\n&lt;ProtectYourPC&gt;3&lt;/ProtectYourPC&gt;\n&lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;\n&lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;\n&lt;/OOBE&gt;\n&lt;TimeZone&gt;Central Standard Time&lt;/TimeZone&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n&lt;cpi:offlineImage cpi:source=\"\" xmlns:cpi=\"urn:schemas-microsoft-com:cpi\" /&gt;\n&lt;/unattend&gt;\n</code></pre>"},{"location":"tutorials/deploy-vm/#minimal-config","title":"Minimal Config","text":"<p>The following <code>Secret</code> resource may be used to bootstrap a Windows image with minimal information. Please note the image would have to be using a Volume License SKU as the product ID is not provided:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-vm-bootstrap-data\nnamespace: my-ns\nstringData:\nunattend: |\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;unattend xmlns=\"urn:schemas-microsoft-com:unattend\"&gt;\n&lt;settings pass=\"oobeSystem\"&gt;\n&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n&lt;OOBE&gt;\n&lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;\n&lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;\n&lt;/OOBE&gt;\n&lt;/component&gt;\n&lt;/settings&gt;\n&lt;/unattend&gt;\n</code></pre> <p>For more information on Sysprep, please refer to Microsoft's official documentation.</p>"},{"location":"tutorials/deploy-vm/#vappconfig","title":"vAppConfig","text":"<p>The vAppConfig bootstrap method is useful for legacy, VM images that rely on bespoke, boot-time processes that leverage vAppConfig properties for customizing a guest. Please refer to this tutorial for more information.</p>"},{"location":"tutorials/deploy-vm/#deprecated","title":"Deprecated","text":"<p>The following bootstrap providers are still available, but they are deprecated and are not recommended.</p>"},{"location":"tutorials/deploy-vm/#ovfenv","title":"OvfEnv","text":"<p>The <code>OvfEnv</code> method is no longer recommended. It relied on a combination of VMware's Guest OS Customization (GOSC) APIs for bootstrapping the guest's network and the Cloud-Init OVF data source for supplying a Cloud-Init Cloud Config. As a result of mixing bootstrap engines (GOSC and Cloud-Init), there was a race condition that meant any image that used <code>OvfEnv</code> needed to have a special fix applied. This provider is no longer supported and will be removed in v1alpha2. Any consumers still relying on this provider should switch to Cloud-Init.</p>"},{"location":"tutorials/deploy-vm/#extraconfig","title":"ExtraConfig","text":"<p>When Tanzu Kubernetes was first released, the Cluster API provider that depended upon VM Operator used the <code>ExtraConfig</code> provider for supplying bootstrap information. This method was never intended for wide use, and Tanzu now uses Cloud-Init anyway. To that end, this provider is no longer supported and will be removed in v1alpha2. Any consumers still relying on this provider should switch to Cloud-Init.</p>"},{"location":"tutorials/deploy-vm/cloudinit/","title":"Deploy a VM With Cloud-Init","text":"<p>Cloud-Init is widely recognized as the de facto method for bootstrapping modern workloads on hyperscalers, including VM Service on vSphere.</p>"},{"location":"tutorials/deploy-vm/cloudinit/#example","title":"Example","text":"<p>The example below illustrates a <code>VirtualMachine</code> resource that specifies a Cloud-Init Cloud Config via a <code>Secret</code> resource (<code>my-vm-bootstrap-data</code>). For more information on the Cloud-Init Cloud Config format, please see the official documentation.</p> VirtualMachineCloudConfig <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname:      my-vm\nnamespace: my-namespace\nspec:\nclassName:    small\nimageName:    ubuntu-2210\nstorageClass: iscsi\nvmMetadata:\ntransport: CloudInit\nsecretName: my-vm-bootstrap-data\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname:      my-vm-bootstrap-data\nnamespace: my-namespace\nstringData:\nuser-data: |\n#cloud-config\nusers:\n- default\n- name: akutz\nprimary_group: akutz\ngroups: users\nssh_authorized_keys:\n- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSL7uWGj...\nruncmd:\n- \"ls /\"\n- [ \"ls\", \"-a\", \"-l\", \"/\" ]\nwrite_files:\n- path: /etc/my-plaintext\npermissions: '0644'\nowner: root:root\ncontent: |\nHello, world.\n</code></pre>"},{"location":"tutorials/deploy-vm/vappconfig/","title":"Deploy a VM with vAppConfig","text":"<p>The vAppConfig bootstrap method is useful for legacy VM images that rely on bespoke, boot-time processes that leverage vAppConfig properties for customizing a guest. This method also supports properties specified with Golang-style template strings in order to use information not known ahead of time, such as the networking configuration, into the guest via vApp properties.</p>"},{"location":"tutorials/deploy-vm/vappconfig/#example","title":"Example","text":"<p>The following example showcases a <code>VirtualMachine</code> resource that specifies one or more vApp properties used to bootstrap a guest.</p> VirtualMachinevAppConfigvAppConfig with templated properties <pre><code>apiVersion: vmoperator.vmware.com/v1alpha1\nkind: VirtualMachine\nmetadata:\nname: legacy-vm\nnamespace: test-ns\nspec:\nclassName: best-effort-small\nimageName: haproxy-v0.2.0\npowerState: poweredOn\nstorageClass: wcpglobal-storage-profile\nvmMetadata:\nsecretName: my-secret\ntransport: vAppConfig\n</code></pre> <p>The vApp properties below...</p> <p>The vApp properties used in this example are not standard. All images may define their own properties for configuring the guest's network, or anything else. Please review the image's OVF to understand what properties are available and should be assigned.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-secret\nnamespace: test-ns\nstringData:\nnameservers: \"{{ (index .V1alpha1.Net.Nameservers 0) }}\"         management_ip: \"{{ (index (index .V1alpha1.Net.Devices 0).IPAddresses 0) }}\"\nhostname: \"{{ .V1alpha1.VM.Name }} \"       management_gateway: \"{{ (index .V1alpha1.Net.Devices 0).Gateway4 }}\"\n</code></pre> <p>The vApp properties below...</p> <p>The vApp properties used in this example are not standard. All images may define their own properties for configuring the guest's network, or anything else. Please review the image's OVF to understand what properties are available and should be assigned.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-secret\nnamespace: test-ns\nstringData:\n# Please see the following section for more information on these functions.\nnameservers: \"{{ V1alpha1_FormatNameservers 2 \\\",\\\" }}\"\nmanagement_ip: \"{{ V1alpha1_FormatIP \\\"192.168.1.10\\\" \\\"255.255.255.0\\\" }}\"\nhostname: \"{{ .V1alpha1.VM.Name }} \"  management_gateway: \"{{ (index .V1alpha1.Net.Devices 0).Gateway4 }}\"\n</code></pre>"},{"location":"tutorials/deploy-vm/vappconfig/#templating","title":"Templating","text":"<p>Properties are templated according to the Golang <code>text/template</code> package. Please refer to Go's documentation for a full understanding of how to construct template queries.</p>"},{"location":"tutorials/deploy-vm/vappconfig/#input-object","title":"Input object","text":"<p>The object provided to the template engine is the <code>VirtualMachineTemplate</code> data structure.</p>"},{"location":"tutorials/deploy-vm/vappconfig/#pre-defined-functions","title":"Pre-defined functions","text":"<p>The following table lists the functions VM Operator defines and passes into the template engine to make it easier to construct the information required for vApp properties:</p> Query name Signature Description V1alpha1_FirstIP <code>func () string</code> Get the first, non-loopback IP address (formatted with network length) from the first NIC. V1alpha1_FirstIPFromNIC <code>func (index int) string</code> Get the first, non-loopback IP address (formatted with network length) from the n'th NIC. If the specified index is out-of-bounds, the template string is not parsed. V1alpha1_FormatIP <code>func (IP string, netmask string) string</code> This function may be used to format an IP address with or without a network prefix length. If the provided netmask is empty, then the IP address returned does not include a network length. If the provided netmask is non-empty, then it must be either a length, ex. <code>/24</code>, or decimal notation, ex. <code>255.255.255.0</code>. V1alpha1_FirstNicMacAddr <code>func() (string, error)</code> Get the MAC address from the first NIC. V1alpha1_FormatNameservers <code>func (count int, delimiter string) string</code> Format the first occurred count of nameservers with the provided delimiter. Specify a negative number to include all nameservers. V1alpha1_IP <code>func(IP string) string</code> Format an IP address with the default netmask CIDR. If the specified IP is invalid, the template string is not parsed. V1alpha1_IPsFromNIC <code>func (index int) []string</code> List all IPs, formatted with the network length, from the n'th NIC. If the specified index is out-of-bounds, the template string is not parsed. V1alpha1_SubnetMask <code>func(cidr string) (string, error)</code> Get a subnet mask from an IP address formatted with a network length."},{"location":"tutorials/troubleshooting/","title":"Troubleshooting","text":"<p>This page reviews troubleshooting procedures related to VM Operator. This page is designed to assist you in identifying and resolving common issues that you might encounter while using VM Operator. Please follow the sections below for troubleshooting different scenarios.</p>"},{"location":"tutorials/troubleshooting/#common-issues-users-may-encounter","title":"Common issues users may encounter:","text":"<ul> <li>VM Deployment</li> <li>IP Assignment</li> <li>VM Publish</li> </ul>"},{"location":"tutorials/troubleshooting/#web-console","title":"Web console","text":"<p>In situations where Virtual Machines become inaccessible through the normal network, a console session via the VM Web Console can be an invaluable tool for diagnosing and resolving issues. Refer to Get a Console Session</p>"},{"location":"tutorials/troubleshooting/deploy-vm/","title":"Deploy VM","text":"<p>This page is dedicated to diagnose issues that can arise during the deployment of virtual machines. Refer to Deploy VM tutorial on how to deploy a virtual machine.</p>"},{"location":"tutorials/troubleshooting/deploy-vm/#best-practice","title":"Best practice","text":"<ul> <li>Create a namespace</li> <li>Make sure the VM image is available in the namespace. <pre><code>$ kubectl get virtualmachineimage -n &lt;namespace-name&gt;\n$ kubectl get contentlibrary -n &lt;namespace-name&gt;\n</code></pre></li> <li>Make sure storage class is specified in the namespace <pre><code>$ kubectl get storageclass -n &lt;namespace-name&gt;\n</code></pre></li> <li>Make sure VM Class is attached to the namespace <pre><code>$ kubectl get vmclass -n &lt;namespace-name&gt;\n</code></pre></li> <li>Make sure appropriate transport is chosen</li> <li>Deploy VM</li> </ul>"},{"location":"tutorials/troubleshooting/deploy-vm/#troubleshoot-step","title":"Troubleshoot step","text":""},{"location":"tutorials/troubleshooting/deploy-vm/#1-access-your-namespace-in-the-kubernetes-environment","title":"1. Access your namespace in the Kubernetes environment.","text":"<pre><code>$ kubectl config use-context &lt;context-name&gt;\n</code></pre> <p>See Get and Use the Supervisor Context if you need help accessing Supervisor clusters.</p>"},{"location":"tutorials/troubleshooting/deploy-vm/#2-describe-virtual-machine-k8s-resource","title":"2. Describe Virtual Machine k8s resource","text":"<p>Run <code>kubectl describe vm &lt;vm-name&gt; -n &lt;namespace-name&gt;</code> command. Check <code>VM.Status.Conditions</code> as seen in sample output below.</p> <pre><code>$ kubectl describe vm &lt;vm-name&gt; -n &lt;namespace-name&gt;\n\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2022-07-06T00:43:47Z\n    Status:                Unknown\n    Type:                  GuestCustomization\n    Last Transition Time:  2022-07-06T00:42:41Z\n    Status:                True\n    Type:                  VirtualMachinePrereqReady\n    Last Transition Time:  2022-07-06T00:43:47Z\n    Message:               VMware Tools is not running\n    Reason:                VirtualMachineToolsNotRunning\n    Severity:              Error\n    Status:                False\n    Type:                  VirtualMachineTools\n...\n</code></pre>"},{"location":"tutorials/troubleshooting/deploy-vm/#error-and-fix","title":"Error and fix","text":"<p>This section focuses on leveraging the information provided by the <code>VM.Status.Conditions</code> field to diagnose the root cause of errors and provide solutions. By analyzing which conditions showed <code>Status</code> as <code>False</code>/<code>Unknown</code> and <code>Reason</code>, you can troubleshoot issues depending on below scenarios.</p>"},{"location":"tutorials/troubleshooting/deploy-vm/#virtualmachineprereqready","title":"VirtualMachinePrereqReady","text":"<ul> <li>Reason <code>VirtualMachineClassBindingNotFound</code>(deprecated)/<code>VirtualMachineClassNotFound</code>: this means that the VM class has not been associated to the Supervisor namespace.<ul> <li>Fix: Attach VM Class to your namespace. Refer to VMClass for details.</li> </ul> </li> <li>Reason <code>VirtualMachineImageNotFound</code>: this means that the VirtualMachine Image doesn't exist in the supervisor cluster, which means that this VM image doesn't exist in the vCenter, or the content library which it belongs to has not been associated to any of the supervisor namespaces. <ul> <li>Fix: Upload mentioned VM Image to content library and associate content library to your namespace. Refer to VM Image for details.</li> </ul> </li> <li>Reason <code>ContentSourceBindingNotFound</code> (deprecated): this means that the content library which contains the specified VM Image has not been associated to the Supervisor namespace. <ul> <li>Fix: Associate content library to your namespace. Refer to VM Image for details.</li> </ul> </li> </ul>"},{"location":"tutorials/troubleshooting/deploy-vm/#guestcustomizationvirtualmachinetools","title":"GuestCustomization/VirtualMachineTools","text":"<ul> <li>Reason <code>VirtualMachineToolsNotRunning</code>: This could be happening when VM tools is not installed on the image at use.<ul> <li>Fix: Make sure image has VM tools installed. Then get a console session to debug further.</li> </ul> </li> <li>Reason <code>GuestCustomizationFailed</code>/<code>VirtualMachineToolsNotRunning</code>: This could be happening when using transport <code>OvfEnv/ExtraConfig</code> to deploy a VM. These two transports use VMTools for network configuration, using incompatible virtual machine images could cause race with cloud-init user-data configuration. <ul> <li>Fix: Get a console session to debug further. And consider using transport <code>CloudInit</code> for wider VM Image support. Refer to Deploy with CloudInit for details.</li> </ul> </li> </ul>"},{"location":"tutorials/troubleshooting/get-console-session/","title":"Get a Console Session","text":"<p>A console session can be helpful when VMs are not accessible through the normal network, for example, when the guest OS failed to configure the correct network settings during first boot. Follow the steps in this tutorial to get a console session to a VM using the <code>kubectl</code> command.</p>"},{"location":"tutorials/troubleshooting/get-console-session/#prerequisites","title":"Prerequisites","text":"<p>Have edit or owner permissions on the namespace where the problematic VM is deployed. To confirm that you have the required permissions, run the following command:</p> <pre><code>$ kubectl auth can-i create webconsolerequests -n &lt;namespace-name&gt;\n</code></pre> <p>For more information, see vSphere with Tanzu Identity and Access Management.</p>"},{"location":"tutorials/troubleshooting/get-console-session/#procedure","title":"Procedure","text":""},{"location":"tutorials/troubleshooting/get-console-session/#1-access-your-namespace-in-the-kubernetes-environment","title":"1. Access your namespace in the Kubernetes environment.","text":"<pre><code>$ kubectl config use-context &lt;context-name&gt;\n</code></pre> <p>See Get and Use the Supervisor Context if you need help accessing Supervisor clusters.</p>"},{"location":"tutorials/troubleshooting/get-console-session/#2-verify-that-the-vm-is-deployed","title":"2. Verify that the VM is deployed.","text":"<pre><code>$ kubectl get vm -n &lt;namespace-name&gt;\n</code></pre> <p>The output is similar to the following:</p> <pre><code>NAME      POWERSTATE        AGE\nvm-name   poweredOn         175m\n</code></pre>"},{"location":"tutorials/troubleshooting/get-console-session/#3-obtain-the-url-to-the-vm-web-console","title":"3. Obtain the URL to the VM web console.","text":"<pre><code>$ kubectl vsphere vm web-console vm-name -n &lt;namespace-name&gt;\n</code></pre> <p>Use <code>--short</code> to get only the URL as output, or <code>-v/--verbose &lt;log-level&gt;</code> to get more information about the command execution.</p> <p>Link Expiration</p> <p>The command returns an authenticated URL to the VM's web console as output. If you don't use the URL within a non-changeable period of time, set to two minutes, the URL expires. After you open the URL to connect to the web console page, the session time is controlled by WebMKS and lasts longer.</p>"},{"location":"tutorials/troubleshooting/get-console-session/#4-click-the-url-and-perform-any-necessary-troubleshooting-actions-for-your-vm","title":"4. Click the URL and perform any necessary troubleshooting actions for your VM.","text":""},{"location":"tutorials/troubleshooting/ip-assignment/","title":"IP Assignment","text":"<p>This page describes how to troubleshoot when VM was created but was stuck in the status with no valid IP addresses.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#procedure","title":"Procedure","text":""},{"location":"tutorials/troubleshooting/ip-assignment/#1-access-your-kubernetes-namespace","title":"1. Access Your Kubernetes Namespace","text":"<p>Ensure you are in the correct Kubernetes context. Use the following command to set the context to the desired namespace.</p> <pre><code>$ kubectl config use-context &lt;context-name&gt;\n</code></pre> <p>See Get and Use the Supervisor Context if you need help accessing Supervisor clusters.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#2-verify-vm-network-settings","title":"2. Verify VM Network Settings","text":"<p>Check if the VM's network settings match the underlying networking infrastructure. If you specify an nsx-t network in a vds networking environment (or vice versa), you may encounter an error message. </p> <p>Use the following command to check the VM's network settings: <pre><code>$ kubectl describe vm &lt;vm-name&gt; -n &lt;namespace-name&gt;\n</code></pre></p> <p>The output is similar to the following: <pre><code>Spec:\n  Network Interfaces:\n    Network Type:  nsx-t\n...\nEvents:\nType     Reason                 Age                  From                                                                                                 Message\n----     ------                 ----                 ----                                                                                                 -------\nWarning  CreateOrUpdateFailure  5s (x16 over 2m24s)  vmware-system-vmop/vmware-system-vmop-controller-manager-5ff5d769d8-6rwqc/virtualmachine-controller  no matches for kind \"VirtualNetworkInterface\" in version \"vmware.com/v1alpha1\"\n</code></pre></p> <p>Fix: Not specify network interface during VM deployment, VM Operator will utilize default networking.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#3-check-ncp-virtualnetworkinterface-status-nsx-t-networking","title":"3. Check NCP VirtualNetworkInterface Status (NSX-T Networking)","text":"<p>For NSX-T networking, verify the status of the VirtualNetworkInterface. The expected conditions type should be \"Ready,\" and the IP Addresses should return valid addresses.</p> <p>Note if <code>vm.spec.networkInterfaces[0].networkName</code> is empty, then <code>vnetif_name</code> should be <code>&lt;vm_name&gt;-lsp</code>. Otherwise, <code>vnetif_name</code> should be <code>&lt;network_name&gt;-&lt;vm_name&gt;-lsp</code>.</p> <p>Use the following command to check the <code>VirtualNetworkInterface</code> status: <pre><code>$ kubectl describe virtualnetworkinterfaces &lt;vnetif-name&gt; -n &lt;namespace-name&gt;\n</code></pre></p> <p>The output is similar to the following: <pre><code>Status:\n  Conditions:\n    Status:      True\n    Type:        Ready\n  Ip Addresses:\n    Gateway:      172.26.0.33\n    Ip:           172.26.0.34\n    Subnet Mask:  255.255.255.240\nEvents:\n  Type    Reason                        Age   From               Message\n  ----    ------                        ----  ----               -------\n  Normal  SuccessfulRealizeNSXResource  25m   nsx-container-ncp  Successfully realized NSX resource for VirtualNetworkInterface\n</code></pre></p> <p>Fix Contact your VI Admin to verify the networking health status.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#4-check-networkinterfacesstatus-vds-networking","title":"4. Check NetworkInterfacesStatus (VDS Networking)","text":"<p>For VDS networking, inspect the NetworkInterface status. The conditions type should be \"Ready,\" and the IP Configs should return valid addresses.</p> <p>Use the following command to check the <code>NetworkInterface</code> status: <pre><code>$ kubectl describe networkinterface &lt;vm-name&gt; -n &lt;namespace-name&gt;\n</code></pre></p> <p>The output is similar to the following: <pre><code>Status:\n  Conditions:\n    Last Transition Time:  2023-09-18T19:17:38Z\n    Status:                True\n    Type:                  Ready\n  Ip Configs:\n    Gateway:      192.168.1.1\n    Ip:           192.168.128.42\n    Ip Family:    IPv4\n    Subnet Mask:  255.255.0.0\n  Network ID:     dvportgroup-55\nEvents:           &lt;none&gt;\n</code></pre></p> <p>Fix Contact your VI Admin to verify the networking health status.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#5-bootstrap","title":"5. Bootstrap","text":"<p>When network interfaces issues are ruled out, we will troubleshoot issues caused by Bootstrap Providers. Here, we'll explore troubleshooting steps for CloudInit, Sysprep, and vAppConfig issues that may affect network connectivity.</p>"},{"location":"tutorials/troubleshooting/ip-assignment/#a-cloudinit","title":"a. CloudInit","text":"<p>For VM deployed using CloudInit bootstrap, if the VM is powered on but doesn't have a valid IPV4 IP assigned, it usually indicates that the CloudInit failed. Follow the steps below to troubleshoot:</p> <ol> <li> <p>Check <code>GuestCustomization</code> condition in VM: When <code>GuestCustomization</code> condition shows false, it indicates GOSC or CloudInit failure.</p> <ul> <li>Alternative - Check Customization Reconfigure Event: In the vCenter UI, verify if the <code>Customization Reconfigure</code> event is present in the VM's events. Its absence suggests a CloudInit failure.</li> </ul> </li> <li> <p>Inspect VM ExtraConfig Values:</p> <ul> <li>Ensure that ExtraConfig[guestinfo.metadata] contains metadata generated by the vm-operator, including network configurations and hostname.</li> <li>Confirm that ExtraConfig[guestinfo.userdata] contains the user-supplied cloud-config data.</li> </ul> </li> <li> <p>Examine Cloud-Init Logs: Log in to the virtual machine using the web console. Access the VM's filesystem and locate the Cloud-Init logs at <code>/var/log/cloud-init.log</code> and <code>/var/log/cloud-init-output.log</code>.</p> </li> </ol>"},{"location":"tutorials/troubleshooting/ip-assignment/#b-sysprep","title":"b. Sysprep","text":"<p>For VM deployed using Sysprep bootstrap, if the VM is powered on but doesn't have a valid IPV4 IP assigned, it usually indicates that the GOSC failed. Follow the steps below to troubleshoot:</p> <ol> <li> <p>Check <code>GuestCustomization</code> condition in VM: When <code>GuestCustomization</code> condition shows false, it indicates GOSC or Sysprep failure.</p> <ul> <li>Alternative - Check Customization Succeeded Event: In the vCenter UI, verify if the <code>Customization of VM succeeded</code> event is present in the VM's events. Its absence indicates GOSC or Sysprep failure.</li> </ul> </li> <li> <p>Inspect GOSC Status: Log in to the virtual machine using the web console. Check the log file at <code>C:/Windows/TEMP/vmware-imc/guestcust</code> (the path may vary based on the Windows version) to confirm GOSC status.</p> </li> <li> <p>Validate Sysprep Answer File: Inside the VM, ensure all templating expressions have been parsed correctly. For example, you should see <code>&lt;Identifier&gt;{{ V1alpha1_FirstNicMacAddr }}&lt;/Identifier&gt;</code> converted to <code>&lt;Identifier&gt;00-11-22-33-aa-bb-cc&lt;/Identifier&gt;</code>. The Sysprep content file should be located at <code>C:\\sysprep1001\\sysprep.xml</code> inside the VM.</p> </li> <li> <p>Check the GOSC and Sysprep Logs: Examine logs at the following paths within the VM for more details: <pre><code>C:/Windows/Panther/setuperr\nC:/Windows/Panther/Unattendgc/setuperr\nC:/Windows/System32/Sysprep/Panther/setuperr\n</code></pre></p> </li> </ol>"},{"location":"tutorials/troubleshooting/ip-assignment/#c-vappconfig","title":"c. vAppConfig","text":"<p>For VM deployed using vAppConfig bootstrap, if the VM is powered on but doesn't have a valid IPV4 IP assigned, it usually indicates that the GOSC or vAppConfig failed. Follow the steps below to troubleshoot:</p> <ol> <li> <p>Check <code>GuestCustomization</code> condition in VM: When <code>GuestCustomization</code> condition shows false, it indicates GOSC or vAppConfig failure.</p> <ul> <li>Alternative - Check Customization Succeeded Event: In the vCenter UI, ensure that the <code>Customization of VM succeeded</code> event is present in the VM's events. Its absence indicates GOSC or vAppConfig failure.</li> </ul> </li> <li> <p>Verify VM <code>VAppPropertyInfo</code>: Inspect the <code>config.vAppConfig.property</code> of the VM to ensure all templating expressions have been parsed correctly.</p> </li> <li> <p>Inspect Logs: Log in to the virtual machine using the web console. Check the log file <code>/var/log/vmware-imc/toolsDeployPkg.log</code> file look for string <code>Executing Traditional GOSC workflow</code>.</p> </li> </ol>"},{"location":"tutorials/troubleshooting/publish-vm/","title":"Publish Virtual Machine","text":"<p>// TODO (github.com/vmware-tanzu/vm-operator#200)</p>"}]}